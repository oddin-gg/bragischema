// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: bragi/bragi_service.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchTimelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchTimelineRequest) Reset() {
	*x = MatchTimelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_bragi_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTimelineRequest) ProtoMessage() {}

func (x *MatchTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_bragi_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTimelineRequest.ProtoReflect.Descriptor instead.
func (*MatchTimelineRequest) Descriptor() ([]byte, []int) {
	return file_bragi_bragi_service_proto_rawDescGZIP(), []int{0}
}

type MatchTimelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *MatchTimelineResponse) Reset() {
	*x = MatchTimelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_bragi_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTimelineResponse) ProtoMessage() {}

func (x *MatchTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_bragi_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTimelineResponse.ProtoReflect.Descriptor instead.
func (*MatchTimelineResponse) Descriptor() ([]byte, []int) {
	return file_bragi_bragi_service_proto_rawDescGZIP(), []int{1}
}

func (x *MatchTimelineResponse) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

type LiveDataFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represent timestamp since matches states should be received. If value is null then currently played matches are
	// received. If "after" property is defined, then matches which were updated after the "after" timestamp are received.
	After *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=after,proto3,oneof" json:"after,omitempty"`
}

func (x *LiveDataFeedRequest) Reset() {
	*x = LiveDataFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_bragi_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDataFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDataFeedRequest) ProtoMessage() {}

func (x *LiveDataFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_bragi_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDataFeedRequest.ProtoReflect.Descriptor instead.
func (*LiveDataFeedRequest) Descriptor() ([]byte, []int) {
	return file_bragi_bragi_service_proto_rawDescGZIP(), []int{2}
}

func (x *LiveDataFeedRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

type LiveDataFeedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*LiveDataFeedMessage_Keepalive
	//	*LiveDataFeedMessage_Match
	Message isLiveDataFeedMessage_Message `protobuf_oneof:"message"`
}

func (x *LiveDataFeedMessage) Reset() {
	*x = LiveDataFeedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_bragi_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDataFeedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDataFeedMessage) ProtoMessage() {}

func (x *LiveDataFeedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_bragi_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDataFeedMessage.ProtoReflect.Descriptor instead.
func (*LiveDataFeedMessage) Descriptor() ([]byte, []int) {
	return file_bragi_bragi_service_proto_rawDescGZIP(), []int{3}
}

func (m *LiveDataFeedMessage) GetMessage() isLiveDataFeedMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *LiveDataFeedMessage) GetKeepalive() *KeepAlive {
	if x, ok := x.GetMessage().(*LiveDataFeedMessage_Keepalive); ok {
		return x.Keepalive
	}
	return nil
}

func (x *LiveDataFeedMessage) GetMatch() *MatchMessage {
	if x, ok := x.GetMessage().(*LiveDataFeedMessage_Match); ok {
		return x.Match
	}
	return nil
}

type isLiveDataFeedMessage_Message interface {
	isLiveDataFeedMessage_Message()
}

type LiveDataFeedMessage_Keepalive struct {
	Keepalive *KeepAlive `protobuf:"bytes,1,opt,name=keepalive,proto3,oneof"`
}

type LiveDataFeedMessage_Match struct {
	Match *MatchMessage `protobuf:"bytes,2,opt,name=match,proto3,oneof"`
}

func (*LiveDataFeedMessage_Keepalive) isLiveDataFeedMessage_Message() {}

func (*LiveDataFeedMessage_Match) isLiveDataFeedMessage_Message() {}

// Heartbeat message which is sent periodically.
type KeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *KeepAlive) Reset() {
	*x = KeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_bragi_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAlive) ProtoMessage() {}

func (x *KeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_bragi_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAlive.ProtoReflect.Descriptor instead.
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return file_bragi_bragi_service_proto_rawDescGZIP(), []int{4}
}

func (x *KeepAlive) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// At the beginning, when the stream is established, an initial (Game)MatchMessage with a (Game)MatchSnapshot payload
// (eg. CS2MatchSnapshot) is received (just only once during the stream lifecycle, to recover (Game)MatchSnapshot you
// need to reconnect to server). Cache this (Game)MatchSnapshot into memory. Then only AnnouncementUpdate or (Game)MatchMessage
// with (Game)MatchUpdate payload (eg. CS2MatchUpdate) can be received. Those updates are supposed to be applied on cached
// (Game)MatchSnapshot. If AnnouncementUpdate is received then append its "payload" property value to the array of "announcements"
// in cached (Game)MatchSnapshot. If update (e.g. CS2MatchUpdate) payload is received then apply this update on "match_state"
// property in cached (Game)MatchSnapshot. For both update cases do not forget also to update "sequence" and "timestamp"
// properties in the cached (Game)MatchSnapshot with values from the received (Game)MatchMessage.
type MatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*MatchMessage_Announcement
	//	*MatchMessage_Cs2
	//	*MatchMessage_Cs2Duels
	//	*MatchMessage_Dota2
	//	*MatchMessage_RushSoccer
	//	*MatchMessage_Lol
	//	*MatchMessage_RushBasketball
	//	*MatchMessage_Valorant
	Message isMatchMessage_Message `protobuf_oneof:"message"`
}

func (x *MatchMessage) Reset() {
	*x = MatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_bragi_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMessage) ProtoMessage() {}

func (x *MatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_bragi_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMessage.ProtoReflect.Descriptor instead.
func (*MatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_bragi_service_proto_rawDescGZIP(), []int{5}
}

func (m *MatchMessage) GetMessage() isMatchMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *MatchMessage) GetAnnouncement() *AnnouncementUpdate {
	if x, ok := x.GetMessage().(*MatchMessage_Announcement); ok {
		return x.Announcement
	}
	return nil
}

func (x *MatchMessage) GetCs2() *CS2MatchMessage {
	if x, ok := x.GetMessage().(*MatchMessage_Cs2); ok {
		return x.Cs2
	}
	return nil
}

func (x *MatchMessage) GetCs2Duels() *CS2MatchMessage {
	if x, ok := x.GetMessage().(*MatchMessage_Cs2Duels); ok {
		return x.Cs2Duels
	}
	return nil
}

func (x *MatchMessage) GetDota2() *Dota2MatchMessage {
	if x, ok := x.GetMessage().(*MatchMessage_Dota2); ok {
		return x.Dota2
	}
	return nil
}

func (x *MatchMessage) GetRushSoccer() *RushSoccerMatchMessage {
	if x, ok := x.GetMessage().(*MatchMessage_RushSoccer); ok {
		return x.RushSoccer
	}
	return nil
}

func (x *MatchMessage) GetLol() *LolMatchMessage {
	if x, ok := x.GetMessage().(*MatchMessage_Lol); ok {
		return x.Lol
	}
	return nil
}

func (x *MatchMessage) GetRushBasketball() *RushBasketballMatchMessage {
	if x, ok := x.GetMessage().(*MatchMessage_RushBasketball); ok {
		return x.RushBasketball
	}
	return nil
}

func (x *MatchMessage) GetValorant() *ValorantMatchMessage {
	if x, ok := x.GetMessage().(*MatchMessage_Valorant); ok {
		return x.Valorant
	}
	return nil
}

type isMatchMessage_Message interface {
	isMatchMessage_Message()
}

type MatchMessage_Announcement struct {
	// Append announcement's payload to property announcements array in (Game)MatchSnapshot.
	Announcement *AnnouncementUpdate `protobuf:"bytes,1,opt,name=announcement,proto3,oneof"`
}

type MatchMessage_Cs2 struct {
	// Message which wraps CS2MatchSnapshot or CS2MatchUpdate message with given match_urn and sequence for CS2 sport.
	Cs2 *CS2MatchMessage `protobuf:"bytes,2,opt,name=cs2,proto3,oneof"`
}

type MatchMessage_Cs2Duels struct {
	// Message which wraps CS2MatchSnapshot or CS2MatchUpdate message with given match_urn and sequence for CS2 Duels sport.
	Cs2Duels *CS2MatchMessage `protobuf:"bytes,3,opt,name=cs2_duels,json=cs2Duels,proto3,oneof"`
}

type MatchMessage_Dota2 struct {
	// Message which wraps Dota2MatchSnapshot or Dota2MatchUpdate message with given match_urn and sequence for Dota2 sport.
	Dota2 *Dota2MatchMessage `protobuf:"bytes,4,opt,name=dota2,proto3,oneof"`
}

type MatchMessage_RushSoccer struct {
	// Message which wraps RushSoccerMatchSnapshot or RushSoccerMatchUpdate message with given match_urn and sequence for RushSoccer sport.
	RushSoccer *RushSoccerMatchMessage `protobuf:"bytes,5,opt,name=rush_soccer,json=rushSoccer,proto3,oneof"`
}

type MatchMessage_Lol struct {
	// Message which wraps LolMatchSnapshot or LolMatchUpdate message with given match_urn and sequence for Lol sport.
	Lol *LolMatchMessage `protobuf:"bytes,6,opt,name=lol,proto3,oneof"`
}

type MatchMessage_RushBasketball struct {
	// Message which wraps RushBasketballMatchSnapshot or RushBasketballMatchUpdate message with given match_urn and sequence for RushBasketball sport.
	RushBasketball *RushBasketballMatchMessage `protobuf:"bytes,7,opt,name=rush_basketball,json=rushBasketball,proto3,oneof"`
}

type MatchMessage_Valorant struct {
	// Message which wraps ValorantMatchSnapshot or ValorantMatchUpdate message with given match_urn and sequence for Valorant sport.
	Valorant *ValorantMatchMessage `protobuf:"bytes,8,opt,name=valorant,proto3,oneof"`
}

func (*MatchMessage_Announcement) isMatchMessage_Message() {}

func (*MatchMessage_Cs2) isMatchMessage_Message() {}

func (*MatchMessage_Cs2Duels) isMatchMessage_Message() {}

func (*MatchMessage_Dota2) isMatchMessage_Message() {}

func (*MatchMessage_RushSoccer) isMatchMessage_Message() {}

func (*MatchMessage_Lol) isMatchMessage_Message() {}

func (*MatchMessage_RushBasketball) isMatchMessage_Message() {}

func (*MatchMessage_Valorant) isMatchMessage_Message() {}

// This oneof joins together all possible (Game)MatchSnapshots. It servers as a helper wrapper for match snapshots, so
// it is not necessary to use it for match state maintain/reconstruction.
type MatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Snapshot:
	//	*MatchSnapshot_Cs2
	//	*MatchSnapshot_Cs2Duels
	//	*MatchSnapshot_Dota2
	//	*MatchSnapshot_RushSoccer
	//	*MatchSnapshot_Lol
	//	*MatchSnapshot_RushBasketball
	//	*MatchSnapshot_Valorant
	Snapshot isMatchSnapshot_Snapshot `protobuf_oneof:"snapshot"`
}

func (x *MatchSnapshot) Reset() {
	*x = MatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_bragi_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshot) ProtoMessage() {}

func (x *MatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_bragi_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshot.ProtoReflect.Descriptor instead.
func (*MatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_bragi_service_proto_rawDescGZIP(), []int{6}
}

func (m *MatchSnapshot) GetSnapshot() isMatchSnapshot_Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (x *MatchSnapshot) GetCs2() *CS2MatchSnapshot {
	if x, ok := x.GetSnapshot().(*MatchSnapshot_Cs2); ok {
		return x.Cs2
	}
	return nil
}

func (x *MatchSnapshot) GetCs2Duels() *CS2MatchSnapshot {
	if x, ok := x.GetSnapshot().(*MatchSnapshot_Cs2Duels); ok {
		return x.Cs2Duels
	}
	return nil
}

func (x *MatchSnapshot) GetDota2() *Dota2MatchSnapshot {
	if x, ok := x.GetSnapshot().(*MatchSnapshot_Dota2); ok {
		return x.Dota2
	}
	return nil
}

func (x *MatchSnapshot) GetRushSoccer() *RushSoccerMatchSnapshot {
	if x, ok := x.GetSnapshot().(*MatchSnapshot_RushSoccer); ok {
		return x.RushSoccer
	}
	return nil
}

func (x *MatchSnapshot) GetLol() *LolMatchSnapshot {
	if x, ok := x.GetSnapshot().(*MatchSnapshot_Lol); ok {
		return x.Lol
	}
	return nil
}

func (x *MatchSnapshot) GetRushBasketball() *RushBasketballMatchSnapshot {
	if x, ok := x.GetSnapshot().(*MatchSnapshot_RushBasketball); ok {
		return x.RushBasketball
	}
	return nil
}

func (x *MatchSnapshot) GetValorant() *ValorantMatchSnapshot {
	if x, ok := x.GetSnapshot().(*MatchSnapshot_Valorant); ok {
		return x.Valorant
	}
	return nil
}

type isMatchSnapshot_Snapshot interface {
	isMatchSnapshot_Snapshot()
}

type MatchSnapshot_Cs2 struct {
	Cs2 *CS2MatchSnapshot `protobuf:"bytes,1,opt,name=cs2,proto3,oneof"`
}

type MatchSnapshot_Cs2Duels struct {
	Cs2Duels *CS2MatchSnapshot `protobuf:"bytes,2,opt,name=cs2_duels,json=cs2Duels,proto3,oneof"`
}

type MatchSnapshot_Dota2 struct {
	Dota2 *Dota2MatchSnapshot `protobuf:"bytes,3,opt,name=dota2,proto3,oneof"`
}

type MatchSnapshot_RushSoccer struct {
	RushSoccer *RushSoccerMatchSnapshot `protobuf:"bytes,4,opt,name=rush_soccer,json=rushSoccer,proto3,oneof"`
}

type MatchSnapshot_Lol struct {
	Lol *LolMatchSnapshot `protobuf:"bytes,5,opt,name=lol,proto3,oneof"`
}

type MatchSnapshot_RushBasketball struct {
	RushBasketball *RushBasketballMatchSnapshot `protobuf:"bytes,6,opt,name=rush_basketball,json=rushBasketball,proto3,oneof"`
}

type MatchSnapshot_Valorant struct {
	Valorant *ValorantMatchSnapshot `protobuf:"bytes,7,opt,name=valorant,proto3,oneof"`
}

func (*MatchSnapshot_Cs2) isMatchSnapshot_Snapshot() {}

func (*MatchSnapshot_Cs2Duels) isMatchSnapshot_Snapshot() {}

func (*MatchSnapshot_Dota2) isMatchSnapshot_Snapshot() {}

func (*MatchSnapshot_RushSoccer) isMatchSnapshot_Snapshot() {}

func (*MatchSnapshot_Lol) isMatchSnapshot_Snapshot() {}

func (*MatchSnapshot_RushBasketball) isMatchSnapshot_Snapshot() {}

func (*MatchSnapshot_Valorant) isMatchSnapshot_Snapshot() {}

// This oneof joins together all possible (Game)MatchStates. It servers as a helper wrapper for match states, so
// it is not necessary to use it for match state maintain/reconstruction.
type MatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to State:
	//	*MatchState_Cs2
	//	*MatchState_Cs2Duels
	//	*MatchState_Dota2
	//	*MatchState_RushSoccer
	//	*MatchState_Lol
	//	*MatchState_RushBasketball
	//	*MatchState_Valorant
	State isMatchState_State `protobuf_oneof:"state"`
}

func (x *MatchState) Reset() {
	*x = MatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_bragi_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchState) ProtoMessage() {}

func (x *MatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_bragi_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchState.ProtoReflect.Descriptor instead.
func (*MatchState) Descriptor() ([]byte, []int) {
	return file_bragi_bragi_service_proto_rawDescGZIP(), []int{7}
}

func (m *MatchState) GetState() isMatchState_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *MatchState) GetCs2() *CS2MatchState {
	if x, ok := x.GetState().(*MatchState_Cs2); ok {
		return x.Cs2
	}
	return nil
}

func (x *MatchState) GetCs2Duels() *CS2MatchState {
	if x, ok := x.GetState().(*MatchState_Cs2Duels); ok {
		return x.Cs2Duels
	}
	return nil
}

func (x *MatchState) GetDota2() *Dota2MatchState {
	if x, ok := x.GetState().(*MatchState_Dota2); ok {
		return x.Dota2
	}
	return nil
}

func (x *MatchState) GetRushSoccer() *RushSoccerMatchState {
	if x, ok := x.GetState().(*MatchState_RushSoccer); ok {
		return x.RushSoccer
	}
	return nil
}

func (x *MatchState) GetLol() *LolMatchState {
	if x, ok := x.GetState().(*MatchState_Lol); ok {
		return x.Lol
	}
	return nil
}

func (x *MatchState) GetRushBasketball() *RushBasketballMatchState {
	if x, ok := x.GetState().(*MatchState_RushBasketball); ok {
		return x.RushBasketball
	}
	return nil
}

func (x *MatchState) GetValorant() *ValorantMatchState {
	if x, ok := x.GetState().(*MatchState_Valorant); ok {
		return x.Valorant
	}
	return nil
}

type isMatchState_State interface {
	isMatchState_State()
}

type MatchState_Cs2 struct {
	Cs2 *CS2MatchState `protobuf:"bytes,1,opt,name=cs2,proto3,oneof"`
}

type MatchState_Cs2Duels struct {
	Cs2Duels *CS2MatchState `protobuf:"bytes,2,opt,name=cs2_duels,json=cs2Duels,proto3,oneof"`
}

type MatchState_Dota2 struct {
	Dota2 *Dota2MatchState `protobuf:"bytes,3,opt,name=dota2,proto3,oneof"`
}

type MatchState_RushSoccer struct {
	RushSoccer *RushSoccerMatchState `protobuf:"bytes,4,opt,name=rush_soccer,json=rushSoccer,proto3,oneof"`
}

type MatchState_Lol struct {
	Lol *LolMatchState `protobuf:"bytes,5,opt,name=lol,proto3,oneof"`
}

type MatchState_RushBasketball struct {
	RushBasketball *RushBasketballMatchState `protobuf:"bytes,6,opt,name=rush_basketball,json=rushBasketball,proto3,oneof"`
}

type MatchState_Valorant struct {
	Valorant *ValorantMatchState `protobuf:"bytes,7,opt,name=valorant,proto3,oneof"`
}

func (*MatchState_Cs2) isMatchState_State() {}

func (*MatchState_Cs2Duels) isMatchState_State() {}

func (*MatchState_Dota2) isMatchState_State() {}

func (*MatchState_RushSoccer) isMatchState_State() {}

func (*MatchState_Lol) isMatchState_State() {}

func (*MatchState_RushBasketball) isMatchState_State() {}

func (*MatchState_Valorant) isMatchState_State() {}

var File_bragi_bragi_service_proto protoreflect.FileDescriptor

var file_bragi_bragi_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x63,
	0x73, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f,
	0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x6c, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x72, 0x75, 0x73,
	0x68, 0x5f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3f, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x22, 0x56, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x13, 0x4c, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xe6, 0x03, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x63, 0x73, 0x32, 0x12,
	0x35, 0x0a, 0x09, 0x63, 0x73, 0x32, 0x5f, 0x64, 0x75, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x73,
	0x32, 0x44, 0x75, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x75, 0x73, 0x68,
	0x5f, 0x73, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x03, 0x6c, 0x6f,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x6c, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x62,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x62, 0x61, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56,
	0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xae, 0x03, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x03,
	0x63, 0x73, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x48, 0x00, 0x52, 0x03, 0x63, 0x73, 0x32, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x73, 0x32,
	0x5f, 0x64, 0x75, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x73, 0x32, 0x44, 0x75, 0x65, 0x6c,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x05, 0x64,
	0x6f, 0x74, 0x61, 0x32, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x6f, 0x63,
	0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x75, 0x73,
	0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x03, 0x6c, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x6c, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62,
	0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x0a,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x73,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x63, 0x73, 0x32, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x73, 0x32, 0x5f, 0x64, 0x75, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x73, 0x32, 0x44, 0x75, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x64, 0x6f, 0x74,
	0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x75, 0x73,
	0x68, 0x5f, 0x73, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x03, 0x6c, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c,
	0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x6c, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62,
	0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x12,
	0x37, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x76, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x32, 0xa1, 0x01, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x67, 0x69, 0x12, 0x4c, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x4c, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x21, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64,
	0x69, 0x6e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x5a, 0x0e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e,
	0x67, 0x67, 0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bragi_bragi_service_proto_rawDescOnce sync.Once
	file_bragi_bragi_service_proto_rawDescData = file_bragi_bragi_service_proto_rawDesc
)

func file_bragi_bragi_service_proto_rawDescGZIP() []byte {
	file_bragi_bragi_service_proto_rawDescOnce.Do(func() {
		file_bragi_bragi_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_bragi_service_proto_rawDescData)
	})
	return file_bragi_bragi_service_proto_rawDescData
}

var file_bragi_bragi_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bragi_bragi_service_proto_goTypes = []interface{}{
	(*MatchTimelineRequest)(nil),        // 0: bragi.MatchTimelineRequest
	(*MatchTimelineResponse)(nil),       // 1: bragi.MatchTimelineResponse
	(*LiveDataFeedRequest)(nil),         // 2: bragi.LiveDataFeedRequest
	(*LiveDataFeedMessage)(nil),         // 3: bragi.LiveDataFeedMessage
	(*KeepAlive)(nil),                   // 4: bragi.KeepAlive
	(*MatchMessage)(nil),                // 5: bragi.MatchMessage
	(*MatchSnapshot)(nil),               // 6: bragi.MatchSnapshot
	(*MatchState)(nil),                  // 7: bragi.MatchState
	(*Match)(nil),                       // 8: bragi.Match
	(*timestamppb.Timestamp)(nil),       // 9: google.protobuf.Timestamp
	(*AnnouncementUpdate)(nil),          // 10: bragi.AnnouncementUpdate
	(*CS2MatchMessage)(nil),             // 11: bragi.CS2MatchMessage
	(*Dota2MatchMessage)(nil),           // 12: bragi.Dota2MatchMessage
	(*RushSoccerMatchMessage)(nil),      // 13: bragi.RushSoccerMatchMessage
	(*LolMatchMessage)(nil),             // 14: bragi.LolMatchMessage
	(*RushBasketballMatchMessage)(nil),  // 15: bragi.RushBasketballMatchMessage
	(*ValorantMatchMessage)(nil),        // 16: bragi.ValorantMatchMessage
	(*CS2MatchSnapshot)(nil),            // 17: bragi.CS2MatchSnapshot
	(*Dota2MatchSnapshot)(nil),          // 18: bragi.Dota2MatchSnapshot
	(*RushSoccerMatchSnapshot)(nil),     // 19: bragi.RushSoccerMatchSnapshot
	(*LolMatchSnapshot)(nil),            // 20: bragi.LolMatchSnapshot
	(*RushBasketballMatchSnapshot)(nil), // 21: bragi.RushBasketballMatchSnapshot
	(*ValorantMatchSnapshot)(nil),       // 22: bragi.ValorantMatchSnapshot
	(*CS2MatchState)(nil),               // 23: bragi.CS2MatchState
	(*Dota2MatchState)(nil),             // 24: bragi.Dota2MatchState
	(*RushSoccerMatchState)(nil),        // 25: bragi.RushSoccerMatchState
	(*LolMatchState)(nil),               // 26: bragi.LolMatchState
	(*RushBasketballMatchState)(nil),    // 27: bragi.RushBasketballMatchState
	(*ValorantMatchState)(nil),          // 28: bragi.ValorantMatchState
}
var file_bragi_bragi_service_proto_depIdxs = []int32{
	8,  // 0: bragi.MatchTimelineResponse.matches:type_name -> bragi.Match
	9,  // 1: bragi.LiveDataFeedRequest.after:type_name -> google.protobuf.Timestamp
	4,  // 2: bragi.LiveDataFeedMessage.keepalive:type_name -> bragi.KeepAlive
	5,  // 3: bragi.LiveDataFeedMessage.match:type_name -> bragi.MatchMessage
	9,  // 4: bragi.KeepAlive.timestamp:type_name -> google.protobuf.Timestamp
	10, // 5: bragi.MatchMessage.announcement:type_name -> bragi.AnnouncementUpdate
	11, // 6: bragi.MatchMessage.cs2:type_name -> bragi.CS2MatchMessage
	11, // 7: bragi.MatchMessage.cs2_duels:type_name -> bragi.CS2MatchMessage
	12, // 8: bragi.MatchMessage.dota2:type_name -> bragi.Dota2MatchMessage
	13, // 9: bragi.MatchMessage.rush_soccer:type_name -> bragi.RushSoccerMatchMessage
	14, // 10: bragi.MatchMessage.lol:type_name -> bragi.LolMatchMessage
	15, // 11: bragi.MatchMessage.rush_basketball:type_name -> bragi.RushBasketballMatchMessage
	16, // 12: bragi.MatchMessage.valorant:type_name -> bragi.ValorantMatchMessage
	17, // 13: bragi.MatchSnapshot.cs2:type_name -> bragi.CS2MatchSnapshot
	17, // 14: bragi.MatchSnapshot.cs2_duels:type_name -> bragi.CS2MatchSnapshot
	18, // 15: bragi.MatchSnapshot.dota2:type_name -> bragi.Dota2MatchSnapshot
	19, // 16: bragi.MatchSnapshot.rush_soccer:type_name -> bragi.RushSoccerMatchSnapshot
	20, // 17: bragi.MatchSnapshot.lol:type_name -> bragi.LolMatchSnapshot
	21, // 18: bragi.MatchSnapshot.rush_basketball:type_name -> bragi.RushBasketballMatchSnapshot
	22, // 19: bragi.MatchSnapshot.valorant:type_name -> bragi.ValorantMatchSnapshot
	23, // 20: bragi.MatchState.cs2:type_name -> bragi.CS2MatchState
	23, // 21: bragi.MatchState.cs2_duels:type_name -> bragi.CS2MatchState
	24, // 22: bragi.MatchState.dota2:type_name -> bragi.Dota2MatchState
	25, // 23: bragi.MatchState.rush_soccer:type_name -> bragi.RushSoccerMatchState
	26, // 24: bragi.MatchState.lol:type_name -> bragi.LolMatchState
	27, // 25: bragi.MatchState.rush_basketball:type_name -> bragi.RushBasketballMatchState
	28, // 26: bragi.MatchState.valorant:type_name -> bragi.ValorantMatchState
	0,  // 27: bragi.Bragi.MatchTimeline:input_type -> bragi.MatchTimelineRequest
	2,  // 28: bragi.Bragi.LiveDataFeed:input_type -> bragi.LiveDataFeedRequest
	1,  // 29: bragi.Bragi.MatchTimeline:output_type -> bragi.MatchTimelineResponse
	3,  // 30: bragi.Bragi.LiveDataFeed:output_type -> bragi.LiveDataFeedMessage
	29, // [29:31] is the sub-list for method output_type
	27, // [27:29] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_bragi_bragi_service_proto_init() }
func file_bragi_bragi_service_proto_init() {
	if File_bragi_bragi_service_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	file_bragi_cs2_proto_init()
	file_bragi_dota2_proto_init()
	file_bragi_rush_soccer_proto_init()
	file_bragi_lol_proto_init()
	file_bragi_rush_basketball_proto_init()
	file_bragi_valorant_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_bragi_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTimelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_bragi_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTimelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_bragi_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDataFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_bragi_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDataFeedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_bragi_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_bragi_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_bragi_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_bragi_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_bragi_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_bragi_bragi_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*LiveDataFeedMessage_Keepalive)(nil),
		(*LiveDataFeedMessage_Match)(nil),
	}
	file_bragi_bragi_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MatchMessage_Announcement)(nil),
		(*MatchMessage_Cs2)(nil),
		(*MatchMessage_Cs2Duels)(nil),
		(*MatchMessage_Dota2)(nil),
		(*MatchMessage_RushSoccer)(nil),
		(*MatchMessage_Lol)(nil),
		(*MatchMessage_RushBasketball)(nil),
		(*MatchMessage_Valorant)(nil),
	}
	file_bragi_bragi_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MatchSnapshot_Cs2)(nil),
		(*MatchSnapshot_Cs2Duels)(nil),
		(*MatchSnapshot_Dota2)(nil),
		(*MatchSnapshot_RushSoccer)(nil),
		(*MatchSnapshot_Lol)(nil),
		(*MatchSnapshot_RushBasketball)(nil),
		(*MatchSnapshot_Valorant)(nil),
	}
	file_bragi_bragi_service_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*MatchState_Cs2)(nil),
		(*MatchState_Cs2Duels)(nil),
		(*MatchState_Dota2)(nil),
		(*MatchState_RushSoccer)(nil),
		(*MatchState_Lol)(nil),
		(*MatchState_RushBasketball)(nil),
		(*MatchState_Valorant)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_bragi_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bragi_bragi_service_proto_goTypes,
		DependencyIndexes: file_bragi_bragi_service_proto_depIdxs,
		MessageInfos:      file_bragi_bragi_service_proto_msgTypes,
	}.Build()
	File_bragi_bragi_service_proto = out.File
	file_bragi_bragi_service_proto_rawDesc = nil
	file_bragi_bragi_service_proto_goTypes = nil
	file_bragi_bragi_service_proto_depIdxs = nil
}
