// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: bragi/bragi_service.proto

package bragi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	historical_statistics "oddin.gg/bragi/historical_statistics"
	stream "oddin.gg/bragi/stream"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BragiClient is the client API for Bragi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BragiClient interface {
	// Sports gRPC remote call returning SportsResponse
	Sports(ctx context.Context, in *historical_statistics.SportsRequest, opts ...grpc.CallOption) (*historical_statistics.SportsResponse, error)
	// Tournaments gRPC remote call returning TournamentResponse
	Tournaments(ctx context.Context, in *historical_statistics.TournamentsRequest, opts ...grpc.CallOption) (*historical_statistics.TournamentResponse, error)
	// TournamentInfo gRPC remote call returning TournamentInfoResponse
	TournamentInfo(ctx context.Context, in *historical_statistics.TournamentInfoRequest, opts ...grpc.CallOption) (*historical_statistics.TournamentInfoResponse, error)
	// TeamHistoricalStatistics gRPC remote call returning HistoricalStatisticsResponse
	TeamHistoricalStatistics(ctx context.Context, in *historical_statistics.TeamHistoricalStatisticsRequest, opts ...grpc.CallOption) (*historical_statistics.HistoricalStatisticsResponse, error)
	// LastFiveEncounters gRPC remote call returning LastFiveEncountersResponse
	LastFiveEncounters(ctx context.Context, in *historical_statistics.LastFiveEncountersRequest, opts ...grpc.CallOption) (*historical_statistics.LastFiveEncountersResponse, error)
	// PostMapStatistics gRPC remote call returning PostMapStatisticsResponse
	PostMapStatistics(ctx context.Context, in *historical_statistics.PostMapStatisticsRequest, opts ...grpc.CallOption) (*historical_statistics.PostMapStatisticsResponse, error)
	// TournamentStatistics gRPC remote call returning TournamentStatisticsResponse
	TournamentStatistics(ctx context.Context, in *historical_statistics.TournamentStatisticsRequest, opts ...grpc.CallOption) (*historical_statistics.TournamentStatisticsResponse, error)
	// TeamTournamentStatistics gRPC remote call returning TeamTournamentStatisticsResponse
	TeamTournamentStatistics(ctx context.Context, in *historical_statistics.TeamTournamentStatisticsRequest, opts ...grpc.CallOption) (*historical_statistics.TeamTournamentStatisticsResponse, error)
	// PlayerStatisticsAccordingRole gRPC remote call returning PlayerStatisticsAccordingRoleResponse
	PlayerStatisticsAccordingRole(ctx context.Context, in *historical_statistics.PlayerStatisticsAccordingRoleRequest, opts ...grpc.CallOption) (*historical_statistics.PlayerStatisticsAccordingRoleResponse, error)
	// LiveDataFeed gRPC stream returning LiveDataFeedMessage one direction stream
	LiveDataFeed(ctx context.Context, in *stream.LiveDataFeedRequest, opts ...grpc.CallOption) (Bragi_LiveDataFeedClient, error)
}

type bragiClient struct {
	cc grpc.ClientConnInterface
}

func NewBragiClient(cc grpc.ClientConnInterface) BragiClient {
	return &bragiClient{cc}
}

func (c *bragiClient) Sports(ctx context.Context, in *historical_statistics.SportsRequest, opts ...grpc.CallOption) (*historical_statistics.SportsResponse, error) {
	out := new(historical_statistics.SportsResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/Sports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) Tournaments(ctx context.Context, in *historical_statistics.TournamentsRequest, opts ...grpc.CallOption) (*historical_statistics.TournamentResponse, error) {
	out := new(historical_statistics.TournamentResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/Tournaments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) TournamentInfo(ctx context.Context, in *historical_statistics.TournamentInfoRequest, opts ...grpc.CallOption) (*historical_statistics.TournamentInfoResponse, error) {
	out := new(historical_statistics.TournamentInfoResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/TournamentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) TeamHistoricalStatistics(ctx context.Context, in *historical_statistics.TeamHistoricalStatisticsRequest, opts ...grpc.CallOption) (*historical_statistics.HistoricalStatisticsResponse, error) {
	out := new(historical_statistics.HistoricalStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/TeamHistoricalStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) LastFiveEncounters(ctx context.Context, in *historical_statistics.LastFiveEncountersRequest, opts ...grpc.CallOption) (*historical_statistics.LastFiveEncountersResponse, error) {
	out := new(historical_statistics.LastFiveEncountersResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/LastFiveEncounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) PostMapStatistics(ctx context.Context, in *historical_statistics.PostMapStatisticsRequest, opts ...grpc.CallOption) (*historical_statistics.PostMapStatisticsResponse, error) {
	out := new(historical_statistics.PostMapStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/PostMapStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) TournamentStatistics(ctx context.Context, in *historical_statistics.TournamentStatisticsRequest, opts ...grpc.CallOption) (*historical_statistics.TournamentStatisticsResponse, error) {
	out := new(historical_statistics.TournamentStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/TournamentStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) TeamTournamentStatistics(ctx context.Context, in *historical_statistics.TeamTournamentStatisticsRequest, opts ...grpc.CallOption) (*historical_statistics.TeamTournamentStatisticsResponse, error) {
	out := new(historical_statistics.TeamTournamentStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/TeamTournamentStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) PlayerStatisticsAccordingRole(ctx context.Context, in *historical_statistics.PlayerStatisticsAccordingRoleRequest, opts ...grpc.CallOption) (*historical_statistics.PlayerStatisticsAccordingRoleResponse, error) {
	out := new(historical_statistics.PlayerStatisticsAccordingRoleResponse)
	err := c.cc.Invoke(ctx, "/bragi.Bragi/PlayerStatisticsAccordingRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) LiveDataFeed(ctx context.Context, in *stream.LiveDataFeedRequest, opts ...grpc.CallOption) (Bragi_LiveDataFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bragi_ServiceDesc.Streams[0], "/bragi.Bragi/LiveDataFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &bragiLiveDataFeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bragi_LiveDataFeedClient interface {
	Recv() (*stream.LiveDataFeedMessage, error)
	grpc.ClientStream
}

type bragiLiveDataFeedClient struct {
	grpc.ClientStream
}

func (x *bragiLiveDataFeedClient) Recv() (*stream.LiveDataFeedMessage, error) {
	m := new(stream.LiveDataFeedMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BragiServer is the server API for Bragi service.
// All implementations must embed UnimplementedBragiServer
// for forward compatibility
type BragiServer interface {
	// Sports gRPC remote call returning SportsResponse
	Sports(context.Context, *historical_statistics.SportsRequest) (*historical_statistics.SportsResponse, error)
	// Tournaments gRPC remote call returning TournamentResponse
	Tournaments(context.Context, *historical_statistics.TournamentsRequest) (*historical_statistics.TournamentResponse, error)
	// TournamentInfo gRPC remote call returning TournamentInfoResponse
	TournamentInfo(context.Context, *historical_statistics.TournamentInfoRequest) (*historical_statistics.TournamentInfoResponse, error)
	// TeamHistoricalStatistics gRPC remote call returning HistoricalStatisticsResponse
	TeamHistoricalStatistics(context.Context, *historical_statistics.TeamHistoricalStatisticsRequest) (*historical_statistics.HistoricalStatisticsResponse, error)
	// LastFiveEncounters gRPC remote call returning LastFiveEncountersResponse
	LastFiveEncounters(context.Context, *historical_statistics.LastFiveEncountersRequest) (*historical_statistics.LastFiveEncountersResponse, error)
	// PostMapStatistics gRPC remote call returning PostMapStatisticsResponse
	PostMapStatistics(context.Context, *historical_statistics.PostMapStatisticsRequest) (*historical_statistics.PostMapStatisticsResponse, error)
	// TournamentStatistics gRPC remote call returning TournamentStatisticsResponse
	TournamentStatistics(context.Context, *historical_statistics.TournamentStatisticsRequest) (*historical_statistics.TournamentStatisticsResponse, error)
	// TeamTournamentStatistics gRPC remote call returning TeamTournamentStatisticsResponse
	TeamTournamentStatistics(context.Context, *historical_statistics.TeamTournamentStatisticsRequest) (*historical_statistics.TeamTournamentStatisticsResponse, error)
	// PlayerStatisticsAccordingRole gRPC remote call returning PlayerStatisticsAccordingRoleResponse
	PlayerStatisticsAccordingRole(context.Context, *historical_statistics.PlayerStatisticsAccordingRoleRequest) (*historical_statistics.PlayerStatisticsAccordingRoleResponse, error)
	// LiveDataFeed gRPC stream returning LiveDataFeedMessage one direction stream
	LiveDataFeed(*stream.LiveDataFeedRequest, Bragi_LiveDataFeedServer) error
	mustEmbedUnimplementedBragiServer()
}

// UnimplementedBragiServer must be embedded to have forward compatible implementations.
type UnimplementedBragiServer struct {
}

func (UnimplementedBragiServer) Sports(context.Context, *historical_statistics.SportsRequest) (*historical_statistics.SportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sports not implemented")
}
func (UnimplementedBragiServer) Tournaments(context.Context, *historical_statistics.TournamentsRequest) (*historical_statistics.TournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tournaments not implemented")
}
func (UnimplementedBragiServer) TournamentInfo(context.Context, *historical_statistics.TournamentInfoRequest) (*historical_statistics.TournamentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TournamentInfo not implemented")
}
func (UnimplementedBragiServer) TeamHistoricalStatistics(context.Context, *historical_statistics.TeamHistoricalStatisticsRequest) (*historical_statistics.HistoricalStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamHistoricalStatistics not implemented")
}
func (UnimplementedBragiServer) LastFiveEncounters(context.Context, *historical_statistics.LastFiveEncountersRequest) (*historical_statistics.LastFiveEncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastFiveEncounters not implemented")
}
func (UnimplementedBragiServer) PostMapStatistics(context.Context, *historical_statistics.PostMapStatisticsRequest) (*historical_statistics.PostMapStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMapStatistics not implemented")
}
func (UnimplementedBragiServer) TournamentStatistics(context.Context, *historical_statistics.TournamentStatisticsRequest) (*historical_statistics.TournamentStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TournamentStatistics not implemented")
}
func (UnimplementedBragiServer) TeamTournamentStatistics(context.Context, *historical_statistics.TeamTournamentStatisticsRequest) (*historical_statistics.TeamTournamentStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamTournamentStatistics not implemented")
}
func (UnimplementedBragiServer) PlayerStatisticsAccordingRole(context.Context, *historical_statistics.PlayerStatisticsAccordingRoleRequest) (*historical_statistics.PlayerStatisticsAccordingRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerStatisticsAccordingRole not implemented")
}
func (UnimplementedBragiServer) LiveDataFeed(*stream.LiveDataFeedRequest, Bragi_LiveDataFeedServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveDataFeed not implemented")
}
func (UnimplementedBragiServer) mustEmbedUnimplementedBragiServer() {}

// UnsafeBragiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BragiServer will
// result in compilation errors.
type UnsafeBragiServer interface {
	mustEmbedUnimplementedBragiServer()
}

func RegisterBragiServer(s grpc.ServiceRegistrar, srv BragiServer) {
	s.RegisterService(&Bragi_ServiceDesc, srv)
}

func _Bragi_Sports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.SportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).Sports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/Sports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).Sports(ctx, req.(*historical_statistics.SportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_Tournaments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.TournamentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).Tournaments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/Tournaments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).Tournaments(ctx, req.(*historical_statistics.TournamentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_TournamentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.TournamentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).TournamentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/TournamentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).TournamentInfo(ctx, req.(*historical_statistics.TournamentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_TeamHistoricalStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.TeamHistoricalStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).TeamHistoricalStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/TeamHistoricalStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).TeamHistoricalStatistics(ctx, req.(*historical_statistics.TeamHistoricalStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_LastFiveEncounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.LastFiveEncountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).LastFiveEncounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/LastFiveEncounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).LastFiveEncounters(ctx, req.(*historical_statistics.LastFiveEncountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_PostMapStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.PostMapStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).PostMapStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/PostMapStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).PostMapStatistics(ctx, req.(*historical_statistics.PostMapStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_TournamentStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.TournamentStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).TournamentStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/TournamentStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).TournamentStatistics(ctx, req.(*historical_statistics.TournamentStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_TeamTournamentStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.TeamTournamentStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).TeamTournamentStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/TeamTournamentStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).TeamTournamentStatistics(ctx, req.(*historical_statistics.TeamTournamentStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_PlayerStatisticsAccordingRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(historical_statistics.PlayerStatisticsAccordingRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).PlayerStatisticsAccordingRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.Bragi/PlayerStatisticsAccordingRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).PlayerStatisticsAccordingRole(ctx, req.(*historical_statistics.PlayerStatisticsAccordingRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_LiveDataFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(stream.LiveDataFeedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BragiServer).LiveDataFeed(m, &bragiLiveDataFeedServer{stream})
}

type Bragi_LiveDataFeedServer interface {
	Send(*stream.LiveDataFeedMessage) error
	grpc.ServerStream
}

type bragiLiveDataFeedServer struct {
	grpc.ServerStream
}

func (x *bragiLiveDataFeedServer) Send(m *stream.LiveDataFeedMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Bragi_ServiceDesc is the grpc.ServiceDesc for Bragi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bragi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bragi.Bragi",
	HandlerType: (*BragiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sports",
			Handler:    _Bragi_Sports_Handler,
		},
		{
			MethodName: "Tournaments",
			Handler:    _Bragi_Tournaments_Handler,
		},
		{
			MethodName: "TournamentInfo",
			Handler:    _Bragi_TournamentInfo_Handler,
		},
		{
			MethodName: "TeamHistoricalStatistics",
			Handler:    _Bragi_TeamHistoricalStatistics_Handler,
		},
		{
			MethodName: "LastFiveEncounters",
			Handler:    _Bragi_LastFiveEncounters_Handler,
		},
		{
			MethodName: "PostMapStatistics",
			Handler:    _Bragi_PostMapStatistics_Handler,
		},
		{
			MethodName: "TournamentStatistics",
			Handler:    _Bragi_TournamentStatistics_Handler,
		},
		{
			MethodName: "TeamTournamentStatistics",
			Handler:    _Bragi_TeamTournamentStatistics_Handler,
		},
		{
			MethodName: "PlayerStatisticsAccordingRole",
			Handler:    _Bragi_PlayerStatisticsAccordingRole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LiveDataFeed",
			Handler:       _Bragi_LiveDataFeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bragi/bragi_service.proto",
}
