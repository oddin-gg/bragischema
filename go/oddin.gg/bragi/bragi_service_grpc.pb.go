// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: bragi/bragi_service.proto

package bragi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bragi_MatchTimeline_FullMethodName     = "/bragi.Bragi/MatchTimeline"
	Bragi_MatchTimelineFeed_FullMethodName = "/bragi.Bragi/MatchTimelineFeed"
	Bragi_LiveDataFeed_FullMethodName      = "/bragi.Bragi/LiveDataFeed"
	Bragi_MatchEventsFeed_FullMethodName   = "/bragi.Bragi/MatchEventsFeed"
)

// BragiClient is the client API for Bragi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BragiClient interface {
	// Matches gRPC unary call returns all planned or currently played matches
	MatchTimeline(ctx context.Context, in *MatchTimelineRequest, opts ...grpc.CallOption) (*MatchTimelineResponse, error)
	// The MatchTimelineFeed gRPC stream call provides all upcoming or currently in-progress matches.
	// It also sends real-time updates when the status of a match changes.
	// To ensure you have the latest match timeline information, you must remain connected to this stream.
	// If the connection is lost, you need to reconnect to continue receiving up-to-date match data.
	MatchTimelineFeed(ctx context.Context, in *MatchTimelineFeedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatchTimelineFeedMessage], error)
	// LiveDataFeed gRPC stream returning LiveDataFeedMessage one direction stream
	LiveDataFeed(ctx context.Context, in *LiveDataFeedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LiveDataFeedMessage], error)
	// Sends all historical events for currently played matches, then only real-time updates
	MatchEventsFeed(ctx context.Context, in *MatchEventsFeedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatchEventsFeedMessage], error)
}

type bragiClient struct {
	cc grpc.ClientConnInterface
}

func NewBragiClient(cc grpc.ClientConnInterface) BragiClient {
	return &bragiClient{cc}
}

func (c *bragiClient) MatchTimeline(ctx context.Context, in *MatchTimelineRequest, opts ...grpc.CallOption) (*MatchTimelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchTimelineResponse)
	err := c.cc.Invoke(ctx, Bragi_MatchTimeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiClient) MatchTimelineFeed(ctx context.Context, in *MatchTimelineFeedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatchTimelineFeedMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Bragi_ServiceDesc.Streams[0], Bragi_MatchTimelineFeed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MatchTimelineFeedRequest, MatchTimelineFeedMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bragi_MatchTimelineFeedClient = grpc.ServerStreamingClient[MatchTimelineFeedMessage]

func (c *bragiClient) LiveDataFeed(ctx context.Context, in *LiveDataFeedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LiveDataFeedMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Bragi_ServiceDesc.Streams[1], Bragi_LiveDataFeed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LiveDataFeedRequest, LiveDataFeedMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bragi_LiveDataFeedClient = grpc.ServerStreamingClient[LiveDataFeedMessage]

func (c *bragiClient) MatchEventsFeed(ctx context.Context, in *MatchEventsFeedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatchEventsFeedMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Bragi_ServiceDesc.Streams[2], Bragi_MatchEventsFeed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MatchEventsFeedRequest, MatchEventsFeedMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bragi_MatchEventsFeedClient = grpc.ServerStreamingClient[MatchEventsFeedMessage]

// BragiServer is the server API for Bragi service.
// All implementations must embed UnimplementedBragiServer
// for forward compatibility.
type BragiServer interface {
	// Matches gRPC unary call returns all planned or currently played matches
	MatchTimeline(context.Context, *MatchTimelineRequest) (*MatchTimelineResponse, error)
	// The MatchTimelineFeed gRPC stream call provides all upcoming or currently in-progress matches.
	// It also sends real-time updates when the status of a match changes.
	// To ensure you have the latest match timeline information, you must remain connected to this stream.
	// If the connection is lost, you need to reconnect to continue receiving up-to-date match data.
	MatchTimelineFeed(*MatchTimelineFeedRequest, grpc.ServerStreamingServer[MatchTimelineFeedMessage]) error
	// LiveDataFeed gRPC stream returning LiveDataFeedMessage one direction stream
	LiveDataFeed(*LiveDataFeedRequest, grpc.ServerStreamingServer[LiveDataFeedMessage]) error
	// Sends all historical events for currently played matches, then only real-time updates
	MatchEventsFeed(*MatchEventsFeedRequest, grpc.ServerStreamingServer[MatchEventsFeedMessage]) error
	mustEmbedUnimplementedBragiServer()
}

// UnimplementedBragiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBragiServer struct{}

func (UnimplementedBragiServer) MatchTimeline(context.Context, *MatchTimelineRequest) (*MatchTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchTimeline not implemented")
}
func (UnimplementedBragiServer) MatchTimelineFeed(*MatchTimelineFeedRequest, grpc.ServerStreamingServer[MatchTimelineFeedMessage]) error {
	return status.Errorf(codes.Unimplemented, "method MatchTimelineFeed not implemented")
}
func (UnimplementedBragiServer) LiveDataFeed(*LiveDataFeedRequest, grpc.ServerStreamingServer[LiveDataFeedMessage]) error {
	return status.Errorf(codes.Unimplemented, "method LiveDataFeed not implemented")
}
func (UnimplementedBragiServer) MatchEventsFeed(*MatchEventsFeedRequest, grpc.ServerStreamingServer[MatchEventsFeedMessage]) error {
	return status.Errorf(codes.Unimplemented, "method MatchEventsFeed not implemented")
}
func (UnimplementedBragiServer) mustEmbedUnimplementedBragiServer() {}
func (UnimplementedBragiServer) testEmbeddedByValue()               {}

// UnsafeBragiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BragiServer will
// result in compilation errors.
type UnsafeBragiServer interface {
	mustEmbedUnimplementedBragiServer()
}

func RegisterBragiServer(s grpc.ServiceRegistrar, srv BragiServer) {
	// If the following call pancis, it indicates UnimplementedBragiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bragi_ServiceDesc, srv)
}

func _Bragi_MatchTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiServer).MatchTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bragi_MatchTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiServer).MatchTimeline(ctx, req.(*MatchTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bragi_MatchTimelineFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MatchTimelineFeedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BragiServer).MatchTimelineFeed(m, &grpc.GenericServerStream[MatchTimelineFeedRequest, MatchTimelineFeedMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bragi_MatchTimelineFeedServer = grpc.ServerStreamingServer[MatchTimelineFeedMessage]

func _Bragi_LiveDataFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveDataFeedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BragiServer).LiveDataFeed(m, &grpc.GenericServerStream[LiveDataFeedRequest, LiveDataFeedMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bragi_LiveDataFeedServer = grpc.ServerStreamingServer[LiveDataFeedMessage]

func _Bragi_MatchEventsFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MatchEventsFeedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BragiServer).MatchEventsFeed(m, &grpc.GenericServerStream[MatchEventsFeedRequest, MatchEventsFeedMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Bragi_MatchEventsFeedServer = grpc.ServerStreamingServer[MatchEventsFeedMessage]

// Bragi_ServiceDesc is the grpc.ServiceDesc for Bragi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bragi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bragi.Bragi",
	HandlerType: (*BragiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchTimeline",
			Handler:    _Bragi_MatchTimeline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MatchTimelineFeed",
			Handler:       _Bragi_MatchTimelineFeed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiveDataFeed",
			Handler:       _Bragi_LiveDataFeed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MatchEventsFeed",
			Handler:       _Bragi_MatchEventsFeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bragi/bragi_service.proto",
}
