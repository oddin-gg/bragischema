// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.1-0.20241121165744-79df5c4772f2
// source: bragi/bragi_service.proto

package bragi

import (
	timestamppb "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (this *MatchTimelineRequest) EqualVT(that *MatchTimelineRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchTimelineRequest) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchTimelineRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchTimelineResponse) EqualVT(that *MatchTimelineResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Matches) != len(that.Matches) {
		return false
	}
	for i, vx := range this.Matches {
		vy := that.Matches[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Match{}
			}
			if q == nil {
				q = &Match{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchTimelineResponse) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchTimelineResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchTimelineFeedRequest) EqualVT(that *MatchTimelineFeedRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchTimelineFeedRequest) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchTimelineFeedRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchTimelineFeedMessage) EqualVT(that *MatchTimelineFeedMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isMatchTimelineFeedMessage_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchTimelineFeedMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchTimelineFeedMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchTimelineFeedMessage_Keepalive) EqualVT(thatIface isMatchTimelineFeedMessage_Payload) bool {
	that, ok := thatIface.(*MatchTimelineFeedMessage_Keepalive)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Keepalive, that.Keepalive; p != q {
		if p == nil {
			p = &KeepAlive{}
		}
		if q == nil {
			q = &KeepAlive{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchTimelineFeedMessage_Timeline) EqualVT(thatIface isMatchTimelineFeedMessage_Payload) bool {
	that, ok := thatIface.(*MatchTimelineFeedMessage_Timeline)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Timeline, that.Timeline; p != q {
		if p == nil {
			p = &MatchTimeline{}
		}
		if q == nil {
			q = &MatchTimeline{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchTimelineFeedMessage_MatchUpdate) EqualVT(thatIface isMatchTimelineFeedMessage_Payload) bool {
	that, ok := thatIface.(*MatchTimelineFeedMessage_MatchUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchUpdate, that.MatchUpdate; p != q {
		if p == nil {
			p = &Match{}
		}
		if q == nil {
			q = &Match{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *LiveDataFeedRequest) EqualVT(that *LiveDataFeedRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb.Timestamp)(this.After).EqualVT((*timestamppb.Timestamp)(that.After)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *LiveDataFeedRequest) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*LiveDataFeedRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *LiveDataFeedMessage) EqualVT(that *LiveDataFeedMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Message == nil && that.Message != nil {
		return false
	} else if this.Message != nil {
		if that.Message == nil {
			return false
		}
		if !this.Message.(interface {
			EqualVT(isLiveDataFeedMessage_Message) bool
		}).EqualVT(that.Message) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *LiveDataFeedMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*LiveDataFeedMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *LiveDataFeedMessage_Keepalive) EqualVT(thatIface isLiveDataFeedMessage_Message) bool {
	that, ok := thatIface.(*LiveDataFeedMessage_Keepalive)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Keepalive, that.Keepalive; p != q {
		if p == nil {
			p = &KeepAlive{}
		}
		if q == nil {
			q = &KeepAlive{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *LiveDataFeedMessage_Match) EqualVT(thatIface isLiveDataFeedMessage_Message) bool {
	that, ok := thatIface.(*LiveDataFeedMessage_Match)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Match, that.Match; p != q {
		if p == nil {
			p = &MatchMessage{}
		}
		if q == nil {
			q = &MatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *KeepAlive) EqualVT(that *KeepAlive) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KeepAlive) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*KeepAlive)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchMessage) EqualVT(that *MatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Message == nil && that.Message != nil {
		return false
	} else if this.Message != nil {
		if that.Message == nil {
			return false
		}
		if !this.Message.(interface {
			EqualVT(isMatchMessage_Message) bool
		}).EqualVT(that.Message) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchMessage_Announcement) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Announcement)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Announcement, that.Announcement; p != q {
		if p == nil {
			p = &AnnouncementUpdate{}
		}
		if q == nil {
			q = &AnnouncementUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Cs2) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Cs2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2, that.Cs2; p != q {
		if p == nil {
			p = &CS2MatchMessage{}
		}
		if q == nil {
			q = &CS2MatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Cs2Duels) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Cs2Duels)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2Duels, that.Cs2Duels; p != q {
		if p == nil {
			p = &CS2MatchMessage{}
		}
		if q == nil {
			q = &CS2MatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Dota2) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Dota2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Dota2, that.Dota2; p != q {
		if p == nil {
			p = &Dota2MatchMessage{}
		}
		if q == nil {
			q = &Dota2MatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_RushSoccer) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_RushSoccer)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushSoccer, that.RushSoccer; p != q {
		if p == nil {
			p = &RushSoccerMatchMessage{}
		}
		if q == nil {
			q = &RushSoccerMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Lol) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Lol)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Lol, that.Lol; p != q {
		if p == nil {
			p = &LolMatchMessage{}
		}
		if q == nil {
			q = &LolMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_RushBasketball) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_RushBasketball)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushBasketball, that.RushBasketball; p != q {
		if p == nil {
			p = &RushBasketballMatchMessage{}
		}
		if q == nil {
			q = &RushBasketballMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Valorant) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Valorant)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Valorant, that.Valorant; p != q {
		if p == nil {
			p = &ValorantMatchMessage{}
		}
		if q == nil {
			q = &ValorantMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot) EqualVT(that *MatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Snapshot == nil && that.Snapshot != nil {
		return false
	} else if this.Snapshot != nil {
		if that.Snapshot == nil {
			return false
		}
		if !this.Snapshot.(interface {
			EqualVT(isMatchSnapshot_Snapshot) bool
		}).EqualVT(that.Snapshot) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchSnapshot_Cs2) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Cs2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2, that.Cs2; p != q {
		if p == nil {
			p = &CS2MatchSnapshot{}
		}
		if q == nil {
			q = &CS2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_Cs2Duels) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Cs2Duels)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2Duels, that.Cs2Duels; p != q {
		if p == nil {
			p = &CS2MatchSnapshot{}
		}
		if q == nil {
			q = &CS2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_Dota2) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Dota2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Dota2, that.Dota2; p != q {
		if p == nil {
			p = &Dota2MatchSnapshot{}
		}
		if q == nil {
			q = &Dota2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_RushSoccer) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_RushSoccer)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushSoccer, that.RushSoccer; p != q {
		if p == nil {
			p = &RushSoccerMatchSnapshot{}
		}
		if q == nil {
			q = &RushSoccerMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_Lol) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Lol)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Lol, that.Lol; p != q {
		if p == nil {
			p = &LolMatchSnapshot{}
		}
		if q == nil {
			q = &LolMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_RushBasketball) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_RushBasketball)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushBasketball, that.RushBasketball; p != q {
		if p == nil {
			p = &RushBasketballMatchSnapshot{}
		}
		if q == nil {
			q = &RushBasketballMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_Valorant) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Valorant)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Valorant, that.Valorant; p != q {
		if p == nil {
			p = &ValorantMatchSnapshot{}
		}
		if q == nil {
			q = &ValorantMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState) EqualVT(that *MatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.State == nil && that.State != nil {
		return false
	} else if this.State != nil {
		if that.State == nil {
			return false
		}
		if !this.State.(interface{ EqualVT(isMatchState_State) bool }).EqualVT(that.State) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchState_Cs2) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Cs2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2, that.Cs2; p != q {
		if p == nil {
			p = &CS2MatchState{}
		}
		if q == nil {
			q = &CS2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_Cs2Duels) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Cs2Duels)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2Duels, that.Cs2Duels; p != q {
		if p == nil {
			p = &CS2MatchState{}
		}
		if q == nil {
			q = &CS2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_Dota2) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Dota2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Dota2, that.Dota2; p != q {
		if p == nil {
			p = &Dota2MatchState{}
		}
		if q == nil {
			q = &Dota2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_RushSoccer) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_RushSoccer)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushSoccer, that.RushSoccer; p != q {
		if p == nil {
			p = &RushSoccerMatchState{}
		}
		if q == nil {
			q = &RushSoccerMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_Lol) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Lol)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Lol, that.Lol; p != q {
		if p == nil {
			p = &LolMatchState{}
		}
		if q == nil {
			q = &LolMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_RushBasketball) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_RushBasketball)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushBasketball, that.RushBasketball; p != q {
		if p == nil {
			p = &RushBasketballMatchState{}
		}
		if q == nil {
			q = &RushBasketballMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_Valorant) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Valorant)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Valorant, that.Valorant; p != q {
		if p == nil {
			p = &ValorantMatchState{}
		}
		if q == nil {
			q = &ValorantMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}
