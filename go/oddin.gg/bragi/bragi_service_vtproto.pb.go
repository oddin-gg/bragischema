// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.1-0.20241121165744-79df5c4772f2
// source: bragi/bragi_service.proto

package bragi

import (
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *MatchEventsFeedRequest) CloneVT() *MatchEventsFeedRequest {
	if m == nil {
		return (*MatchEventsFeedRequest)(nil)
	}
	r := new(MatchEventsFeedRequest)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchEventsFeedRequest) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchEventsFeedMessage) CloneVT() *MatchEventsFeedMessage {
	if m == nil {
		return (*MatchEventsFeedMessage)(nil)
	}
	r := new(MatchEventsFeedMessage)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isMatchEventsFeedMessage_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchEventsFeedMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchEventsFeedMessage_Cs2) CloneVT() isMatchEventsFeedMessage_Payload {
	if m == nil {
		return (*MatchEventsFeedMessage_Cs2)(nil)
	}
	r := new(MatchEventsFeedMessage_Cs2)
	r.Cs2 = m.Cs2.CloneVT()
	return r
}

func (m *MatchTimelineRequest) CloneVT() *MatchTimelineRequest {
	if m == nil {
		return (*MatchTimelineRequest)(nil)
	}
	r := new(MatchTimelineRequest)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchTimelineRequest) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchTimelineResponse) CloneVT() *MatchTimelineResponse {
	if m == nil {
		return (*MatchTimelineResponse)(nil)
	}
	r := new(MatchTimelineResponse)
	if rhs := m.Matches; rhs != nil {
		tmpContainer := make([]*Match, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Matches = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchTimelineResponse) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchTimelineFeedRequest) CloneVT() *MatchTimelineFeedRequest {
	if m == nil {
		return (*MatchTimelineFeedRequest)(nil)
	}
	r := new(MatchTimelineFeedRequest)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchTimelineFeedRequest) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchTimelineFeedMessage) CloneVT() *MatchTimelineFeedMessage {
	if m == nil {
		return (*MatchTimelineFeedMessage)(nil)
	}
	r := new(MatchTimelineFeedMessage)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isMatchTimelineFeedMessage_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchTimelineFeedMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchTimelineFeedMessage_Keepalive) CloneVT() isMatchTimelineFeedMessage_Payload {
	if m == nil {
		return (*MatchTimelineFeedMessage_Keepalive)(nil)
	}
	r := new(MatchTimelineFeedMessage_Keepalive)
	r.Keepalive = m.Keepalive.CloneVT()
	return r
}

func (m *MatchTimelineFeedMessage_Timeline) CloneVT() isMatchTimelineFeedMessage_Payload {
	if m == nil {
		return (*MatchTimelineFeedMessage_Timeline)(nil)
	}
	r := new(MatchTimelineFeedMessage_Timeline)
	r.Timeline = m.Timeline.CloneVT()
	return r
}

func (m *MatchTimelineFeedMessage_MatchUpdate) CloneVT() isMatchTimelineFeedMessage_Payload {
	if m == nil {
		return (*MatchTimelineFeedMessage_MatchUpdate)(nil)
	}
	r := new(MatchTimelineFeedMessage_MatchUpdate)
	r.MatchUpdate = m.MatchUpdate.CloneVT()
	return r
}

func (m *LiveDataFeedRequest) CloneVT() *LiveDataFeedRequest {
	if m == nil {
		return (*LiveDataFeedRequest)(nil)
	}
	r := new(LiveDataFeedRequest)
	r.After = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.After).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *LiveDataFeedRequest) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *LiveDataFeedMessage) CloneVT() *LiveDataFeedMessage {
	if m == nil {
		return (*LiveDataFeedMessage)(nil)
	}
	r := new(LiveDataFeedMessage)
	if m.Message != nil {
		r.Message = m.Message.(interface {
			CloneVT() isLiveDataFeedMessage_Message
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *LiveDataFeedMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *LiveDataFeedMessage_Keepalive) CloneVT() isLiveDataFeedMessage_Message {
	if m == nil {
		return (*LiveDataFeedMessage_Keepalive)(nil)
	}
	r := new(LiveDataFeedMessage_Keepalive)
	r.Keepalive = m.Keepalive.CloneVT()
	return r
}

func (m *LiveDataFeedMessage_Match) CloneVT() isLiveDataFeedMessage_Message {
	if m == nil {
		return (*LiveDataFeedMessage_Match)(nil)
	}
	r := new(LiveDataFeedMessage_Match)
	r.Match = m.Match.CloneVT()
	return r
}

func (m *KeepAlive) CloneVT() *KeepAlive {
	if m == nil {
		return (*KeepAlive)(nil)
	}
	r := new(KeepAlive)
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *KeepAlive) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchMessage) CloneVT() *MatchMessage {
	if m == nil {
		return (*MatchMessage)(nil)
	}
	r := new(MatchMessage)
	if m.Message != nil {
		r.Message = m.Message.(interface{ CloneVT() isMatchMessage_Message }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchMessage_Announcement) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_Announcement)(nil)
	}
	r := new(MatchMessage_Announcement)
	r.Announcement = m.Announcement.CloneVT()
	return r
}

func (m *MatchMessage_Cs2) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_Cs2)(nil)
	}
	r := new(MatchMessage_Cs2)
	r.Cs2 = m.Cs2.CloneVT()
	return r
}

func (m *MatchMessage_Cs2Duels) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_Cs2Duels)(nil)
	}
	r := new(MatchMessage_Cs2Duels)
	r.Cs2Duels = m.Cs2Duels.CloneVT()
	return r
}

func (m *MatchMessage_Dota2) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_Dota2)(nil)
	}
	r := new(MatchMessage_Dota2)
	r.Dota2 = m.Dota2.CloneVT()
	return r
}

func (m *MatchMessage_RushSoccer) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_RushSoccer)(nil)
	}
	r := new(MatchMessage_RushSoccer)
	r.RushSoccer = m.RushSoccer.CloneVT()
	return r
}

func (m *MatchMessage_Lol) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_Lol)(nil)
	}
	r := new(MatchMessage_Lol)
	r.Lol = m.Lol.CloneVT()
	return r
}

func (m *MatchMessage_RushBasketball) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_RushBasketball)(nil)
	}
	r := new(MatchMessage_RushBasketball)
	r.RushBasketball = m.RushBasketball.CloneVT()
	return r
}

func (m *MatchMessage_Valorant) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_Valorant)(nil)
	}
	r := new(MatchMessage_Valorant)
	r.Valorant = m.Valorant.CloneVT()
	return r
}

func (m *MatchMessage_RushCricket) CloneVT() isMatchMessage_Message {
	if m == nil {
		return (*MatchMessage_RushCricket)(nil)
	}
	r := new(MatchMessage_RushCricket)
	r.RushCricket = m.RushCricket.CloneVT()
	return r
}

func (m *MatchSnapshot) CloneVT() *MatchSnapshot {
	if m == nil {
		return (*MatchSnapshot)(nil)
	}
	r := new(MatchSnapshot)
	if m.Snapshot != nil {
		r.Snapshot = m.Snapshot.(interface {
			CloneVT() isMatchSnapshot_Snapshot
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchSnapshot) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchSnapshot_Cs2) CloneVT() isMatchSnapshot_Snapshot {
	if m == nil {
		return (*MatchSnapshot_Cs2)(nil)
	}
	r := new(MatchSnapshot_Cs2)
	r.Cs2 = m.Cs2.CloneVT()
	return r
}

func (m *MatchSnapshot_Cs2Duels) CloneVT() isMatchSnapshot_Snapshot {
	if m == nil {
		return (*MatchSnapshot_Cs2Duels)(nil)
	}
	r := new(MatchSnapshot_Cs2Duels)
	r.Cs2Duels = m.Cs2Duels.CloneVT()
	return r
}

func (m *MatchSnapshot_Dota2) CloneVT() isMatchSnapshot_Snapshot {
	if m == nil {
		return (*MatchSnapshot_Dota2)(nil)
	}
	r := new(MatchSnapshot_Dota2)
	r.Dota2 = m.Dota2.CloneVT()
	return r
}

func (m *MatchSnapshot_RushSoccer) CloneVT() isMatchSnapshot_Snapshot {
	if m == nil {
		return (*MatchSnapshot_RushSoccer)(nil)
	}
	r := new(MatchSnapshot_RushSoccer)
	r.RushSoccer = m.RushSoccer.CloneVT()
	return r
}

func (m *MatchSnapshot_Lol) CloneVT() isMatchSnapshot_Snapshot {
	if m == nil {
		return (*MatchSnapshot_Lol)(nil)
	}
	r := new(MatchSnapshot_Lol)
	r.Lol = m.Lol.CloneVT()
	return r
}

func (m *MatchSnapshot_RushBasketball) CloneVT() isMatchSnapshot_Snapshot {
	if m == nil {
		return (*MatchSnapshot_RushBasketball)(nil)
	}
	r := new(MatchSnapshot_RushBasketball)
	r.RushBasketball = m.RushBasketball.CloneVT()
	return r
}

func (m *MatchSnapshot_Valorant) CloneVT() isMatchSnapshot_Snapshot {
	if m == nil {
		return (*MatchSnapshot_Valorant)(nil)
	}
	r := new(MatchSnapshot_Valorant)
	r.Valorant = m.Valorant.CloneVT()
	return r
}

func (m *MatchSnapshot_RushCricket) CloneVT() isMatchSnapshot_Snapshot {
	if m == nil {
		return (*MatchSnapshot_RushCricket)(nil)
	}
	r := new(MatchSnapshot_RushCricket)
	r.RushCricket = m.RushCricket.CloneVT()
	return r
}

func (m *MatchState) CloneVT() *MatchState {
	if m == nil {
		return (*MatchState)(nil)
	}
	r := new(MatchState)
	if m.State != nil {
		r.State = m.State.(interface{ CloneVT() isMatchState_State }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MatchState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *MatchState_Cs2) CloneVT() isMatchState_State {
	if m == nil {
		return (*MatchState_Cs2)(nil)
	}
	r := new(MatchState_Cs2)
	r.Cs2 = m.Cs2.CloneVT()
	return r
}

func (m *MatchState_Cs2Duels) CloneVT() isMatchState_State {
	if m == nil {
		return (*MatchState_Cs2Duels)(nil)
	}
	r := new(MatchState_Cs2Duels)
	r.Cs2Duels = m.Cs2Duels.CloneVT()
	return r
}

func (m *MatchState_Dota2) CloneVT() isMatchState_State {
	if m == nil {
		return (*MatchState_Dota2)(nil)
	}
	r := new(MatchState_Dota2)
	r.Dota2 = m.Dota2.CloneVT()
	return r
}

func (m *MatchState_RushSoccer) CloneVT() isMatchState_State {
	if m == nil {
		return (*MatchState_RushSoccer)(nil)
	}
	r := new(MatchState_RushSoccer)
	r.RushSoccer = m.RushSoccer.CloneVT()
	return r
}

func (m *MatchState_Lol) CloneVT() isMatchState_State {
	if m == nil {
		return (*MatchState_Lol)(nil)
	}
	r := new(MatchState_Lol)
	r.Lol = m.Lol.CloneVT()
	return r
}

func (m *MatchState_RushBasketball) CloneVT() isMatchState_State {
	if m == nil {
		return (*MatchState_RushBasketball)(nil)
	}
	r := new(MatchState_RushBasketball)
	r.RushBasketball = m.RushBasketball.CloneVT()
	return r
}

func (m *MatchState_Valorant) CloneVT() isMatchState_State {
	if m == nil {
		return (*MatchState_Valorant)(nil)
	}
	r := new(MatchState_Valorant)
	r.Valorant = m.Valorant.CloneVT()
	return r
}

func (m *MatchState_RushCricket) CloneVT() isMatchState_State {
	if m == nil {
		return (*MatchState_RushCricket)(nil)
	}
	r := new(MatchState_RushCricket)
	r.RushCricket = m.RushCricket.CloneVT()
	return r
}

func (this *MatchEventsFeedRequest) EqualVT(that *MatchEventsFeedRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchEventsFeedRequest) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchEventsFeedRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchEventsFeedMessage) EqualVT(that *MatchEventsFeedMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isMatchEventsFeedMessage_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchEventsFeedMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchEventsFeedMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchEventsFeedMessage_Cs2) EqualVT(thatIface isMatchEventsFeedMessage_Payload) bool {
	that, ok := thatIface.(*MatchEventsFeedMessage_Cs2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2, that.Cs2; p != q {
		if p == nil {
			p = &CS2MatchEvents{}
		}
		if q == nil {
			q = &CS2MatchEvents{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchTimelineRequest) EqualVT(that *MatchTimelineRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchTimelineRequest) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchTimelineRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchTimelineResponse) EqualVT(that *MatchTimelineResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Matches) != len(that.Matches) {
		return false
	}
	for i, vx := range this.Matches {
		vy := that.Matches[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Match{}
			}
			if q == nil {
				q = &Match{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchTimelineResponse) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchTimelineResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchTimelineFeedRequest) EqualVT(that *MatchTimelineFeedRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchTimelineFeedRequest) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchTimelineFeedRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchTimelineFeedMessage) EqualVT(that *MatchTimelineFeedMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isMatchTimelineFeedMessage_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchTimelineFeedMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchTimelineFeedMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchTimelineFeedMessage_Keepalive) EqualVT(thatIface isMatchTimelineFeedMessage_Payload) bool {
	that, ok := thatIface.(*MatchTimelineFeedMessage_Keepalive)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Keepalive, that.Keepalive; p != q {
		if p == nil {
			p = &KeepAlive{}
		}
		if q == nil {
			q = &KeepAlive{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchTimelineFeedMessage_Timeline) EqualVT(thatIface isMatchTimelineFeedMessage_Payload) bool {
	that, ok := thatIface.(*MatchTimelineFeedMessage_Timeline)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Timeline, that.Timeline; p != q {
		if p == nil {
			p = &MatchTimeline{}
		}
		if q == nil {
			q = &MatchTimeline{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchTimelineFeedMessage_MatchUpdate) EqualVT(thatIface isMatchTimelineFeedMessage_Payload) bool {
	that, ok := thatIface.(*MatchTimelineFeedMessage_MatchUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchUpdate, that.MatchUpdate; p != q {
		if p == nil {
			p = &Match{}
		}
		if q == nil {
			q = &Match{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *LiveDataFeedRequest) EqualVT(that *LiveDataFeedRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.After).EqualVT((*timestamppb1.Timestamp)(that.After)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *LiveDataFeedRequest) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*LiveDataFeedRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *LiveDataFeedMessage) EqualVT(that *LiveDataFeedMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Message == nil && that.Message != nil {
		return false
	} else if this.Message != nil {
		if that.Message == nil {
			return false
		}
		if !this.Message.(interface {
			EqualVT(isLiveDataFeedMessage_Message) bool
		}).EqualVT(that.Message) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *LiveDataFeedMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*LiveDataFeedMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *LiveDataFeedMessage_Keepalive) EqualVT(thatIface isLiveDataFeedMessage_Message) bool {
	that, ok := thatIface.(*LiveDataFeedMessage_Keepalive)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Keepalive, that.Keepalive; p != q {
		if p == nil {
			p = &KeepAlive{}
		}
		if q == nil {
			q = &KeepAlive{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *LiveDataFeedMessage_Match) EqualVT(thatIface isLiveDataFeedMessage_Message) bool {
	that, ok := thatIface.(*LiveDataFeedMessage_Match)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Match, that.Match; p != q {
		if p == nil {
			p = &MatchMessage{}
		}
		if q == nil {
			q = &MatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *KeepAlive) EqualVT(that *KeepAlive) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KeepAlive) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*KeepAlive)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchMessage) EqualVT(that *MatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Message == nil && that.Message != nil {
		return false
	} else if this.Message != nil {
		if that.Message == nil {
			return false
		}
		if !this.Message.(interface {
			EqualVT(isMatchMessage_Message) bool
		}).EqualVT(that.Message) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchMessage_Announcement) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Announcement)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Announcement, that.Announcement; p != q {
		if p == nil {
			p = &AnnouncementUpdate{}
		}
		if q == nil {
			q = &AnnouncementUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Cs2) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Cs2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2, that.Cs2; p != q {
		if p == nil {
			p = &CS2MatchMessage{}
		}
		if q == nil {
			q = &CS2MatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Cs2Duels) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Cs2Duels)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2Duels, that.Cs2Duels; p != q {
		if p == nil {
			p = &CS2MatchMessage{}
		}
		if q == nil {
			q = &CS2MatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Dota2) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Dota2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Dota2, that.Dota2; p != q {
		if p == nil {
			p = &Dota2MatchMessage{}
		}
		if q == nil {
			q = &Dota2MatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_RushSoccer) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_RushSoccer)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushSoccer, that.RushSoccer; p != q {
		if p == nil {
			p = &RushSoccerMatchMessage{}
		}
		if q == nil {
			q = &RushSoccerMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Lol) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Lol)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Lol, that.Lol; p != q {
		if p == nil {
			p = &LolMatchMessage{}
		}
		if q == nil {
			q = &LolMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_RushBasketball) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_RushBasketball)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushBasketball, that.RushBasketball; p != q {
		if p == nil {
			p = &RushBasketballMatchMessage{}
		}
		if q == nil {
			q = &RushBasketballMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_Valorant) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_Valorant)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Valorant, that.Valorant; p != q {
		if p == nil {
			p = &ValorantMatchMessage{}
		}
		if q == nil {
			q = &ValorantMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchMessage_RushCricket) EqualVT(thatIface isMatchMessage_Message) bool {
	that, ok := thatIface.(*MatchMessage_RushCricket)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushCricket, that.RushCricket; p != q {
		if p == nil {
			p = &RushCricketMatchMessage{}
		}
		if q == nil {
			q = &RushCricketMatchMessage{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot) EqualVT(that *MatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Snapshot == nil && that.Snapshot != nil {
		return false
	} else if this.Snapshot != nil {
		if that.Snapshot == nil {
			return false
		}
		if !this.Snapshot.(interface {
			EqualVT(isMatchSnapshot_Snapshot) bool
		}).EqualVT(that.Snapshot) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchSnapshot_Cs2) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Cs2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2, that.Cs2; p != q {
		if p == nil {
			p = &CS2MatchSnapshot{}
		}
		if q == nil {
			q = &CS2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_Cs2Duels) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Cs2Duels)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2Duels, that.Cs2Duels; p != q {
		if p == nil {
			p = &CS2MatchSnapshot{}
		}
		if q == nil {
			q = &CS2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_Dota2) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Dota2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Dota2, that.Dota2; p != q {
		if p == nil {
			p = &Dota2MatchSnapshot{}
		}
		if q == nil {
			q = &Dota2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_RushSoccer) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_RushSoccer)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushSoccer, that.RushSoccer; p != q {
		if p == nil {
			p = &RushSoccerMatchSnapshot{}
		}
		if q == nil {
			q = &RushSoccerMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_Lol) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Lol)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Lol, that.Lol; p != q {
		if p == nil {
			p = &LolMatchSnapshot{}
		}
		if q == nil {
			q = &LolMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_RushBasketball) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_RushBasketball)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushBasketball, that.RushBasketball; p != q {
		if p == nil {
			p = &RushBasketballMatchSnapshot{}
		}
		if q == nil {
			q = &RushBasketballMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_Valorant) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_Valorant)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Valorant, that.Valorant; p != q {
		if p == nil {
			p = &ValorantMatchSnapshot{}
		}
		if q == nil {
			q = &ValorantMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchSnapshot_RushCricket) EqualVT(thatIface isMatchSnapshot_Snapshot) bool {
	that, ok := thatIface.(*MatchSnapshot_RushCricket)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushCricket, that.RushCricket; p != q {
		if p == nil {
			p = &RushCricketMatchSnapshot{}
		}
		if q == nil {
			q = &RushCricketMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState) EqualVT(that *MatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.State == nil && that.State != nil {
		return false
	} else if this.State != nil {
		if that.State == nil {
			return false
		}
		if !this.State.(interface{ EqualVT(isMatchState_State) bool }).EqualVT(that.State) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*MatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MatchState_Cs2) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Cs2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2, that.Cs2; p != q {
		if p == nil {
			p = &CS2MatchState{}
		}
		if q == nil {
			q = &CS2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_Cs2Duels) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Cs2Duels)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Cs2Duels, that.Cs2Duels; p != q {
		if p == nil {
			p = &CS2MatchState{}
		}
		if q == nil {
			q = &CS2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_Dota2) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Dota2)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Dota2, that.Dota2; p != q {
		if p == nil {
			p = &Dota2MatchState{}
		}
		if q == nil {
			q = &Dota2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_RushSoccer) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_RushSoccer)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushSoccer, that.RushSoccer; p != q {
		if p == nil {
			p = &RushSoccerMatchState{}
		}
		if q == nil {
			q = &RushSoccerMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_Lol) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Lol)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Lol, that.Lol; p != q {
		if p == nil {
			p = &LolMatchState{}
		}
		if q == nil {
			q = &LolMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_RushBasketball) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_RushBasketball)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushBasketball, that.RushBasketball; p != q {
		if p == nil {
			p = &RushBasketballMatchState{}
		}
		if q == nil {
			q = &RushBasketballMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_Valorant) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_Valorant)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Valorant, that.Valorant; p != q {
		if p == nil {
			p = &ValorantMatchState{}
		}
		if q == nil {
			q = &ValorantMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *MatchState_RushCricket) EqualVT(thatIface isMatchState_State) bool {
	that, ok := thatIface.(*MatchState_RushCricket)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RushCricket, that.RushCricket; p != q {
		if p == nil {
			p = &RushCricketMatchState{}
		}
		if q == nil {
			q = &RushCricketMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}
