// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.3
// source: bragi/cs2.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CS2Side int32

const (
	CS2Side_CS2_SIDE_UNSPECIFIED        CS2Side = 0
	CS2Side_CS2_SIDE_COUNTER_TERRORISTS CS2Side = 1
	CS2Side_CS2_SIDE_TERRORISTS         CS2Side = 2
)

// Enum value maps for CS2Side.
var (
	CS2Side_name = map[int32]string{
		0: "CS2_SIDE_UNSPECIFIED",
		1: "CS2_SIDE_COUNTER_TERRORISTS",
		2: "CS2_SIDE_TERRORISTS",
	}
	CS2Side_value = map[string]int32{
		"CS2_SIDE_UNSPECIFIED":        0,
		"CS2_SIDE_COUNTER_TERRORISTS": 1,
		"CS2_SIDE_TERRORISTS":         2,
	}
)

func (x CS2Side) Enum() *CS2Side {
	p := new(CS2Side)
	*p = x
	return p
}

func (x CS2Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CS2Side) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_cs2_proto_enumTypes[0].Descriptor()
}

func (CS2Side) Type() protoreflect.EnumType {
	return &file_bragi_cs2_proto_enumTypes[0]
}

func (x CS2Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CS2Side.Descriptor instead.
func (CS2Side) EnumDescriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{0}
}

type CS2WinReason int32

const (
	CS2WinReason_CS2_WIN_REASON_UNSPECIFIED                   CS2WinReason = 0
	CS2WinReason_CS2_WIN_REASON_COUNTER_TERRORISTS_ELIMINATED CS2WinReason = 1
	CS2WinReason_CS2_WIN_REASON_TERRORISTS_ELIMINATED         CS2WinReason = 2
	CS2WinReason_CS2_WIN_REASON_EXPLOSION                     CS2WinReason = 3
	CS2WinReason_CS2_WIN_REASON_DEFUSE                        CS2WinReason = 4
	CS2WinReason_CS2_WIN_REASON_TIMEOUT                       CS2WinReason = 5
	CS2WinReason_CS2_WIN_REASON_TARGET_SAVED                  CS2WinReason = 6
)

// Enum value maps for CS2WinReason.
var (
	CS2WinReason_name = map[int32]string{
		0: "CS2_WIN_REASON_UNSPECIFIED",
		1: "CS2_WIN_REASON_COUNTER_TERRORISTS_ELIMINATED",
		2: "CS2_WIN_REASON_TERRORISTS_ELIMINATED",
		3: "CS2_WIN_REASON_EXPLOSION",
		4: "CS2_WIN_REASON_DEFUSE",
		5: "CS2_WIN_REASON_TIMEOUT",
		6: "CS2_WIN_REASON_TARGET_SAVED",
	}
	CS2WinReason_value = map[string]int32{
		"CS2_WIN_REASON_UNSPECIFIED":                   0,
		"CS2_WIN_REASON_COUNTER_TERRORISTS_ELIMINATED": 1,
		"CS2_WIN_REASON_TERRORISTS_ELIMINATED":         2,
		"CS2_WIN_REASON_EXPLOSION":                     3,
		"CS2_WIN_REASON_DEFUSE":                        4,
		"CS2_WIN_REASON_TIMEOUT":                       5,
		"CS2_WIN_REASON_TARGET_SAVED":                  6,
	}
)

func (x CS2WinReason) Enum() *CS2WinReason {
	p := new(CS2WinReason)
	*p = x
	return p
}

func (x CS2WinReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CS2WinReason) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_cs2_proto_enumTypes[1].Descriptor()
}

func (CS2WinReason) Type() protoreflect.EnumType {
	return &file_bragi_cs2_proto_enumTypes[1]
}

func (x CS2WinReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CS2WinReason.Descriptor instead.
func (CS2WinReason) EnumDescriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{1}
}

type CS2RoundStateType int32

const (
	CS2RoundStateType_CS2_ROUND_STATE_TYPE_UNSPECIFIED CS2RoundStateType = 0
	CS2RoundStateType_CS2_ROUND_STATE_TYPE_BUY_TIME    CS2RoundStateType = 1
	CS2RoundStateType_CS2_ROUND_STATE_TYPE_IN_PROGRESS CS2RoundStateType = 2
	CS2RoundStateType_CS2_ROUND_STATE_TYPE_PAUSED      CS2RoundStateType = 3
	CS2RoundStateType_CS2_ROUND_STATE_TYPE_FINISHED    CS2RoundStateType = 4
)

// Enum value maps for CS2RoundStateType.
var (
	CS2RoundStateType_name = map[int32]string{
		0: "CS2_ROUND_STATE_TYPE_UNSPECIFIED",
		1: "CS2_ROUND_STATE_TYPE_BUY_TIME",
		2: "CS2_ROUND_STATE_TYPE_IN_PROGRESS",
		3: "CS2_ROUND_STATE_TYPE_PAUSED",
		4: "CS2_ROUND_STATE_TYPE_FINISHED",
	}
	CS2RoundStateType_value = map[string]int32{
		"CS2_ROUND_STATE_TYPE_UNSPECIFIED": 0,
		"CS2_ROUND_STATE_TYPE_BUY_TIME":    1,
		"CS2_ROUND_STATE_TYPE_IN_PROGRESS": 2,
		"CS2_ROUND_STATE_TYPE_PAUSED":      3,
		"CS2_ROUND_STATE_TYPE_FINISHED":    4,
	}
)

func (x CS2RoundStateType) Enum() *CS2RoundStateType {
	p := new(CS2RoundStateType)
	*p = x
	return p
}

func (x CS2RoundStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CS2RoundStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_cs2_proto_enumTypes[2].Descriptor()
}

func (CS2RoundStateType) Type() protoreflect.EnumType {
	return &file_bragi_cs2_proto_enumTypes[2]
}

func (x CS2RoundStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CS2RoundStateType.Descriptor instead.
func (CS2RoundStateType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Do not use.
type CS2WeaponType int32

const (
	CS2WeaponType_CS2_WEAPON_TYPE_UNSPECIFIED    CS2WeaponType = 0
	CS2WeaponType_CS2_WEAPON_TYPE_PISTOL         CS2WeaponType = 1
	CS2WeaponType_CS2_WEAPON_TYPE_BOMB           CS2WeaponType = 2
	CS2WeaponType_CS2_WEAPON_TYPE_GRENADE        CS2WeaponType = 3
	CS2WeaponType_CS2_WEAPON_TYPE_MACHINE_GUN    CS2WeaponType = 4
	CS2WeaponType_CS2_WEAPON_TYPE_RIFLE          CS2WeaponType = 5
	CS2WeaponType_CS2_WEAPON_TYPE_SHOTGUN        CS2WeaponType = 6
	CS2WeaponType_CS2_WEAPON_TYPE_SNIPER_RIFLE   CS2WeaponType = 7
	CS2WeaponType_CS2_WEAPON_TYPE_SUBMACHINE_GUN CS2WeaponType = 8
	CS2WeaponType_CS2_WEAPON_TYPE_KNIFE          CS2WeaponType = 9
	CS2WeaponType_CS2_WEAPON_TYPE_DEFUSE_KIT     CS2WeaponType = 10
)

// Enum value maps for CS2WeaponType.
var (
	CS2WeaponType_name = map[int32]string{
		0:  "CS2_WEAPON_TYPE_UNSPECIFIED",
		1:  "CS2_WEAPON_TYPE_PISTOL",
		2:  "CS2_WEAPON_TYPE_BOMB",
		3:  "CS2_WEAPON_TYPE_GRENADE",
		4:  "CS2_WEAPON_TYPE_MACHINE_GUN",
		5:  "CS2_WEAPON_TYPE_RIFLE",
		6:  "CS2_WEAPON_TYPE_SHOTGUN",
		7:  "CS2_WEAPON_TYPE_SNIPER_RIFLE",
		8:  "CS2_WEAPON_TYPE_SUBMACHINE_GUN",
		9:  "CS2_WEAPON_TYPE_KNIFE",
		10: "CS2_WEAPON_TYPE_DEFUSE_KIT",
	}
	CS2WeaponType_value = map[string]int32{
		"CS2_WEAPON_TYPE_UNSPECIFIED":    0,
		"CS2_WEAPON_TYPE_PISTOL":         1,
		"CS2_WEAPON_TYPE_BOMB":           2,
		"CS2_WEAPON_TYPE_GRENADE":        3,
		"CS2_WEAPON_TYPE_MACHINE_GUN":    4,
		"CS2_WEAPON_TYPE_RIFLE":          5,
		"CS2_WEAPON_TYPE_SHOTGUN":        6,
		"CS2_WEAPON_TYPE_SNIPER_RIFLE":   7,
		"CS2_WEAPON_TYPE_SUBMACHINE_GUN": 8,
		"CS2_WEAPON_TYPE_KNIFE":          9,
		"CS2_WEAPON_TYPE_DEFUSE_KIT":     10,
	}
)

func (x CS2WeaponType) Enum() *CS2WeaponType {
	p := new(CS2WeaponType)
	*p = x
	return p
}

func (x CS2WeaponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CS2WeaponType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_cs2_proto_enumTypes[3].Descriptor()
}

func (CS2WeaponType) Type() protoreflect.EnumType {
	return &file_bragi_cs2_proto_enumTypes[3]
}

func (x CS2WeaponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CS2WeaponType.Descriptor instead.
func (CS2WeaponType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{3}
}

type CS2ItemType int32

const (
	CS2ItemType_CS2_ITEM_TYPE_UNSPECIFIED    CS2ItemType = 0
	CS2ItemType_CS2_ITEM_TYPE_PISTOL         CS2ItemType = 1
	CS2ItemType_CS2_ITEM_TYPE_BOMB           CS2ItemType = 2
	CS2ItemType_CS2_ITEM_TYPE_GRENADE        CS2ItemType = 3
	CS2ItemType_CS2_ITEM_TYPE_MACHINE_GUN    CS2ItemType = 4
	CS2ItemType_CS2_ITEM_TYPE_RIFLE          CS2ItemType = 5
	CS2ItemType_CS2_ITEM_TYPE_SHOTGUN        CS2ItemType = 6
	CS2ItemType_CS2_ITEM_TYPE_SNIPER_RIFLE   CS2ItemType = 7
	CS2ItemType_CS2_ITEM_TYPE_SUBMACHINE_GUN CS2ItemType = 8
	CS2ItemType_CS2_ITEM_TYPE_KNIFE          CS2ItemType = 9
	CS2ItemType_CS2_ITEM_TYPE_DEFUSE_KIT     CS2ItemType = 10
	CS2ItemType_CS2_ITEM_TYPE_ARMOR          CS2ItemType = 11
)

// Enum value maps for CS2ItemType.
var (
	CS2ItemType_name = map[int32]string{
		0:  "CS2_ITEM_TYPE_UNSPECIFIED",
		1:  "CS2_ITEM_TYPE_PISTOL",
		2:  "CS2_ITEM_TYPE_BOMB",
		3:  "CS2_ITEM_TYPE_GRENADE",
		4:  "CS2_ITEM_TYPE_MACHINE_GUN",
		5:  "CS2_ITEM_TYPE_RIFLE",
		6:  "CS2_ITEM_TYPE_SHOTGUN",
		7:  "CS2_ITEM_TYPE_SNIPER_RIFLE",
		8:  "CS2_ITEM_TYPE_SUBMACHINE_GUN",
		9:  "CS2_ITEM_TYPE_KNIFE",
		10: "CS2_ITEM_TYPE_DEFUSE_KIT",
		11: "CS2_ITEM_TYPE_ARMOR",
	}
	CS2ItemType_value = map[string]int32{
		"CS2_ITEM_TYPE_UNSPECIFIED":    0,
		"CS2_ITEM_TYPE_PISTOL":         1,
		"CS2_ITEM_TYPE_BOMB":           2,
		"CS2_ITEM_TYPE_GRENADE":        3,
		"CS2_ITEM_TYPE_MACHINE_GUN":    4,
		"CS2_ITEM_TYPE_RIFLE":          5,
		"CS2_ITEM_TYPE_SHOTGUN":        6,
		"CS2_ITEM_TYPE_SNIPER_RIFLE":   7,
		"CS2_ITEM_TYPE_SUBMACHINE_GUN": 8,
		"CS2_ITEM_TYPE_KNIFE":          9,
		"CS2_ITEM_TYPE_DEFUSE_KIT":     10,
		"CS2_ITEM_TYPE_ARMOR":          11,
	}
)

func (x CS2ItemType) Enum() *CS2ItemType {
	p := new(CS2ItemType)
	*p = x
	return p
}

func (x CS2ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CS2ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_cs2_proto_enumTypes[4].Descriptor()
}

func (CS2ItemType) Type() protoreflect.EnumType {
	return &file_bragi_cs2_proto_enumTypes[4]
}

func (x CS2ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CS2ItemType.Descriptor instead.
func (CS2ItemType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{4}
}

// Represent an implementation of proto message which satisfies (Game)MatchMessage requirements. For doc about (Game)MatchMessage
// check bragi_service.proto file.
type CS2MatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn   string                   `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence   uint64                   `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp  *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataStatus DataStatus               `protobuf:"varint,5,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	Payload    *CS2MatchMessage_Payload `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CS2MatchMessage) Reset() {
	*x = CS2MatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchMessage) ProtoMessage() {}

func (x *CS2MatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchMessage.ProtoReflect.Descriptor instead.
func (*CS2MatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{0}
}

func (x *CS2MatchMessage) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *CS2MatchMessage) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CS2MatchMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CS2MatchMessage) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *CS2MatchMessage) GetPayload() *CS2MatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Is an implementation of proto message which satisfies (Game)MatchSnapshot requirements. For doc about (Game)MatchSnapshot
// check bragi_service.proto file. CS2MatchSnapshot represent whole set of data about particular match. This entity is
// received only at the beginning of stream. Cache CS2MatchSnapshot in memory and then update it with received updates.
// If AnnouncementUpdate is received then append its payload to property announcements. If game update is received (CS2MatchUpdate)
// then apply this update on property match_state. For both update cases do not forget also to update "sequence" and "timestamp"
// properties with corresponding values from CS2MatchMessage.
type CS2MatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn      string                 `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence      uint64                 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataStatus    DataStatus             `protobuf:"varint,6,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	Announcements []*Announcement        `protobuf:"bytes,4,rep,name=announcements,proto3" json:"announcements,omitempty"`
	MatchState    *CS2MatchState         `protobuf:"bytes,5,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
}

func (x *CS2MatchSnapshot) Reset() {
	*x = CS2MatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchSnapshot) ProtoMessage() {}

func (x *CS2MatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchSnapshot.ProtoReflect.Descriptor instead.
func (*CS2MatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{1}
}

func (x *CS2MatchSnapshot) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *CS2MatchSnapshot) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CS2MatchSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CS2MatchSnapshot) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *CS2MatchSnapshot) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *CS2MatchSnapshot) GetMatchState() *CS2MatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

// Represents an update message which "payload" property is supposed to be applied to update match_state property of
// cached match entity (CS2MatchSnapshot). Each CS2MatchUpdate is received wrapped in CS2MatchMessage which carries
// properties "sequence", "timestamp". Replace cached properties "sequence" and "timestamp" in cached CS2MatchSnapshot
// with values of "sequence", "timestamp" from CS2MatchMessage after you successfully applied updates.
// If any update is missed, client can recover whole snapshot (CS2MatchSnapshot) with given sequence number and then
// continue applying new incoming updates with sequence number higher than snapshot one.
type CS2MatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *CS2MatchUpdate_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// Array of events (can be empty). Notifies about occurred situation in game. Those events are non-idempotent messages
	// ordered according timestamp and they are not supposed to be applied on cached match state. Those events represents
	// a history of match. If any eventis missed there is no way how to recover missing events.
	//
	// Deprecated: Do not use.
	Events []*CS2Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *CS2MatchUpdate) Reset() {
	*x = CS2MatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchUpdate) ProtoMessage() {}

func (x *CS2MatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchUpdate.ProtoReflect.Descriptor instead.
func (*CS2MatchUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{2}
}

func (x *CS2MatchUpdate) GetPayload() *CS2MatchUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Deprecated: Do not use.
func (x *CS2MatchUpdate) GetEvents() []*CS2Event {
	if x != nil {
		return x.Events
	}
	return nil
}

// One CS2MatchUpdate contains non-empty array property called "updates". These updates represents idempotent updates
// which are supposed to be applied on match_state property in CS2MatchSnapshot.
type CS2MatchStatePartialUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*CS2MatchStatePartialUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *CS2MatchStatePartialUpdates) Reset() {
	*x = CS2MatchStatePartialUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchStatePartialUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchStatePartialUpdates) ProtoMessage() {}

func (x *CS2MatchStatePartialUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchStatePartialUpdates.ProtoReflect.Descriptor instead.
func (*CS2MatchStatePartialUpdates) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{3}
}

func (x *CS2MatchStatePartialUpdates) GetUpdates() []*CS2MatchStatePartialUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type CS2MatchStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*CS2MatchStatePartialUpdate_Score
	//	*CS2MatchStatePartialUpdate_CurrentMapState
	//	*CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate
	Update isCS2MatchStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *CS2MatchStatePartialUpdate) Reset() {
	*x = CS2MatchStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchStatePartialUpdate) ProtoMessage() {}

func (x *CS2MatchStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CS2MatchStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{4}
}

func (m *CS2MatchStatePartialUpdate) GetUpdate() isCS2MatchStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CS2MatchStatePartialUpdate) GetScore() *CS2MatchScoreState {
	if x, ok := x.GetUpdate().(*CS2MatchStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *CS2MatchStatePartialUpdate) GetCurrentMapState() *CS2CurrentMapState {
	if x, ok := x.GetUpdate().(*CS2MatchStatePartialUpdate_CurrentMapState); ok {
		return x.CurrentMapState
	}
	return nil
}

func (x *CS2MatchStatePartialUpdate) GetCurrentMapStatePartialUpdate() *CS2CurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate); ok {
		return x.CurrentMapStatePartialUpdate
	}
	return nil
}

type isCS2MatchStatePartialUpdate_Update interface {
	isCS2MatchStatePartialUpdate_Update()
}

type CS2MatchStatePartialUpdate_Score struct {
	// Replaces "score" property in CS2MatchState.
	Score *CS2MatchScoreState `protobuf:"bytes,1,opt,name=score,proto3,oneof"`
}

type CS2MatchStatePartialUpdate_CurrentMapState struct {
	// Replaces "current_map_state" property in CS2MatchState. To minimalize issues with incorrect updates application
	// on current_map_state, server sends CS2MatchStatePartialUpdate with CS2MapState in periodic time set by customer.
	CurrentMapState *CS2CurrentMapState `protobuf:"bytes,2,opt,name=current_map_state,json=currentMapState,proto3,oneof"`
}

type CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate struct {
	// Apply partial update on "current_map_state" property in CS2MapState.
	CurrentMapStatePartialUpdate *CS2CurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=current_map_state_partial_update,json=currentMapStatePartialUpdate,proto3,oneof"`
}

func (*CS2MatchStatePartialUpdate_Score) isCS2MatchStatePartialUpdate_Update() {}

func (*CS2MatchStatePartialUpdate_CurrentMapState) isCS2MatchStatePartialUpdate_Update() {}

func (*CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate) isCS2MatchStatePartialUpdate_Update() {
}

type CS2MatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn          string                 `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	MatchType         BestOfType             `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=bragi.BestOfType" json:"match_type,omitempty"`
	HomeTeam          *CS2Team               `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam          *CS2Team               `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Score             *CS2MatchScoreState    `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	WinTeamUrn        *string                `protobuf:"bytes,9,opt,name=win_team_urn,json=winTeamUrn,proto3,oneof" json:"win_team_urn,omitempty"`
	MatchStatus       MatchStatusType        `protobuf:"varint,6,opt,name=match_status,json=matchStatus,proto3,enum=bragi.MatchStatusType" json:"match_status,omitempty"`
	CurrentMapState   *CS2CurrentMapState    `protobuf:"bytes,7,opt,name=current_map_state,json=currentMapState,proto3" json:"current_map_state,omitempty"`
	PreviousMapStates []*CS2PreviousMapState `protobuf:"bytes,8,rep,name=previous_map_states,json=previousMapStates,proto3" json:"previous_map_states,omitempty"` //this property is updated only when whole CS2MatchState update is received
}

func (x *CS2MatchState) Reset() {
	*x = CS2MatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchState) ProtoMessage() {}

func (x *CS2MatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchState.ProtoReflect.Descriptor instead.
func (*CS2MatchState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{5}
}

func (x *CS2MatchState) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *CS2MatchState) GetMatchType() BestOfType {
	if x != nil {
		return x.MatchType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *CS2MatchState) GetHomeTeam() *CS2Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *CS2MatchState) GetAwayTeam() *CS2Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *CS2MatchState) GetScore() *CS2MatchScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *CS2MatchState) GetWinTeamUrn() string {
	if x != nil && x.WinTeamUrn != nil {
		return *x.WinTeamUrn
	}
	return ""
}

func (x *CS2MatchState) GetMatchStatus() MatchStatusType {
	if x != nil {
		return x.MatchStatus
	}
	return MatchStatusType_MATCH_STATUS_TYPE_UNSPECIFIED
}

func (x *CS2MatchState) GetCurrentMapState() *CS2CurrentMapState {
	if x != nil {
		return x.CurrentMapState
	}
	return nil
}

func (x *CS2MatchState) GetPreviousMapStates() []*CS2PreviousMapState {
	if x != nil {
		return x.PreviousMapStates
	}
	return nil
}

type CS2MatchScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *CS2MatchScoreState) Reset() {
	*x = CS2MatchScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchScoreState) ProtoMessage() {}

func (x *CS2MatchScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchScoreState.ProtoReflect.Descriptor instead.
func (*CS2MatchScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{6}
}

func (x *CS2MatchScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *CS2MatchScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type CS2Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn  string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	TeamName string `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
}

func (x *CS2Team) Reset() {
	*x = CS2Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2Team) ProtoMessage() {}

func (x *CS2Team) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2Team.ProtoReflect.Descriptor instead.
func (*CS2Team) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{7}
}

func (x *CS2Team) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2Team) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

type CS2CurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*CS2CurrentMapStatePartialUpdate_Info
	//	*CS2CurrentMapStatePartialUpdate_Score
	//	*CS2CurrentMapStatePartialUpdate_CurrentRoundState
	//	*CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate
	//	*CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate
	Update isCS2CurrentMapStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *CS2CurrentMapStatePartialUpdate) Reset() {
	*x = CS2CurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2CurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2CurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *CS2CurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2CurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CS2CurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{8}
}

func (m *CS2CurrentMapStatePartialUpdate) GetUpdate() isCS2CurrentMapStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CS2CurrentMapStatePartialUpdate) GetInfo() *CS2MapInfoState {
	if x, ok := x.GetUpdate().(*CS2CurrentMapStatePartialUpdate_Info); ok {
		return x.Info
	}
	return nil
}

func (x *CS2CurrentMapStatePartialUpdate) GetScore() *CS2MapScoreState {
	if x, ok := x.GetUpdate().(*CS2CurrentMapStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *CS2CurrentMapStatePartialUpdate) GetCurrentRoundState() *CS2CurrentRoundState {
	if x, ok := x.GetUpdate().(*CS2CurrentMapStatePartialUpdate_CurrentRoundState); ok {
		return x.CurrentRoundState
	}
	return nil
}

func (x *CS2CurrentMapStatePartialUpdate) GetCurrentRoundStatePartialUpdate() *CS2CurrentRoundStatePartialUpdate {
	if x, ok := x.GetUpdate().(*CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate); ok {
		return x.CurrentRoundStatePartialUpdate
	}
	return nil
}

func (x *CS2CurrentMapStatePartialUpdate) GetTeamMapStatesPartialUpdate() *CS2TeamMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate); ok {
		return x.TeamMapStatesPartialUpdate
	}
	return nil
}

type isCS2CurrentMapStatePartialUpdate_Update interface {
	isCS2CurrentMapStatePartialUpdate_Update()
}

type CS2CurrentMapStatePartialUpdate_Info struct {
	// Replaces "info" property in CS2MapState.
	Info *CS2MapInfoState `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type CS2CurrentMapStatePartialUpdate_Score struct {
	// Replaces "score" property in CS2MapState.
	Score *CS2MapScoreState `protobuf:"bytes,2,opt,name=score,proto3,oneof"`
}

type CS2CurrentMapStatePartialUpdate_CurrentRoundState struct {
	// Replaces "current_round_state" property in CS2MapState.
	CurrentRoundState *CS2CurrentRoundState `protobuf:"bytes,3,opt,name=current_round_state,json=currentRoundState,proto3,oneof"`
}

type CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate struct {
	// Apply partial update on "current_round_state" property in CS2MapState.
	CurrentRoundStatePartialUpdate *CS2CurrentRoundStatePartialUpdate `protobuf:"bytes,4,opt,name=current_round_state_partial_update,json=currentRoundStatePartialUpdate,proto3,oneof"`
}

type CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate struct {
	// Apply partial update on value under given key in team_map_states map property in CS2MapState.
	TeamMapStatesPartialUpdate *CS2TeamMapStatePartialUpdate `protobuf:"bytes,5,opt,name=team_map_states_partial_update,json=teamMapStatesPartialUpdate,proto3,oneof"`
}

func (*CS2CurrentMapStatePartialUpdate_Info) isCS2CurrentMapStatePartialUpdate_Update() {}

func (*CS2CurrentMapStatePartialUpdate_Score) isCS2CurrentMapStatePartialUpdate_Update() {}

func (*CS2CurrentMapStatePartialUpdate_CurrentRoundState) isCS2CurrentMapStatePartialUpdate_Update() {
}

func (*CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate) isCS2CurrentMapStatePartialUpdate_Update() {
}

func (*CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate) isCS2CurrentMapStatePartialUpdate_Update() {
}

type CS2CurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder            uint32                      `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	Info                *CS2MapInfoState            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Score               *CS2MapScoreState           `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	CurrentRoundState   *CS2CurrentRoundState       `protobuf:"bytes,4,opt,name=current_round_state,json=currentRoundState,proto3" json:"current_round_state,omitempty"`
	PreviousRoundStates []*CS2PreviousRoundState    `protobuf:"bytes,5,rep,name=previous_round_states,json=previousRoundStates,proto3" json:"previous_round_states,omitempty"`                                                                       //this property is updated only when whole CS2MapState update is received
	TeamMapStates       map[string]*CS2TeamMapState `protobuf:"bytes,6,rep,name=team_map_states,json=teamMapStates,proto3" json:"team_map_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of team_urn
}

func (x *CS2CurrentMapState) Reset() {
	*x = CS2CurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2CurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2CurrentMapState) ProtoMessage() {}

func (x *CS2CurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2CurrentMapState.ProtoReflect.Descriptor instead.
func (*CS2CurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{9}
}

func (x *CS2CurrentMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *CS2CurrentMapState) GetInfo() *CS2MapInfoState {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CS2CurrentMapState) GetScore() *CS2MapScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *CS2CurrentMapState) GetCurrentRoundState() *CS2CurrentRoundState {
	if x != nil {
		return x.CurrentRoundState
	}
	return nil
}

func (x *CS2CurrentMapState) GetPreviousRoundStates() []*CS2PreviousRoundState {
	if x != nil {
		return x.PreviousRoundStates
	}
	return nil
}

func (x *CS2CurrentMapState) GetTeamMapStates() map[string]*CS2TeamMapState {
	if x != nil {
		return x.TeamMapStates
	}
	return nil
}

type CS2PreviousMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder      uint32                      `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	Info          *CS2MapInfoState            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Score         *CS2MapScoreState           `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	RoundStates   []*CS2PreviousRoundState    `protobuf:"bytes,4,rep,name=round_states,json=roundStates,proto3" json:"round_states,omitempty"`
	TeamMapStates map[string]*CS2TeamMapState `protobuf:"bytes,5,rep,name=team_map_states,json=teamMapStates,proto3" json:"team_map_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CS2PreviousMapState) Reset() {
	*x = CS2PreviousMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PreviousMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PreviousMapState) ProtoMessage() {}

func (x *CS2PreviousMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PreviousMapState.ProtoReflect.Descriptor instead.
func (*CS2PreviousMapState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{10}
}

func (x *CS2PreviousMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *CS2PreviousMapState) GetInfo() *CS2MapInfoState {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CS2PreviousMapState) GetScore() *CS2MapScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *CS2PreviousMapState) GetRoundStates() []*CS2PreviousRoundState {
	if x != nil {
		return x.RoundStates
	}
	return nil
}

func (x *CS2PreviousMapState) GetTeamMapStates() map[string]*CS2TeamMapState {
	if x != nil {
		return x.TeamMapStates
	}
	return nil
}

type CS2MapInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapName            string                 `protobuf:"bytes,1,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	MaxRoundsDefault   uint32                 `protobuf:"varint,2,opt,name=max_rounds_default,json=maxRoundsDefault,proto3" json:"max_rounds_default,omitempty"`
	MaxRoundsOvertime  uint32                 `protobuf:"varint,3,opt,name=max_rounds_overtime,json=maxRoundsOvertime,proto3" json:"max_rounds_overtime,omitempty"`
	FreezeTimeDuration *durationpb.Duration   `protobuf:"bytes,4,opt,name=freeze_time_duration,json=freezeTimeDuration,proto3,oneof" json:"freeze_time_duration,omitempty"`
	RoundTimeDuration  *durationpb.Duration   `protobuf:"bytes,5,opt,name=round_time_duration,json=roundTimeDuration,proto3,oneof" json:"round_time_duration,omitempty"`
	BombTimeDuration   *durationpb.Duration   `protobuf:"bytes,6,opt,name=bomb_time_duration,json=bombTimeDuration,proto3,oneof" json:"bomb_time_duration,omitempty"`
	StartTime          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	MapEnded           bool                   `protobuf:"varint,9,opt,name=map_ended,json=mapEnded,proto3" json:"map_ended,omitempty"`
	WinTeamUrn         *string                `protobuf:"bytes,10,opt,name=win_team_urn,json=winTeamUrn,proto3,oneof" json:"win_team_urn,omitempty"`
}

func (x *CS2MapInfoState) Reset() {
	*x = CS2MapInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MapInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MapInfoState) ProtoMessage() {}

func (x *CS2MapInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MapInfoState.ProtoReflect.Descriptor instead.
func (*CS2MapInfoState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{11}
}

func (x *CS2MapInfoState) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *CS2MapInfoState) GetMaxRoundsDefault() uint32 {
	if x != nil {
		return x.MaxRoundsDefault
	}
	return 0
}

func (x *CS2MapInfoState) GetMaxRoundsOvertime() uint32 {
	if x != nil {
		return x.MaxRoundsOvertime
	}
	return 0
}

func (x *CS2MapInfoState) GetFreezeTimeDuration() *durationpb.Duration {
	if x != nil {
		return x.FreezeTimeDuration
	}
	return nil
}

func (x *CS2MapInfoState) GetRoundTimeDuration() *durationpb.Duration {
	if x != nil {
		return x.RoundTimeDuration
	}
	return nil
}

func (x *CS2MapInfoState) GetBombTimeDuration() *durationpb.Duration {
	if x != nil {
		return x.BombTimeDuration
	}
	return nil
}

func (x *CS2MapInfoState) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CS2MapInfoState) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CS2MapInfoState) GetMapEnded() bool {
	if x != nil {
		return x.MapEnded
	}
	return false
}

func (x *CS2MapInfoState) GetWinTeamUrn() string {
	if x != nil && x.WinTeamUrn != nil {
		return *x.WinTeamUrn
	}
	return ""
}

type CS2MapScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *CS2MapScoreState) Reset() {
	*x = CS2MapScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MapScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MapScoreState) ProtoMessage() {}

func (x *CS2MapScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MapScoreState.ProtoReflect.Descriptor instead.
func (*CS2MapScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{12}
}

func (x *CS2MapScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *CS2MapScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type CS2CurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*CS2CurrentRoundStatePartialUpdate_Info
	//	*CS2CurrentRoundStatePartialUpdate_Time
	//	*CS2CurrentRoundStatePartialUpdate_BombState
	//	*CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate
	Update isCS2CurrentRoundStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *CS2CurrentRoundStatePartialUpdate) Reset() {
	*x = CS2CurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2CurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2CurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *CS2CurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2CurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CS2CurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{13}
}

func (m *CS2CurrentRoundStatePartialUpdate) GetUpdate() isCS2CurrentRoundStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CS2CurrentRoundStatePartialUpdate) GetInfo() *CS2RoundInfoState {
	if x, ok := x.GetUpdate().(*CS2CurrentRoundStatePartialUpdate_Info); ok {
		return x.Info
	}
	return nil
}

func (x *CS2CurrentRoundStatePartialUpdate) GetTime() *CS2RoundTimeState {
	if x, ok := x.GetUpdate().(*CS2CurrentRoundStatePartialUpdate_Time); ok {
		return x.Time
	}
	return nil
}

func (x *CS2CurrentRoundStatePartialUpdate) GetBombState() *CS2BombState {
	if x, ok := x.GetUpdate().(*CS2CurrentRoundStatePartialUpdate_BombState); ok {
		return x.BombState
	}
	return nil
}

func (x *CS2CurrentRoundStatePartialUpdate) GetTeamStatesPartialUpdate() *CS2TeamCurrentRoundStatePartialUpdate {
	if x, ok := x.GetUpdate().(*CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate); ok {
		return x.TeamStatesPartialUpdate
	}
	return nil
}

type isCS2CurrentRoundStatePartialUpdate_Update interface {
	isCS2CurrentRoundStatePartialUpdate_Update()
}

type CS2CurrentRoundStatePartialUpdate_Info struct {
	// Replaces "info" property in CS2CurrentRoundState.
	Info *CS2RoundInfoState `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type CS2CurrentRoundStatePartialUpdate_Time struct {
	// Replaces "time" property in CS2CurrentRoundState.
	Time *CS2RoundTimeState `protobuf:"bytes,2,opt,name=time,proto3,oneof"`
}

type CS2CurrentRoundStatePartialUpdate_BombState struct {
	// Replaces "bomb_state" property in CS2CurrentRoundState.
	BombState *CS2BombState `protobuf:"bytes,3,opt,name=bomb_state,json=bombState,proto3,oneof"`
}

type CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate struct {
	// Apply partial update on value under given key in team_states map property in CS2CurrentRoundState.
	TeamStatesPartialUpdate *CS2TeamCurrentRoundStatePartialUpdate `protobuf:"bytes,4,opt,name=team_states_partial_update,json=teamStatesPartialUpdate,proto3,oneof"`
}

func (*CS2CurrentRoundStatePartialUpdate_Info) isCS2CurrentRoundStatePartialUpdate_Update() {}

func (*CS2CurrentRoundStatePartialUpdate_Time) isCS2CurrentRoundStatePartialUpdate_Update() {}

func (*CS2CurrentRoundStatePartialUpdate_BombState) isCS2CurrentRoundStatePartialUpdate_Update() {}

func (*CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate) isCS2CurrentRoundStatePartialUpdate_Update() {
}

type CS2CurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber uint32                               `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	Info        *CS2RoundInfoState                   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Time        *CS2RoundTimeState                   `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	BombState   *CS2BombState                        `protobuf:"bytes,4,opt,name=bomb_state,json=bombState,proto3" json:"bomb_state,omitempty"`
	TeamStates  map[string]*CS2TeamCurrentRoundState `protobuf:"bytes,5,rep,name=team_states,json=teamStates,proto3" json:"team_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of team_urn
}

func (x *CS2CurrentRoundState) Reset() {
	*x = CS2CurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2CurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2CurrentRoundState) ProtoMessage() {}

func (x *CS2CurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2CurrentRoundState.ProtoReflect.Descriptor instead.
func (*CS2CurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{14}
}

func (x *CS2CurrentRoundState) GetRoundNumber() uint32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *CS2CurrentRoundState) GetInfo() *CS2RoundInfoState {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CS2CurrentRoundState) GetTime() *CS2RoundTimeState {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CS2CurrentRoundState) GetBombState() *CS2BombState {
	if x != nil {
		return x.BombState
	}
	return nil
}

func (x *CS2CurrentRoundState) GetTeamStates() map[string]*CS2TeamCurrentRoundState {
	if x != nil {
		return x.TeamStates
	}
	return nil
}

type CS2PreviousRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber uint32                                `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	Info        *CS2RoundInfoState                    `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	TeamStates  map[string]*CS2PreviousTeamRoundState `protobuf:"bytes,4,rep,name=team_states,json=teamStates,proto3" json:"team_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of team_urn
}

func (x *CS2PreviousRoundState) Reset() {
	*x = CS2PreviousRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PreviousRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PreviousRoundState) ProtoMessage() {}

func (x *CS2PreviousRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PreviousRoundState.ProtoReflect.Descriptor instead.
func (*CS2PreviousRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{15}
}

func (x *CS2PreviousRoundState) GetRoundNumber() uint32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *CS2PreviousRoundState) GetInfo() *CS2RoundInfoState {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CS2PreviousRoundState) GetTeamStates() map[string]*CS2PreviousTeamRoundState {
	if x != nil {
		return x.TeamStates
	}
	return nil
}

type CS2RoundInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundType      CS2RoundStateType      `protobuf:"varint,1,opt,name=round_type,json=roundType,proto3,enum=bragi.CS2RoundStateType" json:"round_type,omitempty"`
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	WinningTeamUrn *string                `protobuf:"bytes,4,opt,name=winning_team_urn,json=winningTeamUrn,proto3,oneof" json:"winning_team_urn,omitempty"`
	WinReason      *CS2WinReason          `protobuf:"varint,5,opt,name=win_reason,json=winReason,proto3,enum=bragi.CS2WinReason,oneof" json:"win_reason,omitempty"`
	HomeWon        *bool                  `protobuf:"varint,6,opt,name=home_won,json=homeWon,proto3,oneof" json:"home_won,omitempty"`
}

func (x *CS2RoundInfoState) Reset() {
	*x = CS2RoundInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2RoundInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2RoundInfoState) ProtoMessage() {}

func (x *CS2RoundInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2RoundInfoState.ProtoReflect.Descriptor instead.
func (*CS2RoundInfoState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{16}
}

func (x *CS2RoundInfoState) GetRoundType() CS2RoundStateType {
	if x != nil {
		return x.RoundType
	}
	return CS2RoundStateType_CS2_ROUND_STATE_TYPE_UNSPECIFIED
}

func (x *CS2RoundInfoState) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CS2RoundInfoState) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CS2RoundInfoState) GetWinningTeamUrn() string {
	if x != nil && x.WinningTeamUrn != nil {
		return *x.WinningTeamUrn
	}
	return ""
}

func (x *CS2RoundInfoState) GetWinReason() CS2WinReason {
	if x != nil && x.WinReason != nil {
		return *x.WinReason
	}
	return CS2WinReason_CS2_WIN_REASON_UNSPECIFIED
}

func (x *CS2RoundInfoState) GetHomeWon() bool {
	if x != nil && x.HomeWon != nil {
		return *x.HomeWon
	}
	return false
}

type CS2RoundTimeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRemaining *durationpb.Duration `protobuf:"bytes,1,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
}

func (x *CS2RoundTimeState) Reset() {
	*x = CS2RoundTimeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2RoundTimeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2RoundTimeState) ProtoMessage() {}

func (x *CS2RoundTimeState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2RoundTimeState.ProtoReflect.Descriptor instead.
func (*CS2RoundTimeState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{17}
}

func (x *CS2RoundTimeState) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

type CS2BombState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CS2BombState_Carried
	//	*CS2BombState_Dropped
	//	*CS2BombState_Planting
	//	*CS2BombState_Planted
	//	*CS2BombState_Defusing
	//	*CS2BombState_Defused
	//	*CS2BombState_Exploded
	Payload isCS2BombState_Payload `protobuf_oneof:"payload"`
}

func (x *CS2BombState) Reset() {
	*x = CS2BombState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombState) ProtoMessage() {}

func (x *CS2BombState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombState.ProtoReflect.Descriptor instead.
func (*CS2BombState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{18}
}

func (m *CS2BombState) GetPayload() isCS2BombState_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CS2BombState) GetCarried() *CS2BombCarriedState {
	if x, ok := x.GetPayload().(*CS2BombState_Carried); ok {
		return x.Carried
	}
	return nil
}

func (x *CS2BombState) GetDropped() *CS2BombDroppedState {
	if x, ok := x.GetPayload().(*CS2BombState_Dropped); ok {
		return x.Dropped
	}
	return nil
}

func (x *CS2BombState) GetPlanting() *CS2BombPlantingState {
	if x, ok := x.GetPayload().(*CS2BombState_Planting); ok {
		return x.Planting
	}
	return nil
}

func (x *CS2BombState) GetPlanted() *CS2BombPlantedState {
	if x, ok := x.GetPayload().(*CS2BombState_Planted); ok {
		return x.Planted
	}
	return nil
}

func (x *CS2BombState) GetDefusing() *CS2BombDefusingState {
	if x, ok := x.GetPayload().(*CS2BombState_Defusing); ok {
		return x.Defusing
	}
	return nil
}

func (x *CS2BombState) GetDefused() *CS2BombDefusedState {
	if x, ok := x.GetPayload().(*CS2BombState_Defused); ok {
		return x.Defused
	}
	return nil
}

func (x *CS2BombState) GetExploded() *CS2BombExplodedState {
	if x, ok := x.GetPayload().(*CS2BombState_Exploded); ok {
		return x.Exploded
	}
	return nil
}

type isCS2BombState_Payload interface {
	isCS2BombState_Payload()
}

type CS2BombState_Carried struct {
	Carried *CS2BombCarriedState `protobuf:"bytes,1,opt,name=carried,proto3,oneof"`
}

type CS2BombState_Dropped struct {
	Dropped *CS2BombDroppedState `protobuf:"bytes,2,opt,name=dropped,proto3,oneof"`
}

type CS2BombState_Planting struct {
	Planting *CS2BombPlantingState `protobuf:"bytes,3,opt,name=planting,proto3,oneof"`
}

type CS2BombState_Planted struct {
	Planted *CS2BombPlantedState `protobuf:"bytes,4,opt,name=planted,proto3,oneof"`
}

type CS2BombState_Defusing struct {
	Defusing *CS2BombDefusingState `protobuf:"bytes,5,opt,name=defusing,proto3,oneof"`
}

type CS2BombState_Defused struct {
	Defused *CS2BombDefusedState `protobuf:"bytes,6,opt,name=defused,proto3,oneof"`
}

type CS2BombState_Exploded struct {
	Exploded *CS2BombExplodedState `protobuf:"bytes,7,opt,name=exploded,proto3,oneof"`
}

func (*CS2BombState_Carried) isCS2BombState_Payload() {}

func (*CS2BombState_Dropped) isCS2BombState_Payload() {}

func (*CS2BombState_Planting) isCS2BombState_Payload() {}

func (*CS2BombState_Planted) isCS2BombState_Payload() {}

func (*CS2BombState_Defusing) isCS2BombState_Payload() {}

func (*CS2BombState_Defused) isCS2BombState_Payload() {}

func (*CS2BombState_Exploded) isCS2BombState_Payload() {}

type CS2BombCarriedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string       `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Position  *CS2Position `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CS2BombCarriedState) Reset() {
	*x = CS2BombCarriedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombCarriedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombCarriedState) ProtoMessage() {}

func (x *CS2BombCarriedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombCarriedState.ProtoReflect.Descriptor instead.
func (*CS2BombCarriedState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{19}
}

func (x *CS2BombCarriedState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2BombCarriedState) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type CS2BombDroppedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DroppedByPlayerUrn string       `protobuf:"bytes,1,opt,name=dropped_by_player_urn,json=droppedByPlayerUrn,proto3" json:"dropped_by_player_urn,omitempty"`
	Position           *CS2Position `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CS2BombDroppedState) Reset() {
	*x = CS2BombDroppedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombDroppedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombDroppedState) ProtoMessage() {}

func (x *CS2BombDroppedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombDroppedState.ProtoReflect.Descriptor instead.
func (*CS2BombDroppedState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{20}
}

func (x *CS2BombDroppedState) GetDroppedByPlayerUrn() string {
	if x != nil {
		return x.DroppedByPlayerUrn
	}
	return ""
}

func (x *CS2BombDroppedState) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type CS2BombPlantingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string               `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Position  *CS2Position         `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Countdown *durationpb.Duration `protobuf:"bytes,3,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (x *CS2BombPlantingState) Reset() {
	*x = CS2BombPlantingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombPlantingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombPlantingState) ProtoMessage() {}

func (x *CS2BombPlantingState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombPlantingState.ProtoReflect.Descriptor instead.
func (*CS2BombPlantingState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{21}
}

func (x *CS2BombPlantingState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2BombPlantingState) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS2BombPlantingState) GetCountdown() *durationpb.Duration {
	if x != nil {
		return x.Countdown
	}
	return nil
}

type CS2BombPlantedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantedByPlayerUrn string                 `protobuf:"bytes,1,opt,name=planted_by_player_urn,json=plantedByPlayerUrn,proto3" json:"planted_by_player_urn,omitempty"`
	Position           *CS2Position           `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	PlantedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=planted_at,json=plantedAt,proto3" json:"planted_at,omitempty"`
	Countdown          *durationpb.Duration   `protobuf:"bytes,4,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (x *CS2BombPlantedState) Reset() {
	*x = CS2BombPlantedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombPlantedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombPlantedState) ProtoMessage() {}

func (x *CS2BombPlantedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombPlantedState.ProtoReflect.Descriptor instead.
func (*CS2BombPlantedState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{22}
}

func (x *CS2BombPlantedState) GetPlantedByPlayerUrn() string {
	if x != nil {
		return x.PlantedByPlayerUrn
	}
	return ""
}

func (x *CS2BombPlantedState) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS2BombPlantedState) GetPlantedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlantedAt
	}
	return nil
}

func (x *CS2BombPlantedState) GetCountdown() *durationpb.Duration {
	if x != nil {
		return x.Countdown
	}
	return nil
}

type CS2BombDefusingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn       string                 `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Position        *CS2Position           `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Countdown       *durationpb.Duration   `protobuf:"bytes,3,opt,name=countdown,proto3" json:"countdown,omitempty"`
	DefuseStartedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=defuse_started_at,json=defuseStartedAt,proto3" json:"defuse_started_at,omitempty"`
}

func (x *CS2BombDefusingState) Reset() {
	*x = CS2BombDefusingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombDefusingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombDefusingState) ProtoMessage() {}

func (x *CS2BombDefusingState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombDefusingState.ProtoReflect.Descriptor instead.
func (*CS2BombDefusingState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{23}
}

func (x *CS2BombDefusingState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2BombDefusingState) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS2BombDefusingState) GetCountdown() *durationpb.Duration {
	if x != nil {
		return x.Countdown
	}
	return nil
}

func (x *CS2BombDefusingState) GetDefuseStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DefuseStartedAt
	}
	return nil
}

type CS2BombDefusedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefusedByPlayerUrn string                 `protobuf:"bytes,1,opt,name=defused_by_player_urn,json=defusedByPlayerUrn,proto3" json:"defused_by_player_urn,omitempty"`
	Position           *CS2Position           `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	DefusedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=defused_at,json=defusedAt,proto3" json:"defused_at,omitempty"`
}

func (x *CS2BombDefusedState) Reset() {
	*x = CS2BombDefusedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombDefusedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombDefusedState) ProtoMessage() {}

func (x *CS2BombDefusedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombDefusedState.ProtoReflect.Descriptor instead.
func (*CS2BombDefusedState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{24}
}

func (x *CS2BombDefusedState) GetDefusedByPlayerUrn() string {
	if x != nil {
		return x.DefusedByPlayerUrn
	}
	return ""
}

func (x *CS2BombDefusedState) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS2BombDefusedState) GetDefusedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DefusedAt
	}
	return nil
}

type CS2BombExplodedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position   *CS2Position           `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	ExplodedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=exploded_at,json=explodedAt,proto3" json:"exploded_at,omitempty"`
}

func (x *CS2BombExplodedState) Reset() {
	*x = CS2BombExplodedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombExplodedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombExplodedState) ProtoMessage() {}

func (x *CS2BombExplodedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombExplodedState.ProtoReflect.Descriptor instead.
func (*CS2BombExplodedState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{25}
}

func (x *CS2BombExplodedState) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS2BombExplodedState) GetExplodedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExplodedAt
	}
	return nil
}

type CS2TeamMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Payload *CS2TeamMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CS2TeamMapStatePartialUpdate) Reset() {
	*x = CS2TeamMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2TeamMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2TeamMapStatePartialUpdate) ProtoMessage() {}

func (x *CS2TeamMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2TeamMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CS2TeamMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{26}
}

func (x *CS2TeamMapStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2TeamMapStatePartialUpdate) GetPayload() *CS2TeamMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CS2TeamMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn         string                        `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Side            CS2Side                       `protobuf:"varint,2,opt,name=side,proto3,enum=bragi.CS2Side" json:"side,omitempty"`
	PlayerMapStates map[string]*CS2PlayerMapState `protobuf:"bytes,3,rep,name=player_map_states,json=playerMapStates,proto3" json:"player_map_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CS2TeamMapState) Reset() {
	*x = CS2TeamMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2TeamMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2TeamMapState) ProtoMessage() {}

func (x *CS2TeamMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2TeamMapState.ProtoReflect.Descriptor instead.
func (*CS2TeamMapState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{27}
}

func (x *CS2TeamMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2TeamMapState) GetSide() CS2Side {
	if x != nil {
		return x.Side
	}
	return CS2Side_CS2_SIDE_UNSPECIFIED
}

func (x *CS2TeamMapState) GetPlayerMapStates() map[string]*CS2PlayerMapState {
	if x != nil {
		return x.PlayerMapStates
	}
	return nil
}

type CS2TeamCurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                         `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Payload *CS2TeamCurrentRoundStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CS2TeamCurrentRoundStatePartialUpdate) Reset() {
	*x = CS2TeamCurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2TeamCurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2TeamCurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *CS2TeamCurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2TeamCurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CS2TeamCurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{28}
}

func (x *CS2TeamCurrentRoundStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2TeamCurrentRoundStatePartialUpdate) GetPayload() *CS2TeamCurrentRoundStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CS2TeamCurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn           string                                 `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	PlayerRoundStates map[string]*CS2PlayerCurrentRoundState `protobuf:"bytes,2,rep,name=player_round_states,json=playerRoundStates,proto3" json:"player_round_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CS2TeamCurrentRoundState) Reset() {
	*x = CS2TeamCurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2TeamCurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2TeamCurrentRoundState) ProtoMessage() {}

func (x *CS2TeamCurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2TeamCurrentRoundState.ProtoReflect.Descriptor instead.
func (*CS2TeamCurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{29}
}

func (x *CS2TeamCurrentRoundState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2TeamCurrentRoundState) GetPlayerRoundStates() map[string]*CS2PlayerCurrentRoundState {
	if x != nil {
		return x.PlayerRoundStates
	}
	return nil
}

type CS2PreviousTeamRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                  `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Players map[string]*CS2PlayerPreviousRoundState `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CS2PreviousTeamRoundState) Reset() {
	*x = CS2PreviousTeamRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PreviousTeamRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PreviousTeamRoundState) ProtoMessage() {}

func (x *CS2PreviousTeamRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PreviousTeamRoundState.ProtoReflect.Descriptor instead.
func (*CS2PreviousTeamRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{30}
}

func (x *CS2PreviousTeamRoundState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2PreviousTeamRoundState) GetPlayers() map[string]*CS2PlayerPreviousRoundState {
	if x != nil {
		return x.Players
	}
	return nil
}

type CS2PlayerMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string                                  `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Payload   *CS2PlayerMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CS2PlayerMapStatePartialUpdate) Reset() {
	*x = CS2PlayerMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerMapStatePartialUpdate) ProtoMessage() {}

func (x *CS2PlayerMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CS2PlayerMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{31}
}

func (x *CS2PlayerMapStatePartialUpdate) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerMapStatePartialUpdate) GetPayload() *CS2PlayerMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CS2PlayerMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                       `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerName string                       `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	SlotId     uint32                       `protobuf:"varint,4,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	Statistics *CS2PlayerMapStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CS2PlayerMapState) Reset() {
	*x = CS2PlayerMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerMapState) ProtoMessage() {}

func (x *CS2PlayerMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerMapState.ProtoReflect.Descriptor instead.
func (*CS2PlayerMapState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{32}
}

func (x *CS2PlayerMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerMapState) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CS2PlayerMapState) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *CS2PlayerMapState) GetStatistics() *CS2PlayerMapStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CS2PlayerMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn             string               `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	OpeningKills          uint32               `protobuf:"varint,4,opt,name=opening_kills,json=openingKills,proto3" json:"opening_kills,omitempty"`
	OpeningDeaths         uint32               `protobuf:"varint,5,opt,name=opening_deaths,json=openingDeaths,proto3" json:"opening_deaths,omitempty"`
	TotalDamage           uint32               `protobuf:"varint,6,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	AverageDamagePerRound float32              `protobuf:"fixed32,7,opt,name=average_damage_per_round,json=averageDamagePerRound,proto3" json:"average_damage_per_round,omitempty"`
	Statistics            *CS2PlayerStatistics `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CS2PlayerMapStatisticsState) Reset() {
	*x = CS2PlayerMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerMapStatisticsState) ProtoMessage() {}

func (x *CS2PlayerMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerMapStatisticsState.ProtoReflect.Descriptor instead.
func (*CS2PlayerMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{33}
}

func (x *CS2PlayerMapStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerMapStatisticsState) GetOpeningKills() uint32 {
	if x != nil {
		return x.OpeningKills
	}
	return 0
}

func (x *CS2PlayerMapStatisticsState) GetOpeningDeaths() uint32 {
	if x != nil {
		return x.OpeningDeaths
	}
	return 0
}

func (x *CS2PlayerMapStatisticsState) GetTotalDamage() uint32 {
	if x != nil {
		return x.TotalDamage
	}
	return 0
}

func (x *CS2PlayerMapStatisticsState) GetAverageDamagePerRound() float32 {
	if x != nil {
		return x.AverageDamagePerRound
	}
	return 0
}

func (x *CS2PlayerMapStatisticsState) GetStatistics() *CS2PlayerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CS2PlayerCurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string                                           `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Payload   *CS2PlayerCurrentRoundStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate) Reset() {
	*x = CS2PlayerCurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerCurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *CS2PlayerCurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerCurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CS2PlayerCurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{34}
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate) GetPayload() *CS2PlayerCurrentRoundStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CS2PlayerCurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                                `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerName string                                `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	SlotId     uint32                                `protobuf:"varint,6,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	Statistics *CS2PlayerCurrentRoundStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Items      *CS2PlayerItemsState                  `protobuf:"bytes,4,opt,name=items,proto3" json:"items,omitempty"`
	Position   *CS2PlayerPositionState               `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CS2PlayerCurrentRoundState) Reset() {
	*x = CS2PlayerCurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerCurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerCurrentRoundState) ProtoMessage() {}

func (x *CS2PlayerCurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerCurrentRoundState.ProtoReflect.Descriptor instead.
func (*CS2PlayerCurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{35}
}

func (x *CS2PlayerCurrentRoundState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerCurrentRoundState) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CS2PlayerCurrentRoundState) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *CS2PlayerCurrentRoundState) GetStatistics() *CS2PlayerCurrentRoundStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *CS2PlayerCurrentRoundState) GetItems() *CS2PlayerItemsState {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CS2PlayerCurrentRoundState) GetPosition() *CS2PlayerPositionState {
	if x != nil {
		return x.Position
	}
	return nil
}

type CS2PlayerCurrentRoundStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string               `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Alive      bool                 `protobuf:"varint,2,opt,name=alive,proto3" json:"alive,omitempty"`
	Health     uint32               `protobuf:"varint,3,opt,name=health,proto3" json:"health,omitempty"`
	Armor      uint32               `protobuf:"varint,4,opt,name=armor,proto3" json:"armor,omitempty"`
	Balance    uint32               `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
	Damage     *uint32              `protobuf:"varint,7,opt,name=damage,proto3,oneof" json:"damage,omitempty"`
	Statistics *CS2PlayerStatistics `protobuf:"bytes,6,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CS2PlayerCurrentRoundStatisticsState) Reset() {
	*x = CS2PlayerCurrentRoundStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerCurrentRoundStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerCurrentRoundStatisticsState) ProtoMessage() {}

func (x *CS2PlayerCurrentRoundStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerCurrentRoundStatisticsState.ProtoReflect.Descriptor instead.
func (*CS2PlayerCurrentRoundStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{36}
}

func (x *CS2PlayerCurrentRoundStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerCurrentRoundStatisticsState) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *CS2PlayerCurrentRoundStatisticsState) GetHealth() uint32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *CS2PlayerCurrentRoundStatisticsState) GetArmor() uint32 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *CS2PlayerCurrentRoundStatisticsState) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CS2PlayerCurrentRoundStatisticsState) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return 0
}

func (x *CS2PlayerCurrentRoundStatisticsState) GetStatistics() *CS2PlayerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CS2PlayerItemsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn      string     `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	EquipmentValue uint32     `protobuf:"varint,2,opt,name=equipment_value,json=equipmentValue,proto3" json:"equipment_value,omitempty"`
	Items          []*CS2Item `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CS2PlayerItemsState) Reset() {
	*x = CS2PlayerItemsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerItemsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerItemsState) ProtoMessage() {}

func (x *CS2PlayerItemsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerItemsState.ProtoReflect.Descriptor instead.
func (*CS2PlayerItemsState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{37}
}

func (x *CS2PlayerItemsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerItemsState) GetEquipmentValue() uint32 {
	if x != nil {
		return x.EquipmentValue
	}
	return 0
}

func (x *CS2PlayerItemsState) GetItems() []*CS2Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type CS2PlayerPreviousRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string               `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerName string               `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Statistics *CS2PlayerStatistics `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CS2PlayerPreviousRoundState) Reset() {
	*x = CS2PlayerPreviousRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerPreviousRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerPreviousRoundState) ProtoMessage() {}

func (x *CS2PlayerPreviousRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerPreviousRoundState.ProtoReflect.Descriptor instead.
func (*CS2PlayerPreviousRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{38}
}

func (x *CS2PlayerPreviousRoundState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerPreviousRoundState) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CS2PlayerPreviousRoundState) GetStatistics() *CS2PlayerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CS2PlayerPositionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string       `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Position  *CS2Position `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CS2PlayerPositionState) Reset() {
	*x = CS2PlayerPositionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerPositionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerPositionState) ProtoMessage() {}

func (x *CS2PlayerPositionState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerPositionState.ProtoReflect.Descriptor instead.
func (*CS2PlayerPositionState) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{39}
}

func (x *CS2PlayerPositionState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerPositionState) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type CS2PlayerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn     string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Kills         uint32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
	FriendlyKills uint32 `protobuf:"varint,3,opt,name=friendly_kills,json=friendlyKills,proto3" json:"friendly_kills,omitempty"`
	EnemyKills    uint32 `protobuf:"varint,4,opt,name=enemy_kills,json=enemyKills,proto3" json:"enemy_kills,omitempty"`
	SelfKills     uint32 `protobuf:"varint,5,opt,name=self_kills,json=selfKills,proto3" json:"self_kills,omitempty"`
	Deaths        uint32 `protobuf:"varint,6,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists       uint32 `protobuf:"varint,7,opt,name=assists,proto3" json:"assists,omitempty"`
	Headshots     uint32 `protobuf:"varint,8,opt,name=headshots,proto3" json:"headshots,omitempty"`
	// Deprecated: Do not use.
	Damage                    uint32  `protobuf:"varint,15,opt,name=damage,proto3" json:"damage,omitempty"` // use CS2PlayerMapStatisticsState.total_damage or CS2PlayerCurrentRoundStatisticsState.damage
	FriendlyDamageDealtArmor  *uint32 `protobuf:"varint,9,opt,name=friendly_damage_dealt_armor,json=friendlyDamageDealtArmor,proto3,oneof" json:"friendly_damage_dealt_armor,omitempty"`
	FriendlyDamageDealtHealth *uint32 `protobuf:"varint,10,opt,name=friendly_damage_dealt_health,json=friendlyDamageDealtHealth,proto3,oneof" json:"friendly_damage_dealt_health,omitempty"`
	EnemyDamageDealtArmor     *uint32 `protobuf:"varint,11,opt,name=enemy_damage_dealt_armor,json=enemyDamageDealtArmor,proto3,oneof" json:"enemy_damage_dealt_armor,omitempty"`
	EnemyDamageDealtHealth    *uint32 `protobuf:"varint,12,opt,name=enemy_damage_dealt_health,json=enemyDamageDealtHealth,proto3,oneof" json:"enemy_damage_dealt_health,omitempty"`
	EnemyDamageDealtArmorRaw  *uint32 `protobuf:"varint,13,opt,name=enemy_damage_dealt_armor_raw,json=enemyDamageDealtArmorRaw,proto3,oneof" json:"enemy_damage_dealt_armor_raw,omitempty"`
	EnemyDamageDealtHealthRaw *uint32 `protobuf:"varint,14,opt,name=enemy_damage_dealt_health_raw,json=enemyDamageDealtHealthRaw,proto3,oneof" json:"enemy_damage_dealt_health_raw,omitempty"`
}

func (x *CS2PlayerStatistics) Reset() {
	*x = CS2PlayerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerStatistics) ProtoMessage() {}

func (x *CS2PlayerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerStatistics.ProtoReflect.Descriptor instead.
func (*CS2PlayerStatistics) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{40}
}

func (x *CS2PlayerStatistics) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerStatistics) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *CS2PlayerStatistics) GetFriendlyKills() uint32 {
	if x != nil {
		return x.FriendlyKills
	}
	return 0
}

func (x *CS2PlayerStatistics) GetEnemyKills() uint32 {
	if x != nil {
		return x.EnemyKills
	}
	return 0
}

func (x *CS2PlayerStatistics) GetSelfKills() uint32 {
	if x != nil {
		return x.SelfKills
	}
	return 0
}

func (x *CS2PlayerStatistics) GetDeaths() uint32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *CS2PlayerStatistics) GetAssists() uint32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *CS2PlayerStatistics) GetHeadshots() uint32 {
	if x != nil {
		return x.Headshots
	}
	return 0
}

// Deprecated: Do not use.
func (x *CS2PlayerStatistics) GetDamage() uint32 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *CS2PlayerStatistics) GetFriendlyDamageDealtArmor() uint32 {
	if x != nil && x.FriendlyDamageDealtArmor != nil {
		return *x.FriendlyDamageDealtArmor
	}
	return 0
}

func (x *CS2PlayerStatistics) GetFriendlyDamageDealtHealth() uint32 {
	if x != nil && x.FriendlyDamageDealtHealth != nil {
		return *x.FriendlyDamageDealtHealth
	}
	return 0
}

func (x *CS2PlayerStatistics) GetEnemyDamageDealtArmor() uint32 {
	if x != nil && x.EnemyDamageDealtArmor != nil {
		return *x.EnemyDamageDealtArmor
	}
	return 0
}

func (x *CS2PlayerStatistics) GetEnemyDamageDealtHealth() uint32 {
	if x != nil && x.EnemyDamageDealtHealth != nil {
		return *x.EnemyDamageDealtHealth
	}
	return 0
}

func (x *CS2PlayerStatistics) GetEnemyDamageDealtArmorRaw() uint32 {
	if x != nil && x.EnemyDamageDealtArmorRaw != nil {
		return *x.EnemyDamageDealtArmorRaw
	}
	return 0
}

func (x *CS2PlayerStatistics) GetEnemyDamageDealtHealthRaw() uint32 {
	if x != nil && x.EnemyDamageDealtHealthRaw != nil {
		return *x.EnemyDamageDealtHealthRaw
	}
	return 0
}

type CS2Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated: Do not use.
	WeaponType CS2WeaponType `protobuf:"varint,2,opt,name=weapon_type,json=weaponType,proto3,enum=bragi.CS2WeaponType" json:"weapon_type,omitempty"`
	Type       CS2ItemType   `protobuf:"varint,5,opt,name=type,proto3,enum=bragi.CS2ItemType" json:"type,omitempty"`
	Count      uint32        `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	IsActive   bool          `protobuf:"varint,4,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *CS2Item) Reset() {
	*x = CS2Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2Item) ProtoMessage() {}

func (x *CS2Item) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2Item.ProtoReflect.Descriptor instead.
func (*CS2Item) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{41}
}

func (x *CS2Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *CS2Item) GetWeaponType() CS2WeaponType {
	if x != nil {
		return x.WeaponType
	}
	return CS2WeaponType_CS2_WEAPON_TYPE_UNSPECIFIED
}

func (x *CS2Item) GetType() CS2ItemType {
	if x != nil {
		return x.Type
	}
	return CS2ItemType_CS2_ITEM_TYPE_UNSPECIFIED
}

func (x *CS2Item) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CS2Item) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type CS2Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X     float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y     float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z     float32 `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"`
	Angle float32 `protobuf:"fixed32,3,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (x *CS2Position) Reset() {
	*x = CS2Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2Position) ProtoMessage() {}

func (x *CS2Position) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2Position.ProtoReflect.Descriptor instead.
func (*CS2Position) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{42}
}

func (x *CS2Position) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CS2Position) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CS2Position) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *CS2Position) GetAngle() float32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

// Deprecated: Do not use.
type CS2Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*CS2Event_BombDefuseStarted
	//	*CS2Event_BombDefused
	//	*CS2Event_BombExploded
	//	*CS2Event_BombPlantStarted
	//	*CS2Event_BombPlanted
	//	*CS2Event_DamageDealt
	//	*CS2Event_FreezeTimeEnded
	//	*CS2Event_FreezeTimeStarted
	//	*CS2Event_ItemDrop
	//	*CS2Event_ItemPickUp
	//	*CS2Event_ItemPurchase
	//	*CS2Event_ItemThrow
	//	*CS2Event_Kill
	//	*CS2Event_Death
	//	*CS2Event_MapEnd
	//	*CS2Event_MapStart
	//	*CS2Event_RoundEnd
	//	*CS2Event_RoundPause
	//	*CS2Event_RoundResume
	//	*CS2Event_RoundRollback
	//	*CS2Event_RoundStart
	Event isCS2Event_Event `protobuf_oneof:"event"`
}

func (x *CS2Event) Reset() {
	*x = CS2Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2Event) ProtoMessage() {}

func (x *CS2Event) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2Event.ProtoReflect.Descriptor instead.
func (*CS2Event) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{43}
}

func (m *CS2Event) GetEvent() isCS2Event_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *CS2Event) GetBombDefuseStarted() *CS2BombDefuseStarted {
	if x, ok := x.GetEvent().(*CS2Event_BombDefuseStarted); ok {
		return x.BombDefuseStarted
	}
	return nil
}

func (x *CS2Event) GetBombDefused() *CS2BombDefused {
	if x, ok := x.GetEvent().(*CS2Event_BombDefused); ok {
		return x.BombDefused
	}
	return nil
}

func (x *CS2Event) GetBombExploded() *CS2BombExploded {
	if x, ok := x.GetEvent().(*CS2Event_BombExploded); ok {
		return x.BombExploded
	}
	return nil
}

func (x *CS2Event) GetBombPlantStarted() *CS2BombPlantStarted {
	if x, ok := x.GetEvent().(*CS2Event_BombPlantStarted); ok {
		return x.BombPlantStarted
	}
	return nil
}

func (x *CS2Event) GetBombPlanted() *CS2BombPlanted {
	if x, ok := x.GetEvent().(*CS2Event_BombPlanted); ok {
		return x.BombPlanted
	}
	return nil
}

func (x *CS2Event) GetDamageDealt() *CS2DamageDealt {
	if x, ok := x.GetEvent().(*CS2Event_DamageDealt); ok {
		return x.DamageDealt
	}
	return nil
}

func (x *CS2Event) GetFreezeTimeEnded() *CS2FreezeTimeEnded {
	if x, ok := x.GetEvent().(*CS2Event_FreezeTimeEnded); ok {
		return x.FreezeTimeEnded
	}
	return nil
}

func (x *CS2Event) GetFreezeTimeStarted() *CS2FreezeTimeStarted {
	if x, ok := x.GetEvent().(*CS2Event_FreezeTimeStarted); ok {
		return x.FreezeTimeStarted
	}
	return nil
}

func (x *CS2Event) GetItemDrop() *CS2ItemDrop {
	if x, ok := x.GetEvent().(*CS2Event_ItemDrop); ok {
		return x.ItemDrop
	}
	return nil
}

func (x *CS2Event) GetItemPickUp() *CS2ItemPickUp {
	if x, ok := x.GetEvent().(*CS2Event_ItemPickUp); ok {
		return x.ItemPickUp
	}
	return nil
}

func (x *CS2Event) GetItemPurchase() *CS2ItemPurchase {
	if x, ok := x.GetEvent().(*CS2Event_ItemPurchase); ok {
		return x.ItemPurchase
	}
	return nil
}

func (x *CS2Event) GetItemThrow() *CS2ItemThrow {
	if x, ok := x.GetEvent().(*CS2Event_ItemThrow); ok {
		return x.ItemThrow
	}
	return nil
}

func (x *CS2Event) GetKill() *CS2Kill {
	if x, ok := x.GetEvent().(*CS2Event_Kill); ok {
		return x.Kill
	}
	return nil
}

func (x *CS2Event) GetDeath() *CS2Death {
	if x, ok := x.GetEvent().(*CS2Event_Death); ok {
		return x.Death
	}
	return nil
}

func (x *CS2Event) GetMapEnd() *CS2MapEnd {
	if x, ok := x.GetEvent().(*CS2Event_MapEnd); ok {
		return x.MapEnd
	}
	return nil
}

func (x *CS2Event) GetMapStart() *CS2MapStart {
	if x, ok := x.GetEvent().(*CS2Event_MapStart); ok {
		return x.MapStart
	}
	return nil
}

func (x *CS2Event) GetRoundEnd() *CS2RoundEnd {
	if x, ok := x.GetEvent().(*CS2Event_RoundEnd); ok {
		return x.RoundEnd
	}
	return nil
}

func (x *CS2Event) GetRoundPause() *CS2RoundPause {
	if x, ok := x.GetEvent().(*CS2Event_RoundPause); ok {
		return x.RoundPause
	}
	return nil
}

func (x *CS2Event) GetRoundResume() *CS2RoundResume {
	if x, ok := x.GetEvent().(*CS2Event_RoundResume); ok {
		return x.RoundResume
	}
	return nil
}

func (x *CS2Event) GetRoundRollback() *CS2RoundRollback {
	if x, ok := x.GetEvent().(*CS2Event_RoundRollback); ok {
		return x.RoundRollback
	}
	return nil
}

func (x *CS2Event) GetRoundStart() *CS2RoundStart {
	if x, ok := x.GetEvent().(*CS2Event_RoundStart); ok {
		return x.RoundStart
	}
	return nil
}

type isCS2Event_Event interface {
	isCS2Event_Event()
}

type CS2Event_BombDefuseStarted struct {
	BombDefuseStarted *CS2BombDefuseStarted `protobuf:"bytes,1,opt,name=bomb_defuse_started,json=bombDefuseStarted,proto3,oneof"`
}

type CS2Event_BombDefused struct {
	BombDefused *CS2BombDefused `protobuf:"bytes,2,opt,name=bomb_defused,json=bombDefused,proto3,oneof"`
}

type CS2Event_BombExploded struct {
	BombExploded *CS2BombExploded `protobuf:"bytes,3,opt,name=bomb_exploded,json=bombExploded,proto3,oneof"`
}

type CS2Event_BombPlantStarted struct {
	BombPlantStarted *CS2BombPlantStarted `protobuf:"bytes,21,opt,name=bomb_plant_started,json=bombPlantStarted,proto3,oneof"`
}

type CS2Event_BombPlanted struct {
	BombPlanted *CS2BombPlanted `protobuf:"bytes,4,opt,name=bomb_planted,json=bombPlanted,proto3,oneof"`
}

type CS2Event_DamageDealt struct {
	DamageDealt *CS2DamageDealt `protobuf:"bytes,5,opt,name=damage_dealt,json=damageDealt,proto3,oneof"`
}

type CS2Event_FreezeTimeEnded struct {
	FreezeTimeEnded *CS2FreezeTimeEnded `protobuf:"bytes,6,opt,name=freeze_time_ended,json=freezeTimeEnded,proto3,oneof"`
}

type CS2Event_FreezeTimeStarted struct {
	FreezeTimeStarted *CS2FreezeTimeStarted `protobuf:"bytes,7,opt,name=freeze_time_started,json=freezeTimeStarted,proto3,oneof"`
}

type CS2Event_ItemDrop struct {
	ItemDrop *CS2ItemDrop `protobuf:"bytes,8,opt,name=item_drop,json=itemDrop,proto3,oneof"`
}

type CS2Event_ItemPickUp struct {
	ItemPickUp *CS2ItemPickUp `protobuf:"bytes,9,opt,name=item_pick_up,json=itemPickUp,proto3,oneof"`
}

type CS2Event_ItemPurchase struct {
	ItemPurchase *CS2ItemPurchase `protobuf:"bytes,10,opt,name=item_purchase,json=itemPurchase,proto3,oneof"`
}

type CS2Event_ItemThrow struct {
	ItemThrow *CS2ItemThrow `protobuf:"bytes,11,opt,name=item_throw,json=itemThrow,proto3,oneof"`
}

type CS2Event_Kill struct {
	Kill *CS2Kill `protobuf:"bytes,12,opt,name=kill,proto3,oneof"`
}

type CS2Event_Death struct {
	Death *CS2Death `protobuf:"bytes,13,opt,name=death,proto3,oneof"`
}

type CS2Event_MapEnd struct {
	MapEnd *CS2MapEnd `protobuf:"bytes,14,opt,name=map_end,json=mapEnd,proto3,oneof"`
}

type CS2Event_MapStart struct {
	MapStart *CS2MapStart `protobuf:"bytes,15,opt,name=map_start,json=mapStart,proto3,oneof"`
}

type CS2Event_RoundEnd struct {
	RoundEnd *CS2RoundEnd `protobuf:"bytes,16,opt,name=round_end,json=roundEnd,proto3,oneof"`
}

type CS2Event_RoundPause struct {
	RoundPause *CS2RoundPause `protobuf:"bytes,17,opt,name=round_pause,json=roundPause,proto3,oneof"`
}

type CS2Event_RoundResume struct {
	RoundResume *CS2RoundResume `protobuf:"bytes,18,opt,name=round_resume,json=roundResume,proto3,oneof"`
}

type CS2Event_RoundRollback struct {
	RoundRollback *CS2RoundRollback `protobuf:"bytes,19,opt,name=round_rollback,json=roundRollback,proto3,oneof"`
}

type CS2Event_RoundStart struct {
	RoundStart *CS2RoundStart `protobuf:"bytes,20,opt,name=round_start,json=roundStart,proto3,oneof"`
}

func (*CS2Event_BombDefuseStarted) isCS2Event_Event() {}

func (*CS2Event_BombDefused) isCS2Event_Event() {}

func (*CS2Event_BombExploded) isCS2Event_Event() {}

func (*CS2Event_BombPlantStarted) isCS2Event_Event() {}

func (*CS2Event_BombPlanted) isCS2Event_Event() {}

func (*CS2Event_DamageDealt) isCS2Event_Event() {}

func (*CS2Event_FreezeTimeEnded) isCS2Event_Event() {}

func (*CS2Event_FreezeTimeStarted) isCS2Event_Event() {}

func (*CS2Event_ItemDrop) isCS2Event_Event() {}

func (*CS2Event_ItemPickUp) isCS2Event_Event() {}

func (*CS2Event_ItemPurchase) isCS2Event_Event() {}

func (*CS2Event_ItemThrow) isCS2Event_Event() {}

func (*CS2Event_Kill) isCS2Event_Event() {}

func (*CS2Event_Death) isCS2Event_Event() {}

func (*CS2Event_MapEnd) isCS2Event_Event() {}

func (*CS2Event_MapStart) isCS2Event_Event() {}

func (*CS2Event_RoundEnd) isCS2Event_Event() {}

func (*CS2Event_RoundPause) isCS2Event_Event() {}

func (*CS2Event_RoundResume) isCS2Event_Event() {}

func (*CS2Event_RoundRollback) isCS2Event_Event() {}

func (*CS2Event_RoundStart) isCS2Event_Event() {}

type CS2PlayerBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn   string `protobuf:"bytes,2,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Balance   uint32 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *CS2PlayerBalance) Reset() {
	*x = CS2PlayerBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerBalance) ProtoMessage() {}

func (x *CS2PlayerBalance) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerBalance.ProtoReflect.Descriptor instead.
func (*CS2PlayerBalance) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{44}
}

func (x *CS2PlayerBalance) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerBalance) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2PlayerBalance) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type CS2PlayerItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn      string     `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn        string     `protobuf:"bytes,2,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	EquipmentValue uint32     `protobuf:"varint,3,opt,name=equipment_value,json=equipmentValue,proto3" json:"equipment_value,omitempty"`
	Items          []*CS2Item `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CS2PlayerItems) Reset() {
	*x = CS2PlayerItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerItems) ProtoMessage() {}

func (x *CS2PlayerItems) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerItems.ProtoReflect.Descriptor instead.
func (*CS2PlayerItems) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{45}
}

func (x *CS2PlayerItems) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2PlayerItems) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2PlayerItems) GetEquipmentValue() uint32 {
	if x != nil {
		return x.EquipmentValue
	}
	return 0
}

func (x *CS2PlayerItems) GetItems() []*CS2Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type CS2BombDefuseStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
}

func (x *CS2BombDefuseStarted) Reset() {
	*x = CS2BombDefuseStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombDefuseStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombDefuseStarted) ProtoMessage() {}

func (x *CS2BombDefuseStarted) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombDefuseStarted.ProtoReflect.Descriptor instead.
func (*CS2BombDefuseStarted) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{46}
}

func (x *CS2BombDefuseStarted) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2BombDefuseStarted) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2BombDefuseStarted) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2BombDefuseStarted) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2BombDefuseStarted) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

type CS2BombDefused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
}

func (x *CS2BombDefused) Reset() {
	*x = CS2BombDefused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombDefused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombDefused) ProtoMessage() {}

func (x *CS2BombDefused) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombDefused.ProtoReflect.Descriptor instead.
func (*CS2BombDefused) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{47}
}

func (x *CS2BombDefused) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2BombDefused) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2BombDefused) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2BombDefused) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2BombDefused) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

type CS2BombExploded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
}

func (x *CS2BombExploded) Reset() {
	*x = CS2BombExploded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombExploded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombExploded) ProtoMessage() {}

func (x *CS2BombExploded) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombExploded.ProtoReflect.Descriptor instead.
func (*CS2BombExploded) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{48}
}

func (x *CS2BombExploded) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2BombExploded) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2BombExploded) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

type CS2BombPlantStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
}

func (x *CS2BombPlantStarted) Reset() {
	*x = CS2BombPlantStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombPlantStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombPlantStarted) ProtoMessage() {}

func (x *CS2BombPlantStarted) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombPlantStarted.ProtoReflect.Descriptor instead.
func (*CS2BombPlantStarted) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{49}
}

func (x *CS2BombPlantStarted) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2BombPlantStarted) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2BombPlantStarted) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2BombPlantStarted) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2BombPlantStarted) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

type CS2BombPlanted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
}

func (x *CS2BombPlanted) Reset() {
	*x = CS2BombPlanted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2BombPlanted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2BombPlanted) ProtoMessage() {}

func (x *CS2BombPlanted) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2BombPlanted.ProtoReflect.Descriptor instead.
func (*CS2BombPlanted) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{50}
}

func (x *CS2BombPlanted) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2BombPlanted) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2BombPlanted) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2BombPlanted) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2BombPlanted) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

type CS2DamageDealt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	KillerPosition     *CS2Position         `protobuf:"bytes,4,opt,name=killer_position,json=killerPosition,proto3" json:"killer_position,omitempty"`
	KillerUrn          string               `protobuf:"bytes,5,opt,name=killer_urn,json=killerUrn,proto3" json:"killer_urn,omitempty"`
	KillerTeamUrn      string               `protobuf:"bytes,6,opt,name=killer_team_urn,json=killerTeamUrn,proto3" json:"killer_team_urn,omitempty"`
	VictimUrn          string               `protobuf:"bytes,7,opt,name=victim_urn,json=victimUrn,proto3" json:"victim_urn,omitempty"`
	VictimTeamUrn      string               `protobuf:"bytes,8,opt,name=victim_team_urn,json=victimTeamUrn,proto3" json:"victim_team_urn,omitempty"`
	Weapon             string               `protobuf:"bytes,9,opt,name=weapon,proto3" json:"weapon,omitempty"`
	Hitgroup           string               `protobuf:"bytes,10,opt,name=hitgroup,proto3" json:"hitgroup,omitempty"`
	HealthDeducted     uint32               `protobuf:"varint,11,opt,name=health_deducted,json=healthDeducted,proto3" json:"health_deducted,omitempty"`
	HealthRemaining    uint32               `protobuf:"varint,12,opt,name=health_remaining,json=healthRemaining,proto3" json:"health_remaining,omitempty"`
	ArmorDeducted      uint32               `protobuf:"varint,13,opt,name=armor_deducted,json=armorDeducted,proto3" json:"armor_deducted,omitempty"`
	ArmorRemaining     uint32               `protobuf:"varint,14,opt,name=armor_remaining,json=armorRemaining,proto3" json:"armor_remaining,omitempty"`
	VictimPosition     *CS2Position         `protobuf:"bytes,15,opt,name=victim_position,json=victimPosition,proto3" json:"victim_position,omitempty"`
}

func (x *CS2DamageDealt) Reset() {
	*x = CS2DamageDealt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2DamageDealt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2DamageDealt) ProtoMessage() {}

func (x *CS2DamageDealt) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2DamageDealt.ProtoReflect.Descriptor instead.
func (*CS2DamageDealt) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{51}
}

func (x *CS2DamageDealt) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2DamageDealt) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2DamageDealt) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2DamageDealt) GetKillerPosition() *CS2Position {
	if x != nil {
		return x.KillerPosition
	}
	return nil
}

func (x *CS2DamageDealt) GetKillerUrn() string {
	if x != nil {
		return x.KillerUrn
	}
	return ""
}

func (x *CS2DamageDealt) GetKillerTeamUrn() string {
	if x != nil {
		return x.KillerTeamUrn
	}
	return ""
}

func (x *CS2DamageDealt) GetVictimUrn() string {
	if x != nil {
		return x.VictimUrn
	}
	return ""
}

func (x *CS2DamageDealt) GetVictimTeamUrn() string {
	if x != nil {
		return x.VictimTeamUrn
	}
	return ""
}

func (x *CS2DamageDealt) GetWeapon() string {
	if x != nil {
		return x.Weapon
	}
	return ""
}

func (x *CS2DamageDealt) GetHitgroup() string {
	if x != nil {
		return x.Hitgroup
	}
	return ""
}

func (x *CS2DamageDealt) GetHealthDeducted() uint32 {
	if x != nil {
		return x.HealthDeducted
	}
	return 0
}

func (x *CS2DamageDealt) GetHealthRemaining() uint32 {
	if x != nil {
		return x.HealthRemaining
	}
	return 0
}

func (x *CS2DamageDealt) GetArmorDeducted() uint32 {
	if x != nil {
		return x.ArmorDeducted
	}
	return 0
}

func (x *CS2DamageDealt) GetArmorRemaining() uint32 {
	if x != nil {
		return x.ArmorRemaining
	}
	return 0
}

func (x *CS2DamageDealt) GetVictimPosition() *CS2Position {
	if x != nil {
		return x.VictimPosition
	}
	return nil
}

type CS2FreezeTimeEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration         `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration         `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32                       `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerBalances     map[string]*CS2PlayerBalance `protobuf:"bytes,4,rep,name=player_balances,json=playerBalances,proto3" json:"player_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          // keys are type of player_urn
	PlayerInventories  map[string]*CS2PlayerItems   `protobuf:"bytes,5,rep,name=player_inventories,json=playerInventories,proto3" json:"player_inventories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CS2FreezeTimeEnded) Reset() {
	*x = CS2FreezeTimeEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2FreezeTimeEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2FreezeTimeEnded) ProtoMessage() {}

func (x *CS2FreezeTimeEnded) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2FreezeTimeEnded.ProtoReflect.Descriptor instead.
func (*CS2FreezeTimeEnded) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{52}
}

func (x *CS2FreezeTimeEnded) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2FreezeTimeEnded) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2FreezeTimeEnded) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2FreezeTimeEnded) GetPlayerBalances() map[string]*CS2PlayerBalance {
	if x != nil {
		return x.PlayerBalances
	}
	return nil
}

func (x *CS2FreezeTimeEnded) GetPlayerInventories() map[string]*CS2PlayerItems {
	if x != nil {
		return x.PlayerInventories
	}
	return nil
}

type CS2FreezeTimeStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration         `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration         `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32                       `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerBalances     map[string]*CS2PlayerBalance `protobuf:"bytes,4,rep,name=player_balances,json=playerBalances,proto3" json:"player_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                       // keys are type of player_urn
	TeamsRoundInfo     map[string]CS2Side           `protobuf:"bytes,5,rep,name=teams_round_info,json=teamsRoundInfo,proto3" json:"teams_round_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=bragi.CS2Side"` // keys are type of team_urn
}

func (x *CS2FreezeTimeStarted) Reset() {
	*x = CS2FreezeTimeStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2FreezeTimeStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2FreezeTimeStarted) ProtoMessage() {}

func (x *CS2FreezeTimeStarted) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2FreezeTimeStarted.ProtoReflect.Descriptor instead.
func (*CS2FreezeTimeStarted) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{53}
}

func (x *CS2FreezeTimeStarted) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2FreezeTimeStarted) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2FreezeTimeStarted) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2FreezeTimeStarted) GetPlayerBalances() map[string]*CS2PlayerBalance {
	if x != nil {
		return x.PlayerBalances
	}
	return nil
}

func (x *CS2FreezeTimeStarted) GetTeamsRoundInfo() map[string]CS2Side {
	if x != nil {
		return x.TeamsRoundInfo
	}
	return nil
}

type CS2ItemDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	Position           *CS2Position         `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,5,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,6,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Item               string               `protobuf:"bytes,7,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CS2ItemDrop) Reset() {
	*x = CS2ItemDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2ItemDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2ItemDrop) ProtoMessage() {}

func (x *CS2ItemDrop) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2ItemDrop.ProtoReflect.Descriptor instead.
func (*CS2ItemDrop) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{54}
}

func (x *CS2ItemDrop) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2ItemDrop) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2ItemDrop) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2ItemDrop) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS2ItemDrop) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2ItemDrop) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2ItemDrop) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type CS2ItemPickUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Item               string               `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CS2ItemPickUp) Reset() {
	*x = CS2ItemPickUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2ItemPickUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2ItemPickUp) ProtoMessage() {}

func (x *CS2ItemPickUp) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2ItemPickUp.ProtoReflect.Descriptor instead.
func (*CS2ItemPickUp) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{55}
}

func (x *CS2ItemPickUp) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2ItemPickUp) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2ItemPickUp) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2ItemPickUp) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2ItemPickUp) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2ItemPickUp) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type CS2ItemPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Item               string               `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"`
	PlayerBalance      uint32               `protobuf:"varint,7,opt,name=player_balance,json=playerBalance,proto3" json:"player_balance,omitempty"`
	EquipmentValue     uint32               `protobuf:"varint,8,opt,name=equipment_value,json=equipmentValue,proto3" json:"equipment_value,omitempty"`
}

func (x *CS2ItemPurchase) Reset() {
	*x = CS2ItemPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2ItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2ItemPurchase) ProtoMessage() {}

func (x *CS2ItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2ItemPurchase.ProtoReflect.Descriptor instead.
func (*CS2ItemPurchase) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{56}
}

func (x *CS2ItemPurchase) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2ItemPurchase) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2ItemPurchase) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2ItemPurchase) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2ItemPurchase) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2ItemPurchase) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *CS2ItemPurchase) GetPlayerBalance() uint32 {
	if x != nil {
		return x.PlayerBalance
	}
	return 0
}

func (x *CS2ItemPurchase) GetEquipmentValue() uint32 {
	if x != nil {
		return x.EquipmentValue
	}
	return 0
}

type CS2ItemThrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	Position           *CS2Position         `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,5,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,6,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Item               string               `protobuf:"bytes,7,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CS2ItemThrow) Reset() {
	*x = CS2ItemThrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2ItemThrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2ItemThrow) ProtoMessage() {}

func (x *CS2ItemThrow) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2ItemThrow.ProtoReflect.Descriptor instead.
func (*CS2ItemThrow) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{57}
}

func (x *CS2ItemThrow) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2ItemThrow) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2ItemThrow) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2ItemThrow) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS2ItemThrow) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2ItemThrow) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2ItemThrow) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type CS2Kill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	KillerPosition     *CS2Position         `protobuf:"bytes,4,opt,name=killer_position,json=killerPosition,proto3" json:"killer_position,omitempty"`
	KillerUrn          string               `protobuf:"bytes,5,opt,name=killer_urn,json=killerUrn,proto3" json:"killer_urn,omitempty"`
	KillerTeamUrn      string               `protobuf:"bytes,6,opt,name=killer_team_urn,json=killerTeamUrn,proto3" json:"killer_team_urn,omitempty"`
	VictimUrn          string               `protobuf:"bytes,7,opt,name=victim_urn,json=victimUrn,proto3" json:"victim_urn,omitempty"`
	VictimTeamUrn      string               `protobuf:"bytes,8,opt,name=victim_team_urn,json=victimTeamUrn,proto3" json:"victim_team_urn,omitempty"`
	Weapon             string               `protobuf:"bytes,9,opt,name=weapon,proto3" json:"weapon,omitempty"`
	Headshot           bool                 `protobuf:"varint,10,opt,name=headshot,proto3" json:"headshot,omitempty"`
	Penetrated         bool                 `protobuf:"varint,11,opt,name=penetrated,proto3" json:"penetrated,omitempty"`
	Assistants         []string             `protobuf:"bytes,12,rep,name=assistants,proto3" json:"assistants,omitempty"` // array of player_urns
}

func (x *CS2Kill) Reset() {
	*x = CS2Kill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2Kill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2Kill) ProtoMessage() {}

func (x *CS2Kill) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2Kill.ProtoReflect.Descriptor instead.
func (*CS2Kill) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{58}
}

func (x *CS2Kill) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2Kill) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2Kill) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2Kill) GetKillerPosition() *CS2Position {
	if x != nil {
		return x.KillerPosition
	}
	return nil
}

func (x *CS2Kill) GetKillerUrn() string {
	if x != nil {
		return x.KillerUrn
	}
	return ""
}

func (x *CS2Kill) GetKillerTeamUrn() string {
	if x != nil {
		return x.KillerTeamUrn
	}
	return ""
}

func (x *CS2Kill) GetVictimUrn() string {
	if x != nil {
		return x.VictimUrn
	}
	return ""
}

func (x *CS2Kill) GetVictimTeamUrn() string {
	if x != nil {
		return x.VictimTeamUrn
	}
	return ""
}

func (x *CS2Kill) GetWeapon() string {
	if x != nil {
		return x.Weapon
	}
	return ""
}

func (x *CS2Kill) GetHeadshot() bool {
	if x != nil {
		return x.Headshot
	}
	return false
}

func (x *CS2Kill) GetPenetrated() bool {
	if x != nil {
		return x.Penetrated
	}
	return false
}

func (x *CS2Kill) GetAssistants() []string {
	if x != nil {
		return x.Assistants
	}
	return nil
}

type CS2Death struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	Position           *CS2Position         `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,5,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,6,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	TotalDeaths        uint32               `protobuf:"varint,7,opt,name=total_deaths,json=totalDeaths,proto3" json:"total_deaths,omitempty"`
	Suicide            bool                 `protobuf:"varint,9,opt,name=suicide,proto3" json:"suicide,omitempty"`
	DeathByBomb        bool                 `protobuf:"varint,10,opt,name=death_by_bomb,json=deathByBomb,proto3" json:"death_by_bomb,omitempty"`
}

func (x *CS2Death) Reset() {
	*x = CS2Death{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2Death) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2Death) ProtoMessage() {}

func (x *CS2Death) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2Death.ProtoReflect.Descriptor instead.
func (*CS2Death) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{59}
}

func (x *CS2Death) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2Death) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2Death) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2Death) GetPosition() *CS2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CS2Death) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CS2Death) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CS2Death) GetTotalDeaths() uint32 {
	if x != nil {
		return x.TotalDeaths
	}
	return 0
}

func (x *CS2Death) GetSuicide() bool {
	if x != nil {
		return x.Suicide
	}
	return false
}

func (x *CS2Death) GetDeathByBomb() bool {
	if x != nil {
		return x.DeathByBomb
	}
	return false
}

type CS2MapEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	MapName            string               `protobuf:"bytes,4,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	WinningTeamUrn     string               `protobuf:"bytes,5,opt,name=winning_team_urn,json=winningTeamUrn,proto3" json:"winning_team_urn,omitempty"`
}

func (x *CS2MapEnd) Reset() {
	*x = CS2MapEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MapEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MapEnd) ProtoMessage() {}

func (x *CS2MapEnd) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MapEnd.ProtoReflect.Descriptor instead.
func (*CS2MapEnd) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{60}
}

func (x *CS2MapEnd) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2MapEnd) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2MapEnd) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *CS2MapEnd) GetWinningTeamUrn() string {
	if x != nil {
		return x.WinningTeamUrn
	}
	return ""
}

type CS2MapStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	MapName string               `protobuf:"bytes,2,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
}

func (x *CS2MapStart) Reset() {
	*x = CS2MapStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MapStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MapStart) ProtoMessage() {}

func (x *CS2MapStart) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MapStart.ProtoReflect.Descriptor instead.
func (*CS2MapStart) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{61}
}

func (x *CS2MapStart) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2MapStart) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

type CS2RoundEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration         `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration         `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32                       `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	WinningTeamUrn     string                       `protobuf:"bytes,4,opt,name=winning_team_urn,json=winningTeamUrn,proto3" json:"winning_team_urn,omitempty"`
	WinReason          CS2WinReason                 `protobuf:"varint,5,opt,name=win_reason,json=winReason,proto3,enum=bragi.CS2WinReason" json:"win_reason,omitempty"`
	PlayerBalances     map[string]*CS2PlayerBalance `protobuf:"bytes,6,rep,name=player_balances,json=playerBalances,proto3" json:"player_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          // keys are type of player_urn
	PlayerInventories  map[string]*CS2PlayerItems   `protobuf:"bytes,7,rep,name=player_inventories,json=playerInventories,proto3" json:"player_inventories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CS2RoundEnd) Reset() {
	*x = CS2RoundEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2RoundEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2RoundEnd) ProtoMessage() {}

func (x *CS2RoundEnd) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2RoundEnd.ProtoReflect.Descriptor instead.
func (*CS2RoundEnd) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{62}
}

func (x *CS2RoundEnd) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2RoundEnd) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2RoundEnd) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CS2RoundEnd) GetWinningTeamUrn() string {
	if x != nil {
		return x.WinningTeamUrn
	}
	return ""
}

func (x *CS2RoundEnd) GetWinReason() CS2WinReason {
	if x != nil {
		return x.WinReason
	}
	return CS2WinReason_CS2_WIN_REASON_UNSPECIFIED
}

func (x *CS2RoundEnd) GetPlayerBalances() map[string]*CS2PlayerBalance {
	if x != nil {
		return x.PlayerBalances
	}
	return nil
}

func (x *CS2RoundEnd) GetPlayerInventories() map[string]*CS2PlayerItems {
	if x != nil {
		return x.PlayerInventories
	}
	return nil
}

type CS2RoundPause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
}

func (x *CS2RoundPause) Reset() {
	*x = CS2RoundPause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2RoundPause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2RoundPause) ProtoMessage() {}

func (x *CS2RoundPause) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2RoundPause.ProtoReflect.Descriptor instead.
func (*CS2RoundPause) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{63}
}

func (x *CS2RoundPause) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2RoundPause) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2RoundPause) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

type CS2RoundResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
}

func (x *CS2RoundResume) Reset() {
	*x = CS2RoundResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2RoundResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2RoundResume) ProtoMessage() {}

func (x *CS2RoundResume) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2RoundResume.ProtoReflect.Descriptor instead.
func (*CS2RoundResume) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{64}
}

func (x *CS2RoundResume) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2RoundResume) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2RoundResume) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

type CS2RoundRollback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRoundNumber uint32 `protobuf:"varint,1,opt,name=next_round_number,json=nextRoundNumber,proto3" json:"next_round_number,omitempty"`
}

func (x *CS2RoundRollback) Reset() {
	*x = CS2RoundRollback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2RoundRollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2RoundRollback) ProtoMessage() {}

func (x *CS2RoundRollback) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2RoundRollback.ProtoReflect.Descriptor instead.
func (*CS2RoundRollback) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{65}
}

func (x *CS2RoundRollback) GetNextRoundNumber() uint32 {
	if x != nil {
		return x.NextRoundNumber
	}
	return 0
}

type CS2RoundStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
}

func (x *CS2RoundStart) Reset() {
	*x = CS2RoundStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2RoundStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2RoundStart) ProtoMessage() {}

func (x *CS2RoundStart) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2RoundStart.ProtoReflect.Descriptor instead.
func (*CS2RoundStart) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{66}
}

func (x *CS2RoundStart) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CS2RoundStart) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CS2RoundStart) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

type CS2MatchMessage_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CS2MatchMessage_Payload_Snapshot
	//	*CS2MatchMessage_Payload_Update
	Payload isCS2MatchMessage_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CS2MatchMessage_Payload) Reset() {
	*x = CS2MatchMessage_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchMessage_Payload) ProtoMessage() {}

func (x *CS2MatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*CS2MatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{0, 0}
}

func (m *CS2MatchMessage_Payload) GetPayload() isCS2MatchMessage_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CS2MatchMessage_Payload) GetSnapshot() *CS2MatchSnapshot {
	if x, ok := x.GetPayload().(*CS2MatchMessage_Payload_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *CS2MatchMessage_Payload) GetUpdate() *CS2MatchUpdate {
	if x, ok := x.GetPayload().(*CS2MatchMessage_Payload_Update); ok {
		return x.Update
	}
	return nil
}

type isCS2MatchMessage_Payload_Payload interface {
	isCS2MatchMessage_Payload_Payload()
}

type CS2MatchMessage_Payload_Snapshot struct {
	// Initial snapshot
	Snapshot *CS2MatchSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type CS2MatchMessage_Payload_Update struct {
	// Particular updates which are applied on property match_state in MatchState.
	Update *CS2MatchUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*CS2MatchMessage_Payload_Snapshot) isCS2MatchMessage_Payload_Payload() {}

func (*CS2MatchMessage_Payload_Update) isCS2MatchMessage_Payload_Payload() {}

type CS2MatchUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CS2MatchUpdate_Payload_MatchState
	//	*CS2MatchUpdate_Payload_PartialUpdates
	Payload isCS2MatchUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CS2MatchUpdate_Payload) Reset() {
	*x = CS2MatchUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2MatchUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2MatchUpdate_Payload) ProtoMessage() {}

func (x *CS2MatchUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2MatchUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CS2MatchUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{2, 0}
}

func (m *CS2MatchUpdate_Payload) GetPayload() isCS2MatchUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CS2MatchUpdate_Payload) GetMatchState() *CS2MatchState {
	if x, ok := x.GetPayload().(*CS2MatchUpdate_Payload_MatchState); ok {
		return x.MatchState
	}
	return nil
}

func (x *CS2MatchUpdate_Payload) GetPartialUpdates() *CS2MatchStatePartialUpdates {
	if x, ok := x.GetPayload().(*CS2MatchUpdate_Payload_PartialUpdates); ok {
		return x.PartialUpdates
	}
	return nil
}

type isCS2MatchUpdate_Payload_Payload interface {
	isCS2MatchUpdate_Payload_Payload()
}

type CS2MatchUpdate_Payload_MatchState struct {
	MatchState *CS2MatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3,oneof"`
}

type CS2MatchUpdate_Payload_PartialUpdates struct {
	PartialUpdates *CS2MatchStatePartialUpdates `protobuf:"bytes,2,opt,name=partial_updates,json=partialUpdates,proto3,oneof"`
}

func (*CS2MatchUpdate_Payload_MatchState) isCS2MatchUpdate_Payload_Payload() {}

func (*CS2MatchUpdate_Payload_PartialUpdates) isCS2MatchUpdate_Payload_Payload() {}

type CS2TeamMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CS2TeamMapStatePartialUpdate_Payload_PlayerState
	//	*CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate
	Payload isCS2TeamMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CS2TeamMapStatePartialUpdate_Payload) Reset() {
	*x = CS2TeamMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2TeamMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2TeamMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *CS2TeamMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2TeamMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CS2TeamMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{26, 0}
}

func (m *CS2TeamMapStatePartialUpdate_Payload) GetPayload() isCS2TeamMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CS2TeamMapStatePartialUpdate_Payload) GetPlayerState() *CS2PlayerMapState {
	if x, ok := x.GetPayload().(*CS2TeamMapStatePartialUpdate_Payload_PlayerState); ok {
		return x.PlayerState
	}
	return nil
}

func (x *CS2TeamMapStatePartialUpdate_Payload) GetPlayerMapStatesPartialUpdate() *CS2PlayerMapStatePartialUpdate {
	if x, ok := x.GetPayload().(*CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate); ok {
		return x.PlayerMapStatesPartialUpdate
	}
	return nil
}

type isCS2TeamMapStatePartialUpdate_Payload_Payload interface {
	isCS2TeamMapStatePartialUpdate_Payload_Payload()
}

type CS2TeamMapStatePartialUpdate_Payload_PlayerState struct {
	// Replaces whole value under given key in player_map_states map property in CS2TeamMapState.
	PlayerState *CS2PlayerMapState `protobuf:"bytes,2,opt,name=player_state,json=playerState,proto3,oneof"`
}

type CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate struct {
	// Apply partial update on value under given key in player_map_states map property in CS2TeamMapState.
	PlayerMapStatesPartialUpdate *CS2PlayerMapStatePartialUpdate `protobuf:"bytes,1,opt,name=player_map_states_partial_update,json=playerMapStatesPartialUpdate,proto3,oneof"`
}

func (*CS2TeamMapStatePartialUpdate_Payload_PlayerState) isCS2TeamMapStatePartialUpdate_Payload_Payload() {
}

func (*CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate) isCS2TeamMapStatePartialUpdate_Payload_Payload() {
}

type CS2TeamCurrentRoundStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState
	//	*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate
	Payload isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CS2TeamCurrentRoundStatePartialUpdate_Payload) Reset() {
	*x = CS2TeamCurrentRoundStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2TeamCurrentRoundStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2TeamCurrentRoundStatePartialUpdate_Payload) ProtoMessage() {}

func (x *CS2TeamCurrentRoundStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2TeamCurrentRoundStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CS2TeamCurrentRoundStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{28, 0}
}

func (m *CS2TeamCurrentRoundStatePartialUpdate_Payload) GetPayload() isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CS2TeamCurrentRoundStatePartialUpdate_Payload) GetPlayerState() *CS2PlayerCurrentRoundState {
	if x, ok := x.GetPayload().(*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState); ok {
		return x.PlayerState
	}
	return nil
}

func (x *CS2TeamCurrentRoundStatePartialUpdate_Payload) GetPlayerRoundStatesPartialUpdate() *CS2PlayerCurrentRoundStatePartialUpdate {
	if x, ok := x.GetPayload().(*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate); ok {
		return x.PlayerRoundStatesPartialUpdate
	}
	return nil
}

type isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload interface {
	isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload()
}

type CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState struct {
	// Replaces whole value under given key in player_round_states map property in CS2TeamCurrentRoundState
	PlayerState *CS2PlayerCurrentRoundState `protobuf:"bytes,2,opt,name=player_state,json=playerState,proto3,oneof"`
}

type CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate struct {
	// Apply partial update on value under given key in player_round_states map property in CS2TeamCurrentRoundState.
	PlayerRoundStatesPartialUpdate *CS2PlayerCurrentRoundStatePartialUpdate `protobuf:"bytes,1,opt,name=player_round_states_partial_update,json=playerRoundStatesPartialUpdate,proto3,oneof"`
}

func (*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState) isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate) isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload() {
}

type CS2PlayerMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CS2PlayerMapStatePartialUpdate_Payload_Statistics
	Payload isCS2PlayerMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CS2PlayerMapStatePartialUpdate_Payload) Reset() {
	*x = CS2PlayerMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *CS2PlayerMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CS2PlayerMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{31, 0}
}

func (m *CS2PlayerMapStatePartialUpdate_Payload) GetPayload() isCS2PlayerMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CS2PlayerMapStatePartialUpdate_Payload) GetStatistics() *CS2PlayerMapStatisticsState {
	if x, ok := x.GetPayload().(*CS2PlayerMapStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

type isCS2PlayerMapStatePartialUpdate_Payload_Payload interface {
	isCS2PlayerMapStatePartialUpdate_Payload_Payload()
}

type CS2PlayerMapStatePartialUpdate_Payload_Statistics struct {
	// Apply partial update on value under given key in 'statistics' map property in CS2PlayerMapState.
	Statistics *CS2PlayerMapStatisticsState `protobuf:"bytes,1,opt,name=statistics,proto3,oneof"`
}

func (*CS2PlayerMapStatePartialUpdate_Payload_Statistics) isCS2PlayerMapStatePartialUpdate_Payload_Payload() {
}

type CS2PlayerCurrentRoundStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics
	//	*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items
	//	*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position
	Payload isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate_Payload) Reset() {
	*x = CS2PlayerCurrentRoundStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_cs2_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CS2PlayerCurrentRoundStatePartialUpdate_Payload) ProtoMessage() {}

func (x *CS2PlayerCurrentRoundStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_cs2_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CS2PlayerCurrentRoundStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CS2PlayerCurrentRoundStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_cs2_proto_rawDescGZIP(), []int{34, 0}
}

func (m *CS2PlayerCurrentRoundStatePartialUpdate_Payload) GetPayload() isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate_Payload) GetStatistics() *CS2PlayerCurrentRoundStatisticsState {
	if x, ok := x.GetPayload().(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate_Payload) GetItems() *CS2PlayerItemsState {
	if x, ok := x.GetPayload().(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items); ok {
		return x.Items
	}
	return nil
}

func (x *CS2PlayerCurrentRoundStatePartialUpdate_Payload) GetPosition() *CS2PlayerPositionState {
	if x, ok := x.GetPayload().(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position); ok {
		return x.Position
	}
	return nil
}

type isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload interface {
	isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload()
}

type CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics struct {
	// Replaces "statistics" property in CS2PlayerCurrentRoundState.
	Statistics *CS2PlayerCurrentRoundStatisticsState `protobuf:"bytes,1,opt,name=statistics,proto3,oneof"`
}

type CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items struct {
	// Replaces "items" property in CS2PlayerCurrentRoundState.
	Items *CS2PlayerItemsState `protobuf:"bytes,2,opt,name=items,proto3,oneof"`
}

type CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position struct {
	// Replaces "position" property in CS2PlayerCurrentRoundState.
	Position *CS2PlayerPositionState `protobuf:"bytes,3,opt,name=position,proto3,oneof"`
}

func (*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics) isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items) isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position) isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

var File_bragi_cs2_proto protoreflect.FileDescriptor

var file_bragi_cs2_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x63, 0x73, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x62, 0x72, 0x61, 0x67, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x02,
	0x0a, 0x0f, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x7c, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x35, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xab, 0x02, 0x0a, 0x10, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x95,
	0x02, 0x0a, 0x0e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5a, 0x0a, 0x1b, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x0d, 0x43, 0x53,
	0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x77,
	0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x22, 0x52, 0x0a, 0x12, 0x43,
	0x53, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x41, 0x0a, 0x07, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xbc, 0x03, 0x0a, 0x1f, 0x43, 0x53, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d,
	0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x1e,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32,
	0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x65, 0x61,
	0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0xdb, 0x03, 0x0a, 0x12, 0x43, 0x53, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x70, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x4b, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a,
	0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x53, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xff, 0x02, 0x0a, 0x13, 0x43, 0x53, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x70, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xaf, 0x05, 0x0a, 0x0f, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x14, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x4e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x4c, 0x0a, 0x12, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x10, 0x62, 0x6f, 0x6d, 0x62, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x70, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0a, 0x77, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x72, 0x6e, 0x22, 0x50, 0x0a, 0x10, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x21, 0x43, 0x53, 0x32, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x62,
	0x6f, 0x6d, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x14, 0x43, 0x53, 0x32,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32,
	0x42, 0x6f, 0x6d, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x98, 0x02, 0x0a, 0x15, 0x43, 0x53, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a,
	0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x0f,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x03,
	0x0a, 0x11, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x09, 0x77,
	0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x07, 0x68, 0x6f, 0x6d, 0x65, 0x57, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x77, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x11, 0x43, 0x53, 0x32,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0xaa, 0x03, 0x0a, 0x0c, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f,
	0x6d, 0x62, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42,
	0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62,
	0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x64, 0x0a,
	0x13, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x55, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x13, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2e, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01,
	0x0a, 0x14, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xec,
	0x01, 0x0a, 0x13, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xe6, 0x01,
	0x0a, 0x14, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x46,
	0x0a, 0x11, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x43, 0x53, 0x32, 0x42, 0x6f,
	0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72,
	0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x01, 0x0a,
	0x14, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x1c, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x45,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xc4, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x6f, 0x0a, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x87, 0x02, 0x0a,
	0x0f, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x57, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x02, 0x0a, 0x25, 0x43, 0x53, 0x32, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x4e, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xda, 0x01, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x7c, 0x0a, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x18, 0x43, 0x53, 0x32,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e,
	0x12, 0x66, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x43, 0x53, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x1a, 0x5e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x1e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x5a,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x43,
	0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xa0, 0x02,
	0x0a, 0x1b, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0xf1, 0x02, 0x0a, 0x27, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xd4, 0x01,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x1a, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55,
	0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x02, 0x0a, 0x24, 0x43, 0x53, 0x32, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x72, 0x6d,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x06,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x83, 0x01, 0x0a, 0x13, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x43, 0x53, 0x32, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x22, 0x67, 0x0a, 0x16, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x06, 0x0a, 0x13,
	0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55,
	0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1b, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x18, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x1c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x19, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x15, 0x65, 0x6e, 0x65, 0x6d, 0x79,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x16, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f,
	0x72, 0x61, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x18, 0x65, 0x6e, 0x65,
	0x6d, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x52, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x05, 0x52, 0x19, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x61, 0x77, 0x88, 0x01, 0x01, 0x42,
	0x1e, 0x0a, 0x1c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61,
	0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x42, 0x20, 0x0a, 0x1e,
	0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x22, 0xb2,
	0x01, 0x0a, 0x07, 0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x4d, 0x0a, 0x0b, 0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x22, 0xf1, 0x09, 0x0a, 0x08, 0x43, 0x53, 0x32, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x4d, 0x0a, 0x13, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x62, 0x6f, 0x6d,
	0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x0c, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32,
	0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x6f,
	0x6d, 0x62, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d,
	0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6d,
	0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x62, 0x6f, 0x6d,
	0x62, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x47, 0x0a,
	0x11, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x53, 0x32, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x11, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x69,
	0x63, 0x6b, 0x55, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x63, 0x6b,
	0x55, 0x70, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x4b, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x27, 0x0a,
	0x05, 0x64, 0x65, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x44, 0x65, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52,
	0x05, 0x64, 0x65, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x70,
	0x45, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x37, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x10, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x99,
	0x01, 0x0a, 0x0e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x14, 0x43,
	0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x0e, 0x43, 0x53, 0x32, 0x42,
	0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x22, 0xbb,
	0x01, 0x0a, 0x0f, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf9, 0x01, 0x0a,
	0x13, 0x43, 0x53, 0x32, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x0e, 0x43, 0x53, 0x32,
	0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x22,
	0x9a, 0x05, 0x0a, 0x0e, 0x43, 0x53, 0x32, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0f,
	0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53,
	0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x55, 0x72, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d,
	0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x69, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x69, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x3b, 0x0a, 0x0f, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x04, 0x0a,
	0x12, 0x43, 0x53, 0x32, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x56, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa4, 0x04, 0x0a, 0x14, 0x43, 0x53, 0x32, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x58, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x10,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x53, 0x32, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x53, 0x69, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x43, 0x53, 0x32, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x87,
	0x02, 0x0a, 0x0d, 0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70,
	0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xd9, 0x02, 0x0a, 0x0f, 0x43, 0x53, 0x32,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0c, 0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x68, 0x72, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xf2, 0x03,
	0x0a, 0x07, 0x43, 0x53, 0x32, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x08, 0x43, 0x53, 0x32, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x69, 0x63, 0x69, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6f, 0x6d,
	0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x74, 0x68, 0x42, 0x79,
	0x42, 0x6f, 0x6d, 0x62, 0x22, 0xb8, 0x01, 0x0a, 0x09, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x22,
	0x5e, 0x0a, 0x0b, 0x43, 0x53, 0x32, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xf9, 0x04, 0x0a, 0x0b, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x53, 0x32, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x77, 0x69,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x45, 0x6e, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x53, 0x32,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b,
	0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x53, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x0d,
	0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x43, 0x53, 0x32, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x10, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x2a, 0x5d, 0x0a, 0x07, 0x43, 0x53, 0x32, 0x53, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x53, 0x32, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x53, 0x32, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x53, 0x32, 0x5f, 0x53, 0x49,
	0x44, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x2a,
	0x80, 0x02, 0x0a, 0x0c, 0x43, 0x53, 0x32, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x30, 0x0a, 0x2c, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49, 0x53, 0x54, 0x53, 0x5f,
	0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x53, 0x32, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x4f, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x53,
	0x32, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46,
	0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x44,
	0x10, 0x06, 0x2a, 0xc6, 0x01, 0x0a, 0x11, 0x43, 0x53, 0x32, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x53, 0x32, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x53, 0x32, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x53, 0x32, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x53, 0x32, 0x5f, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x53, 0x32, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xe1, 0x02, 0x0a, 0x0d,
	0x43, 0x53, 0x32, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x49, 0x53, 0x54, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x53,
	0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f,
	0x4d, 0x42, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x4e, 0x41, 0x44, 0x45, 0x10,
	0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x55, 0x4e,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x46, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x54, 0x47, 0x55, 0x4e, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x53,
	0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e,
	0x49, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x46, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x55, 0x4e, 0x10, 0x08,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4b, 0x4e, 0x49, 0x46, 0x45, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x53, 0x32, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x4b, 0x49, 0x54, 0x10, 0x0a, 0x1a, 0x02, 0x18, 0x01, 0x2a,
	0xde, 0x02, 0x0a, 0x0b, 0x43, 0x53, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x53, 0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x53, 0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x49, 0x53, 0x54, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x53, 0x32, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4d, 0x42, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x53, 0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x45, 0x4e, 0x41, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x53, 0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43,
	0x48, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x55, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x53,
	0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x46, 0x4c,
	0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x53, 0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x54, 0x47, 0x55, 0x4e, 0x10, 0x06, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x53, 0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4e, 0x49, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x46, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x53, 0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x55, 0x4e, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x53, 0x32, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4b, 0x4e, 0x49, 0x46, 0x45, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x53, 0x32,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x5f, 0x4b, 0x49, 0x54, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x53, 0x32, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x10, 0x0b,
	0x42, 0x21, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x5a, 0x0e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bragi_cs2_proto_rawDescOnce sync.Once
	file_bragi_cs2_proto_rawDescData = file_bragi_cs2_proto_rawDesc
)

func file_bragi_cs2_proto_rawDescGZIP() []byte {
	file_bragi_cs2_proto_rawDescOnce.Do(func() {
		file_bragi_cs2_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_cs2_proto_rawDescData)
	})
	return file_bragi_cs2_proto_rawDescData
}

var file_bragi_cs2_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bragi_cs2_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_bragi_cs2_proto_goTypes = []interface{}{
	(CS2Side)(0),                                    // 0: bragi.CS2Side
	(CS2WinReason)(0),                               // 1: bragi.CS2WinReason
	(CS2RoundStateType)(0),                          // 2: bragi.CS2RoundStateType
	(CS2WeaponType)(0),                              // 3: bragi.CS2WeaponType
	(CS2ItemType)(0),                                // 4: bragi.CS2ItemType
	(*CS2MatchMessage)(nil),                         // 5: bragi.CS2MatchMessage
	(*CS2MatchSnapshot)(nil),                        // 6: bragi.CS2MatchSnapshot
	(*CS2MatchUpdate)(nil),                          // 7: bragi.CS2MatchUpdate
	(*CS2MatchStatePartialUpdates)(nil),             // 8: bragi.CS2MatchStatePartialUpdates
	(*CS2MatchStatePartialUpdate)(nil),              // 9: bragi.CS2MatchStatePartialUpdate
	(*CS2MatchState)(nil),                           // 10: bragi.CS2MatchState
	(*CS2MatchScoreState)(nil),                      // 11: bragi.CS2MatchScoreState
	(*CS2Team)(nil),                                 // 12: bragi.CS2Team
	(*CS2CurrentMapStatePartialUpdate)(nil),         // 13: bragi.CS2CurrentMapStatePartialUpdate
	(*CS2CurrentMapState)(nil),                      // 14: bragi.CS2CurrentMapState
	(*CS2PreviousMapState)(nil),                     // 15: bragi.CS2PreviousMapState
	(*CS2MapInfoState)(nil),                         // 16: bragi.CS2MapInfoState
	(*CS2MapScoreState)(nil),                        // 17: bragi.CS2MapScoreState
	(*CS2CurrentRoundStatePartialUpdate)(nil),       // 18: bragi.CS2CurrentRoundStatePartialUpdate
	(*CS2CurrentRoundState)(nil),                    // 19: bragi.CS2CurrentRoundState
	(*CS2PreviousRoundState)(nil),                   // 20: bragi.CS2PreviousRoundState
	(*CS2RoundInfoState)(nil),                       // 21: bragi.CS2RoundInfoState
	(*CS2RoundTimeState)(nil),                       // 22: bragi.CS2RoundTimeState
	(*CS2BombState)(nil),                            // 23: bragi.CS2BombState
	(*CS2BombCarriedState)(nil),                     // 24: bragi.CS2BombCarriedState
	(*CS2BombDroppedState)(nil),                     // 25: bragi.CS2BombDroppedState
	(*CS2BombPlantingState)(nil),                    // 26: bragi.CS2BombPlantingState
	(*CS2BombPlantedState)(nil),                     // 27: bragi.CS2BombPlantedState
	(*CS2BombDefusingState)(nil),                    // 28: bragi.CS2BombDefusingState
	(*CS2BombDefusedState)(nil),                     // 29: bragi.CS2BombDefusedState
	(*CS2BombExplodedState)(nil),                    // 30: bragi.CS2BombExplodedState
	(*CS2TeamMapStatePartialUpdate)(nil),            // 31: bragi.CS2TeamMapStatePartialUpdate
	(*CS2TeamMapState)(nil),                         // 32: bragi.CS2TeamMapState
	(*CS2TeamCurrentRoundStatePartialUpdate)(nil),   // 33: bragi.CS2TeamCurrentRoundStatePartialUpdate
	(*CS2TeamCurrentRoundState)(nil),                // 34: bragi.CS2TeamCurrentRoundState
	(*CS2PreviousTeamRoundState)(nil),               // 35: bragi.CS2PreviousTeamRoundState
	(*CS2PlayerMapStatePartialUpdate)(nil),          // 36: bragi.CS2PlayerMapStatePartialUpdate
	(*CS2PlayerMapState)(nil),                       // 37: bragi.CS2PlayerMapState
	(*CS2PlayerMapStatisticsState)(nil),             // 38: bragi.CS2PlayerMapStatisticsState
	(*CS2PlayerCurrentRoundStatePartialUpdate)(nil), // 39: bragi.CS2PlayerCurrentRoundStatePartialUpdate
	(*CS2PlayerCurrentRoundState)(nil),              // 40: bragi.CS2PlayerCurrentRoundState
	(*CS2PlayerCurrentRoundStatisticsState)(nil),    // 41: bragi.CS2PlayerCurrentRoundStatisticsState
	(*CS2PlayerItemsState)(nil),                     // 42: bragi.CS2PlayerItemsState
	(*CS2PlayerPreviousRoundState)(nil),             // 43: bragi.CS2PlayerPreviousRoundState
	(*CS2PlayerPositionState)(nil),                  // 44: bragi.CS2PlayerPositionState
	(*CS2PlayerStatistics)(nil),                     // 45: bragi.CS2PlayerStatistics
	(*CS2Item)(nil),                                 // 46: bragi.CS2Item
	(*CS2Position)(nil),                             // 47: bragi.CS2Position
	(*CS2Event)(nil),                                // 48: bragi.CS2Event
	(*CS2PlayerBalance)(nil),                        // 49: bragi.CS2PlayerBalance
	(*CS2PlayerItems)(nil),                          // 50: bragi.CS2PlayerItems
	(*CS2BombDefuseStarted)(nil),                    // 51: bragi.CS2BombDefuseStarted
	(*CS2BombDefused)(nil),                          // 52: bragi.CS2BombDefused
	(*CS2BombExploded)(nil),                         // 53: bragi.CS2BombExploded
	(*CS2BombPlantStarted)(nil),                     // 54: bragi.CS2BombPlantStarted
	(*CS2BombPlanted)(nil),                          // 55: bragi.CS2BombPlanted
	(*CS2DamageDealt)(nil),                          // 56: bragi.CS2DamageDealt
	(*CS2FreezeTimeEnded)(nil),                      // 57: bragi.CS2FreezeTimeEnded
	(*CS2FreezeTimeStarted)(nil),                    // 58: bragi.CS2FreezeTimeStarted
	(*CS2ItemDrop)(nil),                             // 59: bragi.CS2ItemDrop
	(*CS2ItemPickUp)(nil),                           // 60: bragi.CS2ItemPickUp
	(*CS2ItemPurchase)(nil),                         // 61: bragi.CS2ItemPurchase
	(*CS2ItemThrow)(nil),                            // 62: bragi.CS2ItemThrow
	(*CS2Kill)(nil),                                 // 63: bragi.CS2Kill
	(*CS2Death)(nil),                                // 64: bragi.CS2Death
	(*CS2MapEnd)(nil),                               // 65: bragi.CS2MapEnd
	(*CS2MapStart)(nil),                             // 66: bragi.CS2MapStart
	(*CS2RoundEnd)(nil),                             // 67: bragi.CS2RoundEnd
	(*CS2RoundPause)(nil),                           // 68: bragi.CS2RoundPause
	(*CS2RoundResume)(nil),                          // 69: bragi.CS2RoundResume
	(*CS2RoundRollback)(nil),                        // 70: bragi.CS2RoundRollback
	(*CS2RoundStart)(nil),                           // 71: bragi.CS2RoundStart
	(*CS2MatchMessage_Payload)(nil),                 // 72: bragi.CS2MatchMessage.Payload
	(*CS2MatchUpdate_Payload)(nil),                  // 73: bragi.CS2MatchUpdate.Payload
	nil,                                             // 74: bragi.CS2CurrentMapState.TeamMapStatesEntry
	nil,                                             // 75: bragi.CS2PreviousMapState.TeamMapStatesEntry
	nil,                                             // 76: bragi.CS2CurrentRoundState.TeamStatesEntry
	nil,                                             // 77: bragi.CS2PreviousRoundState.TeamStatesEntry
	(*CS2TeamMapStatePartialUpdate_Payload)(nil),    // 78: bragi.CS2TeamMapStatePartialUpdate.Payload
	nil, // 79: bragi.CS2TeamMapState.PlayerMapStatesEntry
	(*CS2TeamCurrentRoundStatePartialUpdate_Payload)(nil), // 80: bragi.CS2TeamCurrentRoundStatePartialUpdate.Payload
	nil, // 81: bragi.CS2TeamCurrentRoundState.PlayerRoundStatesEntry
	nil, // 82: bragi.CS2PreviousTeamRoundState.PlayersEntry
	(*CS2PlayerMapStatePartialUpdate_Payload)(nil),          // 83: bragi.CS2PlayerMapStatePartialUpdate.Payload
	(*CS2PlayerCurrentRoundStatePartialUpdate_Payload)(nil), // 84: bragi.CS2PlayerCurrentRoundStatePartialUpdate.Payload
	nil,                           // 85: bragi.CS2FreezeTimeEnded.PlayerBalancesEntry
	nil,                           // 86: bragi.CS2FreezeTimeEnded.PlayerInventoriesEntry
	nil,                           // 87: bragi.CS2FreezeTimeStarted.PlayerBalancesEntry
	nil,                           // 88: bragi.CS2FreezeTimeStarted.TeamsRoundInfoEntry
	nil,                           // 89: bragi.CS2RoundEnd.PlayerBalancesEntry
	nil,                           // 90: bragi.CS2RoundEnd.PlayerInventoriesEntry
	(*timestamppb.Timestamp)(nil), // 91: google.protobuf.Timestamp
	(DataStatus)(0),               // 92: bragi.DataStatus
	(*Announcement)(nil),          // 93: bragi.Announcement
	(BestOfType)(0),               // 94: bragi.BestOfType
	(MatchStatusType)(0),          // 95: bragi.MatchStatusType
	(*durationpb.Duration)(nil),   // 96: google.protobuf.Duration
}
var file_bragi_cs2_proto_depIdxs = []int32{
	91,  // 0: bragi.CS2MatchMessage.timestamp:type_name -> google.protobuf.Timestamp
	92,  // 1: bragi.CS2MatchMessage.data_status:type_name -> bragi.DataStatus
	72,  // 2: bragi.CS2MatchMessage.payload:type_name -> bragi.CS2MatchMessage.Payload
	91,  // 3: bragi.CS2MatchSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	92,  // 4: bragi.CS2MatchSnapshot.data_status:type_name -> bragi.DataStatus
	93,  // 5: bragi.CS2MatchSnapshot.announcements:type_name -> bragi.Announcement
	10,  // 6: bragi.CS2MatchSnapshot.match_state:type_name -> bragi.CS2MatchState
	73,  // 7: bragi.CS2MatchUpdate.payload:type_name -> bragi.CS2MatchUpdate.Payload
	48,  // 8: bragi.CS2MatchUpdate.events:type_name -> bragi.CS2Event
	9,   // 9: bragi.CS2MatchStatePartialUpdates.updates:type_name -> bragi.CS2MatchStatePartialUpdate
	11,  // 10: bragi.CS2MatchStatePartialUpdate.score:type_name -> bragi.CS2MatchScoreState
	14,  // 11: bragi.CS2MatchStatePartialUpdate.current_map_state:type_name -> bragi.CS2CurrentMapState
	13,  // 12: bragi.CS2MatchStatePartialUpdate.current_map_state_partial_update:type_name -> bragi.CS2CurrentMapStatePartialUpdate
	94,  // 13: bragi.CS2MatchState.match_type:type_name -> bragi.BestOfType
	12,  // 14: bragi.CS2MatchState.home_team:type_name -> bragi.CS2Team
	12,  // 15: bragi.CS2MatchState.away_team:type_name -> bragi.CS2Team
	11,  // 16: bragi.CS2MatchState.score:type_name -> bragi.CS2MatchScoreState
	95,  // 17: bragi.CS2MatchState.match_status:type_name -> bragi.MatchStatusType
	14,  // 18: bragi.CS2MatchState.current_map_state:type_name -> bragi.CS2CurrentMapState
	15,  // 19: bragi.CS2MatchState.previous_map_states:type_name -> bragi.CS2PreviousMapState
	16,  // 20: bragi.CS2CurrentMapStatePartialUpdate.info:type_name -> bragi.CS2MapInfoState
	17,  // 21: bragi.CS2CurrentMapStatePartialUpdate.score:type_name -> bragi.CS2MapScoreState
	19,  // 22: bragi.CS2CurrentMapStatePartialUpdate.current_round_state:type_name -> bragi.CS2CurrentRoundState
	18,  // 23: bragi.CS2CurrentMapStatePartialUpdate.current_round_state_partial_update:type_name -> bragi.CS2CurrentRoundStatePartialUpdate
	31,  // 24: bragi.CS2CurrentMapStatePartialUpdate.team_map_states_partial_update:type_name -> bragi.CS2TeamMapStatePartialUpdate
	16,  // 25: bragi.CS2CurrentMapState.info:type_name -> bragi.CS2MapInfoState
	17,  // 26: bragi.CS2CurrentMapState.score:type_name -> bragi.CS2MapScoreState
	19,  // 27: bragi.CS2CurrentMapState.current_round_state:type_name -> bragi.CS2CurrentRoundState
	20,  // 28: bragi.CS2CurrentMapState.previous_round_states:type_name -> bragi.CS2PreviousRoundState
	74,  // 29: bragi.CS2CurrentMapState.team_map_states:type_name -> bragi.CS2CurrentMapState.TeamMapStatesEntry
	16,  // 30: bragi.CS2PreviousMapState.info:type_name -> bragi.CS2MapInfoState
	17,  // 31: bragi.CS2PreviousMapState.score:type_name -> bragi.CS2MapScoreState
	20,  // 32: bragi.CS2PreviousMapState.round_states:type_name -> bragi.CS2PreviousRoundState
	75,  // 33: bragi.CS2PreviousMapState.team_map_states:type_name -> bragi.CS2PreviousMapState.TeamMapStatesEntry
	96,  // 34: bragi.CS2MapInfoState.freeze_time_duration:type_name -> google.protobuf.Duration
	96,  // 35: bragi.CS2MapInfoState.round_time_duration:type_name -> google.protobuf.Duration
	96,  // 36: bragi.CS2MapInfoState.bomb_time_duration:type_name -> google.protobuf.Duration
	91,  // 37: bragi.CS2MapInfoState.start_time:type_name -> google.protobuf.Timestamp
	91,  // 38: bragi.CS2MapInfoState.end_time:type_name -> google.protobuf.Timestamp
	21,  // 39: bragi.CS2CurrentRoundStatePartialUpdate.info:type_name -> bragi.CS2RoundInfoState
	22,  // 40: bragi.CS2CurrentRoundStatePartialUpdate.time:type_name -> bragi.CS2RoundTimeState
	23,  // 41: bragi.CS2CurrentRoundStatePartialUpdate.bomb_state:type_name -> bragi.CS2BombState
	33,  // 42: bragi.CS2CurrentRoundStatePartialUpdate.team_states_partial_update:type_name -> bragi.CS2TeamCurrentRoundStatePartialUpdate
	21,  // 43: bragi.CS2CurrentRoundState.info:type_name -> bragi.CS2RoundInfoState
	22,  // 44: bragi.CS2CurrentRoundState.time:type_name -> bragi.CS2RoundTimeState
	23,  // 45: bragi.CS2CurrentRoundState.bomb_state:type_name -> bragi.CS2BombState
	76,  // 46: bragi.CS2CurrentRoundState.team_states:type_name -> bragi.CS2CurrentRoundState.TeamStatesEntry
	21,  // 47: bragi.CS2PreviousRoundState.info:type_name -> bragi.CS2RoundInfoState
	77,  // 48: bragi.CS2PreviousRoundState.team_states:type_name -> bragi.CS2PreviousRoundState.TeamStatesEntry
	2,   // 49: bragi.CS2RoundInfoState.round_type:type_name -> bragi.CS2RoundStateType
	91,  // 50: bragi.CS2RoundInfoState.start_time:type_name -> google.protobuf.Timestamp
	91,  // 51: bragi.CS2RoundInfoState.end_time:type_name -> google.protobuf.Timestamp
	1,   // 52: bragi.CS2RoundInfoState.win_reason:type_name -> bragi.CS2WinReason
	96,  // 53: bragi.CS2RoundTimeState.time_remaining:type_name -> google.protobuf.Duration
	24,  // 54: bragi.CS2BombState.carried:type_name -> bragi.CS2BombCarriedState
	25,  // 55: bragi.CS2BombState.dropped:type_name -> bragi.CS2BombDroppedState
	26,  // 56: bragi.CS2BombState.planting:type_name -> bragi.CS2BombPlantingState
	27,  // 57: bragi.CS2BombState.planted:type_name -> bragi.CS2BombPlantedState
	28,  // 58: bragi.CS2BombState.defusing:type_name -> bragi.CS2BombDefusingState
	29,  // 59: bragi.CS2BombState.defused:type_name -> bragi.CS2BombDefusedState
	30,  // 60: bragi.CS2BombState.exploded:type_name -> bragi.CS2BombExplodedState
	47,  // 61: bragi.CS2BombCarriedState.position:type_name -> bragi.CS2Position
	47,  // 62: bragi.CS2BombDroppedState.position:type_name -> bragi.CS2Position
	47,  // 63: bragi.CS2BombPlantingState.position:type_name -> bragi.CS2Position
	96,  // 64: bragi.CS2BombPlantingState.countdown:type_name -> google.protobuf.Duration
	47,  // 65: bragi.CS2BombPlantedState.position:type_name -> bragi.CS2Position
	91,  // 66: bragi.CS2BombPlantedState.planted_at:type_name -> google.protobuf.Timestamp
	96,  // 67: bragi.CS2BombPlantedState.countdown:type_name -> google.protobuf.Duration
	47,  // 68: bragi.CS2BombDefusingState.position:type_name -> bragi.CS2Position
	96,  // 69: bragi.CS2BombDefusingState.countdown:type_name -> google.protobuf.Duration
	91,  // 70: bragi.CS2BombDefusingState.defuse_started_at:type_name -> google.protobuf.Timestamp
	47,  // 71: bragi.CS2BombDefusedState.position:type_name -> bragi.CS2Position
	91,  // 72: bragi.CS2BombDefusedState.defused_at:type_name -> google.protobuf.Timestamp
	47,  // 73: bragi.CS2BombExplodedState.position:type_name -> bragi.CS2Position
	91,  // 74: bragi.CS2BombExplodedState.exploded_at:type_name -> google.protobuf.Timestamp
	78,  // 75: bragi.CS2TeamMapStatePartialUpdate.payload:type_name -> bragi.CS2TeamMapStatePartialUpdate.Payload
	0,   // 76: bragi.CS2TeamMapState.side:type_name -> bragi.CS2Side
	79,  // 77: bragi.CS2TeamMapState.player_map_states:type_name -> bragi.CS2TeamMapState.PlayerMapStatesEntry
	80,  // 78: bragi.CS2TeamCurrentRoundStatePartialUpdate.payload:type_name -> bragi.CS2TeamCurrentRoundStatePartialUpdate.Payload
	81,  // 79: bragi.CS2TeamCurrentRoundState.player_round_states:type_name -> bragi.CS2TeamCurrentRoundState.PlayerRoundStatesEntry
	82,  // 80: bragi.CS2PreviousTeamRoundState.players:type_name -> bragi.CS2PreviousTeamRoundState.PlayersEntry
	83,  // 81: bragi.CS2PlayerMapStatePartialUpdate.payload:type_name -> bragi.CS2PlayerMapStatePartialUpdate.Payload
	38,  // 82: bragi.CS2PlayerMapState.statistics:type_name -> bragi.CS2PlayerMapStatisticsState
	45,  // 83: bragi.CS2PlayerMapStatisticsState.statistics:type_name -> bragi.CS2PlayerStatistics
	84,  // 84: bragi.CS2PlayerCurrentRoundStatePartialUpdate.payload:type_name -> bragi.CS2PlayerCurrentRoundStatePartialUpdate.Payload
	41,  // 85: bragi.CS2PlayerCurrentRoundState.statistics:type_name -> bragi.CS2PlayerCurrentRoundStatisticsState
	42,  // 86: bragi.CS2PlayerCurrentRoundState.items:type_name -> bragi.CS2PlayerItemsState
	44,  // 87: bragi.CS2PlayerCurrentRoundState.position:type_name -> bragi.CS2PlayerPositionState
	45,  // 88: bragi.CS2PlayerCurrentRoundStatisticsState.statistics:type_name -> bragi.CS2PlayerStatistics
	46,  // 89: bragi.CS2PlayerItemsState.items:type_name -> bragi.CS2Item
	45,  // 90: bragi.CS2PlayerPreviousRoundState.statistics:type_name -> bragi.CS2PlayerStatistics
	47,  // 91: bragi.CS2PlayerPositionState.position:type_name -> bragi.CS2Position
	3,   // 92: bragi.CS2Item.weapon_type:type_name -> bragi.CS2WeaponType
	4,   // 93: bragi.CS2Item.type:type_name -> bragi.CS2ItemType
	51,  // 94: bragi.CS2Event.bomb_defuse_started:type_name -> bragi.CS2BombDefuseStarted
	52,  // 95: bragi.CS2Event.bomb_defused:type_name -> bragi.CS2BombDefused
	53,  // 96: bragi.CS2Event.bomb_exploded:type_name -> bragi.CS2BombExploded
	54,  // 97: bragi.CS2Event.bomb_plant_started:type_name -> bragi.CS2BombPlantStarted
	55,  // 98: bragi.CS2Event.bomb_planted:type_name -> bragi.CS2BombPlanted
	56,  // 99: bragi.CS2Event.damage_dealt:type_name -> bragi.CS2DamageDealt
	57,  // 100: bragi.CS2Event.freeze_time_ended:type_name -> bragi.CS2FreezeTimeEnded
	58,  // 101: bragi.CS2Event.freeze_time_started:type_name -> bragi.CS2FreezeTimeStarted
	59,  // 102: bragi.CS2Event.item_drop:type_name -> bragi.CS2ItemDrop
	60,  // 103: bragi.CS2Event.item_pick_up:type_name -> bragi.CS2ItemPickUp
	61,  // 104: bragi.CS2Event.item_purchase:type_name -> bragi.CS2ItemPurchase
	62,  // 105: bragi.CS2Event.item_throw:type_name -> bragi.CS2ItemThrow
	63,  // 106: bragi.CS2Event.kill:type_name -> bragi.CS2Kill
	64,  // 107: bragi.CS2Event.death:type_name -> bragi.CS2Death
	65,  // 108: bragi.CS2Event.map_end:type_name -> bragi.CS2MapEnd
	66,  // 109: bragi.CS2Event.map_start:type_name -> bragi.CS2MapStart
	67,  // 110: bragi.CS2Event.round_end:type_name -> bragi.CS2RoundEnd
	68,  // 111: bragi.CS2Event.round_pause:type_name -> bragi.CS2RoundPause
	69,  // 112: bragi.CS2Event.round_resume:type_name -> bragi.CS2RoundResume
	70,  // 113: bragi.CS2Event.round_rollback:type_name -> bragi.CS2RoundRollback
	71,  // 114: bragi.CS2Event.round_start:type_name -> bragi.CS2RoundStart
	46,  // 115: bragi.CS2PlayerItems.items:type_name -> bragi.CS2Item
	96,  // 116: bragi.CS2BombDefuseStarted.map_time:type_name -> google.protobuf.Duration
	96,  // 117: bragi.CS2BombDefuseStarted.time_remaining:type_name -> google.protobuf.Duration
	96,  // 118: bragi.CS2BombDefused.map_time:type_name -> google.protobuf.Duration
	96,  // 119: bragi.CS2BombDefused.time_remaining:type_name -> google.protobuf.Duration
	96,  // 120: bragi.CS2BombExploded.map_time:type_name -> google.protobuf.Duration
	96,  // 121: bragi.CS2BombExploded.time_remaining:type_name -> google.protobuf.Duration
	96,  // 122: bragi.CS2BombPlantStarted.map_time:type_name -> google.protobuf.Duration
	96,  // 123: bragi.CS2BombPlantStarted.time_remaining:type_name -> google.protobuf.Duration
	96,  // 124: bragi.CS2BombPlanted.map_time:type_name -> google.protobuf.Duration
	96,  // 125: bragi.CS2BombPlanted.time_remaining:type_name -> google.protobuf.Duration
	96,  // 126: bragi.CS2DamageDealt.map_time:type_name -> google.protobuf.Duration
	96,  // 127: bragi.CS2DamageDealt.time_remaining:type_name -> google.protobuf.Duration
	47,  // 128: bragi.CS2DamageDealt.killer_position:type_name -> bragi.CS2Position
	47,  // 129: bragi.CS2DamageDealt.victim_position:type_name -> bragi.CS2Position
	96,  // 130: bragi.CS2FreezeTimeEnded.map_time:type_name -> google.protobuf.Duration
	96,  // 131: bragi.CS2FreezeTimeEnded.time_remaining:type_name -> google.protobuf.Duration
	85,  // 132: bragi.CS2FreezeTimeEnded.player_balances:type_name -> bragi.CS2FreezeTimeEnded.PlayerBalancesEntry
	86,  // 133: bragi.CS2FreezeTimeEnded.player_inventories:type_name -> bragi.CS2FreezeTimeEnded.PlayerInventoriesEntry
	96,  // 134: bragi.CS2FreezeTimeStarted.map_time:type_name -> google.protobuf.Duration
	96,  // 135: bragi.CS2FreezeTimeStarted.time_remaining:type_name -> google.protobuf.Duration
	87,  // 136: bragi.CS2FreezeTimeStarted.player_balances:type_name -> bragi.CS2FreezeTimeStarted.PlayerBalancesEntry
	88,  // 137: bragi.CS2FreezeTimeStarted.teams_round_info:type_name -> bragi.CS2FreezeTimeStarted.TeamsRoundInfoEntry
	96,  // 138: bragi.CS2ItemDrop.map_time:type_name -> google.protobuf.Duration
	96,  // 139: bragi.CS2ItemDrop.time_remaining:type_name -> google.protobuf.Duration
	47,  // 140: bragi.CS2ItemDrop.position:type_name -> bragi.CS2Position
	96,  // 141: bragi.CS2ItemPickUp.map_time:type_name -> google.protobuf.Duration
	96,  // 142: bragi.CS2ItemPickUp.time_remaining:type_name -> google.protobuf.Duration
	96,  // 143: bragi.CS2ItemPurchase.map_time:type_name -> google.protobuf.Duration
	96,  // 144: bragi.CS2ItemPurchase.time_remaining:type_name -> google.protobuf.Duration
	96,  // 145: bragi.CS2ItemThrow.map_time:type_name -> google.protobuf.Duration
	96,  // 146: bragi.CS2ItemThrow.time_remaining:type_name -> google.protobuf.Duration
	47,  // 147: bragi.CS2ItemThrow.position:type_name -> bragi.CS2Position
	96,  // 148: bragi.CS2Kill.map_time:type_name -> google.protobuf.Duration
	96,  // 149: bragi.CS2Kill.time_remaining:type_name -> google.protobuf.Duration
	47,  // 150: bragi.CS2Kill.killer_position:type_name -> bragi.CS2Position
	96,  // 151: bragi.CS2Death.map_time:type_name -> google.protobuf.Duration
	96,  // 152: bragi.CS2Death.time_remaining:type_name -> google.protobuf.Duration
	47,  // 153: bragi.CS2Death.position:type_name -> bragi.CS2Position
	96,  // 154: bragi.CS2MapEnd.map_time:type_name -> google.protobuf.Duration
	96,  // 155: bragi.CS2MapStart.map_time:type_name -> google.protobuf.Duration
	96,  // 156: bragi.CS2RoundEnd.map_time:type_name -> google.protobuf.Duration
	96,  // 157: bragi.CS2RoundEnd.time_remaining:type_name -> google.protobuf.Duration
	1,   // 158: bragi.CS2RoundEnd.win_reason:type_name -> bragi.CS2WinReason
	89,  // 159: bragi.CS2RoundEnd.player_balances:type_name -> bragi.CS2RoundEnd.PlayerBalancesEntry
	90,  // 160: bragi.CS2RoundEnd.player_inventories:type_name -> bragi.CS2RoundEnd.PlayerInventoriesEntry
	96,  // 161: bragi.CS2RoundPause.map_time:type_name -> google.protobuf.Duration
	96,  // 162: bragi.CS2RoundPause.time_remaining:type_name -> google.protobuf.Duration
	96,  // 163: bragi.CS2RoundResume.map_time:type_name -> google.protobuf.Duration
	96,  // 164: bragi.CS2RoundResume.time_remaining:type_name -> google.protobuf.Duration
	96,  // 165: bragi.CS2RoundStart.map_time:type_name -> google.protobuf.Duration
	96,  // 166: bragi.CS2RoundStart.time_remaining:type_name -> google.protobuf.Duration
	6,   // 167: bragi.CS2MatchMessage.Payload.snapshot:type_name -> bragi.CS2MatchSnapshot
	7,   // 168: bragi.CS2MatchMessage.Payload.update:type_name -> bragi.CS2MatchUpdate
	10,  // 169: bragi.CS2MatchUpdate.Payload.match_state:type_name -> bragi.CS2MatchState
	8,   // 170: bragi.CS2MatchUpdate.Payload.partial_updates:type_name -> bragi.CS2MatchStatePartialUpdates
	32,  // 171: bragi.CS2CurrentMapState.TeamMapStatesEntry.value:type_name -> bragi.CS2TeamMapState
	32,  // 172: bragi.CS2PreviousMapState.TeamMapStatesEntry.value:type_name -> bragi.CS2TeamMapState
	34,  // 173: bragi.CS2CurrentRoundState.TeamStatesEntry.value:type_name -> bragi.CS2TeamCurrentRoundState
	35,  // 174: bragi.CS2PreviousRoundState.TeamStatesEntry.value:type_name -> bragi.CS2PreviousTeamRoundState
	37,  // 175: bragi.CS2TeamMapStatePartialUpdate.Payload.player_state:type_name -> bragi.CS2PlayerMapState
	36,  // 176: bragi.CS2TeamMapStatePartialUpdate.Payload.player_map_states_partial_update:type_name -> bragi.CS2PlayerMapStatePartialUpdate
	37,  // 177: bragi.CS2TeamMapState.PlayerMapStatesEntry.value:type_name -> bragi.CS2PlayerMapState
	40,  // 178: bragi.CS2TeamCurrentRoundStatePartialUpdate.Payload.player_state:type_name -> bragi.CS2PlayerCurrentRoundState
	39,  // 179: bragi.CS2TeamCurrentRoundStatePartialUpdate.Payload.player_round_states_partial_update:type_name -> bragi.CS2PlayerCurrentRoundStatePartialUpdate
	40,  // 180: bragi.CS2TeamCurrentRoundState.PlayerRoundStatesEntry.value:type_name -> bragi.CS2PlayerCurrentRoundState
	43,  // 181: bragi.CS2PreviousTeamRoundState.PlayersEntry.value:type_name -> bragi.CS2PlayerPreviousRoundState
	38,  // 182: bragi.CS2PlayerMapStatePartialUpdate.Payload.statistics:type_name -> bragi.CS2PlayerMapStatisticsState
	41,  // 183: bragi.CS2PlayerCurrentRoundStatePartialUpdate.Payload.statistics:type_name -> bragi.CS2PlayerCurrentRoundStatisticsState
	42,  // 184: bragi.CS2PlayerCurrentRoundStatePartialUpdate.Payload.items:type_name -> bragi.CS2PlayerItemsState
	44,  // 185: bragi.CS2PlayerCurrentRoundStatePartialUpdate.Payload.position:type_name -> bragi.CS2PlayerPositionState
	49,  // 186: bragi.CS2FreezeTimeEnded.PlayerBalancesEntry.value:type_name -> bragi.CS2PlayerBalance
	50,  // 187: bragi.CS2FreezeTimeEnded.PlayerInventoriesEntry.value:type_name -> bragi.CS2PlayerItems
	49,  // 188: bragi.CS2FreezeTimeStarted.PlayerBalancesEntry.value:type_name -> bragi.CS2PlayerBalance
	0,   // 189: bragi.CS2FreezeTimeStarted.TeamsRoundInfoEntry.value:type_name -> bragi.CS2Side
	49,  // 190: bragi.CS2RoundEnd.PlayerBalancesEntry.value:type_name -> bragi.CS2PlayerBalance
	50,  // 191: bragi.CS2RoundEnd.PlayerInventoriesEntry.value:type_name -> bragi.CS2PlayerItems
	192, // [192:192] is the sub-list for method output_type
	192, // [192:192] is the sub-list for method input_type
	192, // [192:192] is the sub-list for extension type_name
	192, // [192:192] is the sub-list for extension extendee
	0,   // [0:192] is the sub-list for field type_name
}

func init() { file_bragi_cs2_proto_init() }
func file_bragi_cs2_proto_init() {
	if File_bragi_cs2_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_cs2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchStatePartialUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2CurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2CurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PreviousMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MapInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MapScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2CurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2CurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PreviousRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2RoundInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2RoundTimeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombCarriedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombDroppedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombPlantingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombPlantedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombDefusingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombDefusedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombExplodedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2TeamMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2TeamMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2TeamCurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2TeamCurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PreviousTeamRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerCurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerCurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerCurrentRoundStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerItemsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerPreviousRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerPositionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombDefuseStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombDefused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombExploded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombPlantStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2BombPlanted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2DamageDealt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2FreezeTimeEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2FreezeTimeStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2ItemDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2ItemPickUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2ItemPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2ItemThrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2Kill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2Death); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MapEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MapStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2RoundEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2RoundPause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2RoundResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2RoundRollback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2RoundStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchMessage_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2MatchUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2TeamMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2TeamCurrentRoundStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_cs2_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_cs2_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CS2MatchStatePartialUpdate_Score)(nil),
		(*CS2MatchStatePartialUpdate_CurrentMapState)(nil),
		(*CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil),
	}
	file_bragi_cs2_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_bragi_cs2_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*CS2CurrentMapStatePartialUpdate_Info)(nil),
		(*CS2CurrentMapStatePartialUpdate_Score)(nil),
		(*CS2CurrentMapStatePartialUpdate_CurrentRoundState)(nil),
		(*CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate)(nil),
		(*CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate)(nil),
	}
	file_bragi_cs2_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_bragi_cs2_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CS2CurrentRoundStatePartialUpdate_Info)(nil),
		(*CS2CurrentRoundStatePartialUpdate_Time)(nil),
		(*CS2CurrentRoundStatePartialUpdate_BombState)(nil),
		(*CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate)(nil),
	}
	file_bragi_cs2_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_bragi_cs2_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*CS2BombState_Carried)(nil),
		(*CS2BombState_Dropped)(nil),
		(*CS2BombState_Planting)(nil),
		(*CS2BombState_Planted)(nil),
		(*CS2BombState_Defusing)(nil),
		(*CS2BombState_Defused)(nil),
		(*CS2BombState_Exploded)(nil),
	}
	file_bragi_cs2_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_bragi_cs2_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_bragi_cs2_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*CS2Event_BombDefuseStarted)(nil),
		(*CS2Event_BombDefused)(nil),
		(*CS2Event_BombExploded)(nil),
		(*CS2Event_BombPlantStarted)(nil),
		(*CS2Event_BombPlanted)(nil),
		(*CS2Event_DamageDealt)(nil),
		(*CS2Event_FreezeTimeEnded)(nil),
		(*CS2Event_FreezeTimeStarted)(nil),
		(*CS2Event_ItemDrop)(nil),
		(*CS2Event_ItemPickUp)(nil),
		(*CS2Event_ItemPurchase)(nil),
		(*CS2Event_ItemThrow)(nil),
		(*CS2Event_Kill)(nil),
		(*CS2Event_Death)(nil),
		(*CS2Event_MapEnd)(nil),
		(*CS2Event_MapStart)(nil),
		(*CS2Event_RoundEnd)(nil),
		(*CS2Event_RoundPause)(nil),
		(*CS2Event_RoundResume)(nil),
		(*CS2Event_RoundRollback)(nil),
		(*CS2Event_RoundStart)(nil),
	}
	file_bragi_cs2_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*CS2MatchMessage_Payload_Snapshot)(nil),
		(*CS2MatchMessage_Payload_Update)(nil),
	}
	file_bragi_cs2_proto_msgTypes[68].OneofWrappers = []interface{}{
		(*CS2MatchUpdate_Payload_MatchState)(nil),
		(*CS2MatchUpdate_Payload_PartialUpdates)(nil),
	}
	file_bragi_cs2_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*CS2TeamMapStatePartialUpdate_Payload_PlayerState)(nil),
		(*CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate)(nil),
	}
	file_bragi_cs2_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState)(nil),
		(*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate)(nil),
	}
	file_bragi_cs2_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*CS2PlayerMapStatePartialUpdate_Payload_Statistics)(nil),
	}
	file_bragi_cs2_proto_msgTypes[79].OneofWrappers = []interface{}{
		(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics)(nil),
		(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items)(nil),
		(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_cs2_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_cs2_proto_goTypes,
		DependencyIndexes: file_bragi_cs2_proto_depIdxs,
		EnumInfos:         file_bragi_cs2_proto_enumTypes,
		MessageInfos:      file_bragi_cs2_proto_msgTypes,
	}.Build()
	File_bragi_cs2_proto = out.File
	file_bragi_cs2_proto_rawDesc = nil
	file_bragi_cs2_proto_goTypes = nil
	file_bragi_cs2_proto_depIdxs = nil
}
