// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: bragi/cs2.proto

package bragi

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *CS2MatchMessage_Payload) CloneVT() *CS2MatchMessage_Payload {
	if m == nil {
		return (*CS2MatchMessage_Payload)(nil)
	}
	r := new(CS2MatchMessage_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isCS2MatchMessage_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchMessage_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MatchMessage_Payload_Snapshot) CloneVT() isCS2MatchMessage_Payload_Payload {
	if m == nil {
		return (*CS2MatchMessage_Payload_Snapshot)(nil)
	}
	r := new(CS2MatchMessage_Payload_Snapshot)
	r.Snapshot = m.Snapshot.CloneVT()
	return r
}

func (m *CS2MatchMessage_Payload_Update) CloneVT() isCS2MatchMessage_Payload_Payload {
	if m == nil {
		return (*CS2MatchMessage_Payload_Update)(nil)
	}
	r := new(CS2MatchMessage_Payload_Update)
	r.Update = m.Update.CloneVT()
	return r
}

func (m *CS2MatchMessage) CloneVT() *CS2MatchMessage {
	if m == nil {
		return (*CS2MatchMessage)(nil)
	}
	r := new(CS2MatchMessage)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MatchSnapshot) CloneVT() *CS2MatchSnapshot {
	if m == nil {
		return (*CS2MatchSnapshot)(nil)
	}
	r := new(CS2MatchSnapshot)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.MatchState = m.MatchState.CloneVT()
	r.Tournament = m.Tournament.CloneVT()
	if rhs := m.Announcements; rhs != nil {
		tmpContainer := make([]*Announcement, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Announcements = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchSnapshot) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MatchUpdate_Payload) CloneVT() *CS2MatchUpdate_Payload {
	if m == nil {
		return (*CS2MatchUpdate_Payload)(nil)
	}
	r := new(CS2MatchUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isCS2MatchUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MatchUpdate_Payload_MatchState) CloneVT() isCS2MatchUpdate_Payload_Payload {
	if m == nil {
		return (*CS2MatchUpdate_Payload_MatchState)(nil)
	}
	r := new(CS2MatchUpdate_Payload_MatchState)
	r.MatchState = m.MatchState.CloneVT()
	return r
}

func (m *CS2MatchUpdate_Payload_PartialUpdates) CloneVT() isCS2MatchUpdate_Payload_Payload {
	if m == nil {
		return (*CS2MatchUpdate_Payload_PartialUpdates)(nil)
	}
	r := new(CS2MatchUpdate_Payload_PartialUpdates)
	r.PartialUpdates = m.PartialUpdates.CloneVT()
	return r
}

func (m *CS2MatchUpdate) CloneVT() *CS2MatchUpdate {
	if m == nil {
		return (*CS2MatchUpdate)(nil)
	}
	r := new(CS2MatchUpdate)
	r.Payload = m.Payload.CloneVT()
	if rhs := m.Events; rhs != nil {
		tmpContainer := make([]*CS2Event, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Events = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MatchStatePartialUpdates) CloneVT() *CS2MatchStatePartialUpdates {
	if m == nil {
		return (*CS2MatchStatePartialUpdates)(nil)
	}
	r := new(CS2MatchStatePartialUpdates)
	if rhs := m.Updates; rhs != nil {
		tmpContainer := make([]*CS2MatchStatePartialUpdate, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Updates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchStatePartialUpdates) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MatchStatePartialUpdate) CloneVT() *CS2MatchStatePartialUpdate {
	if m == nil {
		return (*CS2MatchStatePartialUpdate)(nil)
	}
	r := new(CS2MatchStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isCS2MatchStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MatchStatePartialUpdate_Score) CloneVT() isCS2MatchStatePartialUpdate_Update {
	if m == nil {
		return (*CS2MatchStatePartialUpdate_Score)(nil)
	}
	r := new(CS2MatchStatePartialUpdate_Score)
	r.Score = m.Score.CloneVT()
	return r
}

func (m *CS2MatchStatePartialUpdate_CurrentMapState) CloneVT() isCS2MatchStatePartialUpdate_Update {
	if m == nil {
		return (*CS2MatchStatePartialUpdate_CurrentMapState)(nil)
	}
	r := new(CS2MatchStatePartialUpdate_CurrentMapState)
	r.CurrentMapState = m.CurrentMapState.CloneVT()
	return r
}

func (m *CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate) CloneVT() isCS2MatchStatePartialUpdate_Update {
	if m == nil {
		return (*CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil)
	}
	r := new(CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	r.CurrentMapStatePartialUpdate = m.CurrentMapStatePartialUpdate.CloneVT()
	return r
}

func (m *CS2MatchState) CloneVT() *CS2MatchState {
	if m == nil {
		return (*CS2MatchState)(nil)
	}
	r := new(CS2MatchState)
	r.MatchUrn = m.MatchUrn
	r.MatchType = m.MatchType
	r.HomeTeam = m.HomeTeam.CloneVT()
	r.AwayTeam = m.AwayTeam.CloneVT()
	r.Score = m.Score.CloneVT()
	r.MatchStatus = m.MatchStatus
	r.CurrentMapState = m.CurrentMapState.CloneVT()
	if rhs := m.WinTeamUrn; rhs != nil {
		tmpVal := *rhs
		r.WinTeamUrn = &tmpVal
	}
	if rhs := m.PreviousMapStates; rhs != nil {
		tmpContainer := make([]*CS2PreviousMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PreviousMapStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MatchScoreState) CloneVT() *CS2MatchScoreState {
	if m == nil {
		return (*CS2MatchScoreState)(nil)
	}
	r := new(CS2MatchScoreState)
	r.HomeScore = m.HomeScore
	r.AwayScore = m.AwayScore
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MatchScoreState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2Team) CloneVT() *CS2Team {
	if m == nil {
		return (*CS2Team)(nil)
	}
	r := new(CS2Team)
	r.TeamUrn = m.TeamUrn
	r.TeamName = m.TeamName
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2Team) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2CurrentMapStatePartialUpdate) CloneVT() *CS2CurrentMapStatePartialUpdate {
	if m == nil {
		return (*CS2CurrentMapStatePartialUpdate)(nil)
	}
	r := new(CS2CurrentMapStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isCS2CurrentMapStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2CurrentMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2CurrentMapStatePartialUpdate_Info) CloneVT() isCS2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentMapStatePartialUpdate_Info)(nil)
	}
	r := new(CS2CurrentMapStatePartialUpdate_Info)
	r.Info = m.Info.CloneVT()
	return r
}

func (m *CS2CurrentMapStatePartialUpdate_Score) CloneVT() isCS2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentMapStatePartialUpdate_Score)(nil)
	}
	r := new(CS2CurrentMapStatePartialUpdate_Score)
	r.Score = m.Score.CloneVT()
	return r
}

func (m *CS2CurrentMapStatePartialUpdate_CurrentRoundState) CloneVT() isCS2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentMapStatePartialUpdate_CurrentRoundState)(nil)
	}
	r := new(CS2CurrentMapStatePartialUpdate_CurrentRoundState)
	r.CurrentRoundState = m.CurrentRoundState.CloneVT()
	return r
}

func (m *CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate) CloneVT() isCS2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate)(nil)
	}
	r := new(CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate)
	r.CurrentRoundStatePartialUpdate = m.CurrentRoundStatePartialUpdate.CloneVT()
	return r
}

func (m *CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate) CloneVT() isCS2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate)(nil)
	}
	r := new(CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate)
	r.TeamMapStatesPartialUpdate = m.TeamMapStatesPartialUpdate.CloneVT()
	return r
}

func (m *CS2CurrentMapState) CloneVT() *CS2CurrentMapState {
	if m == nil {
		return (*CS2CurrentMapState)(nil)
	}
	r := new(CS2CurrentMapState)
	r.MapOrder = m.MapOrder
	r.Info = m.Info.CloneVT()
	r.Score = m.Score.CloneVT()
	r.CurrentRoundState = m.CurrentRoundState.CloneVT()
	if rhs := m.PreviousRoundStates; rhs != nil {
		tmpContainer := make([]*CS2PreviousRoundState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PreviousRoundStates = tmpContainer
	}
	if rhs := m.TeamMapStates; rhs != nil {
		tmpContainer := make(map[string]*CS2TeamMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.TeamMapStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2CurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PreviousMapState) CloneVT() *CS2PreviousMapState {
	if m == nil {
		return (*CS2PreviousMapState)(nil)
	}
	r := new(CS2PreviousMapState)
	r.MapOrder = m.MapOrder
	r.Info = m.Info.CloneVT()
	r.Score = m.Score.CloneVT()
	if rhs := m.RoundStates; rhs != nil {
		tmpContainer := make([]*CS2PreviousRoundState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.RoundStates = tmpContainer
	}
	if rhs := m.TeamMapStates; rhs != nil {
		tmpContainer := make(map[string]*CS2TeamMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.TeamMapStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PreviousMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MapInfoState) CloneVT() *CS2MapInfoState {
	if m == nil {
		return (*CS2MapInfoState)(nil)
	}
	r := new(CS2MapInfoState)
	r.MapName = m.MapName
	r.MaxRoundsDefault = m.MaxRoundsDefault
	r.MaxRoundsOvertime = m.MaxRoundsOvertime
	r.FreezeTimeDuration = (*durationpb.Duration)((*durationpb1.Duration)(m.FreezeTimeDuration).CloneVT())
	r.RoundTimeDuration = (*durationpb.Duration)((*durationpb1.Duration)(m.RoundTimeDuration).CloneVT())
	r.BombTimeDuration = (*durationpb.Duration)((*durationpb1.Duration)(m.BombTimeDuration).CloneVT())
	r.StartTime = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StartTime).CloneVT())
	r.EndTime = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.EndTime).CloneVT())
	r.MapEnded = m.MapEnded
	if rhs := m.WinTeamUrn; rhs != nil {
		tmpVal := *rhs
		r.WinTeamUrn = &tmpVal
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MapInfoState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MapScoreState) CloneVT() *CS2MapScoreState {
	if m == nil {
		return (*CS2MapScoreState)(nil)
	}
	r := new(CS2MapScoreState)
	r.HomeScore = m.HomeScore
	r.AwayScore = m.AwayScore
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MapScoreState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2CurrentRoundStatePartialUpdate) CloneVT() *CS2CurrentRoundStatePartialUpdate {
	if m == nil {
		return (*CS2CurrentRoundStatePartialUpdate)(nil)
	}
	r := new(CS2CurrentRoundStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isCS2CurrentRoundStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2CurrentRoundStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2CurrentRoundStatePartialUpdate_Info) CloneVT() isCS2CurrentRoundStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentRoundStatePartialUpdate_Info)(nil)
	}
	r := new(CS2CurrentRoundStatePartialUpdate_Info)
	r.Info = m.Info.CloneVT()
	return r
}

func (m *CS2CurrentRoundStatePartialUpdate_Time) CloneVT() isCS2CurrentRoundStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentRoundStatePartialUpdate_Time)(nil)
	}
	r := new(CS2CurrentRoundStatePartialUpdate_Time)
	r.Time = m.Time.CloneVT()
	return r
}

func (m *CS2CurrentRoundStatePartialUpdate_BombState) CloneVT() isCS2CurrentRoundStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentRoundStatePartialUpdate_BombState)(nil)
	}
	r := new(CS2CurrentRoundStatePartialUpdate_BombState)
	r.BombState = m.BombState.CloneVT()
	return r
}

func (m *CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate) CloneVT() isCS2CurrentRoundStatePartialUpdate_Update {
	if m == nil {
		return (*CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate)(nil)
	}
	r := new(CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate)
	r.TeamStatesPartialUpdate = m.TeamStatesPartialUpdate.CloneVT()
	return r
}

func (m *CS2CurrentRoundState) CloneVT() *CS2CurrentRoundState {
	if m == nil {
		return (*CS2CurrentRoundState)(nil)
	}
	r := new(CS2CurrentRoundState)
	r.RoundNumber = m.RoundNumber
	r.Info = m.Info.CloneVT()
	r.Time = m.Time.CloneVT()
	r.BombState = m.BombState.CloneVT()
	if rhs := m.TeamStates; rhs != nil {
		tmpContainer := make(map[string]*CS2TeamCurrentRoundState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.TeamStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2CurrentRoundState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PreviousRoundState) CloneVT() *CS2PreviousRoundState {
	if m == nil {
		return (*CS2PreviousRoundState)(nil)
	}
	r := new(CS2PreviousRoundState)
	r.RoundNumber = m.RoundNumber
	r.Info = m.Info.CloneVT()
	if rhs := m.TeamStates; rhs != nil {
		tmpContainer := make(map[string]*CS2PreviousTeamRoundState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.TeamStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PreviousRoundState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2RoundInfoState) CloneVT() *CS2RoundInfoState {
	if m == nil {
		return (*CS2RoundInfoState)(nil)
	}
	r := new(CS2RoundInfoState)
	r.RoundType = m.RoundType
	r.StartTime = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.StartTime).CloneVT())
	r.EndTime = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.EndTime).CloneVT())
	if rhs := m.WinningTeamUrn; rhs != nil {
		tmpVal := *rhs
		r.WinningTeamUrn = &tmpVal
	}
	if rhs := m.WinReason; rhs != nil {
		tmpVal := *rhs
		r.WinReason = &tmpVal
	}
	if rhs := m.HomeWon; rhs != nil {
		tmpVal := *rhs
		r.HomeWon = &tmpVal
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2RoundInfoState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2RoundTimeState) CloneVT() *CS2RoundTimeState {
	if m == nil {
		return (*CS2RoundTimeState)(nil)
	}
	r := new(CS2RoundTimeState)
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2RoundTimeState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombState) CloneVT() *CS2BombState {
	if m == nil {
		return (*CS2BombState)(nil)
	}
	r := new(CS2BombState)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface{ CloneVT() isCS2BombState_Payload }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombState_Carried) CloneVT() isCS2BombState_Payload {
	if m == nil {
		return (*CS2BombState_Carried)(nil)
	}
	r := new(CS2BombState_Carried)
	r.Carried = m.Carried.CloneVT()
	return r
}

func (m *CS2BombState_Dropped) CloneVT() isCS2BombState_Payload {
	if m == nil {
		return (*CS2BombState_Dropped)(nil)
	}
	r := new(CS2BombState_Dropped)
	r.Dropped = m.Dropped.CloneVT()
	return r
}

func (m *CS2BombState_Planting) CloneVT() isCS2BombState_Payload {
	if m == nil {
		return (*CS2BombState_Planting)(nil)
	}
	r := new(CS2BombState_Planting)
	r.Planting = m.Planting.CloneVT()
	return r
}

func (m *CS2BombState_Planted) CloneVT() isCS2BombState_Payload {
	if m == nil {
		return (*CS2BombState_Planted)(nil)
	}
	r := new(CS2BombState_Planted)
	r.Planted = m.Planted.CloneVT()
	return r
}

func (m *CS2BombState_Defusing) CloneVT() isCS2BombState_Payload {
	if m == nil {
		return (*CS2BombState_Defusing)(nil)
	}
	r := new(CS2BombState_Defusing)
	r.Defusing = m.Defusing.CloneVT()
	return r
}

func (m *CS2BombState_Defused) CloneVT() isCS2BombState_Payload {
	if m == nil {
		return (*CS2BombState_Defused)(nil)
	}
	r := new(CS2BombState_Defused)
	r.Defused = m.Defused.CloneVT()
	return r
}

func (m *CS2BombState_Exploded) CloneVT() isCS2BombState_Payload {
	if m == nil {
		return (*CS2BombState_Exploded)(nil)
	}
	r := new(CS2BombState_Exploded)
	r.Exploded = m.Exploded.CloneVT()
	return r
}

func (m *CS2BombCarriedState) CloneVT() *CS2BombCarriedState {
	if m == nil {
		return (*CS2BombCarriedState)(nil)
	}
	r := new(CS2BombCarriedState)
	r.PlayerUrn = m.PlayerUrn
	r.Position = m.Position.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombCarriedState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombDroppedState) CloneVT() *CS2BombDroppedState {
	if m == nil {
		return (*CS2BombDroppedState)(nil)
	}
	r := new(CS2BombDroppedState)
	r.DroppedByPlayerUrn = m.DroppedByPlayerUrn
	r.Position = m.Position.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombDroppedState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombPlantingState) CloneVT() *CS2BombPlantingState {
	if m == nil {
		return (*CS2BombPlantingState)(nil)
	}
	r := new(CS2BombPlantingState)
	r.PlayerUrn = m.PlayerUrn
	r.Position = m.Position.CloneVT()
	r.Countdown = (*durationpb.Duration)((*durationpb1.Duration)(m.Countdown).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombPlantingState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombPlantedState) CloneVT() *CS2BombPlantedState {
	if m == nil {
		return (*CS2BombPlantedState)(nil)
	}
	r := new(CS2BombPlantedState)
	r.PlantedByPlayerUrn = m.PlantedByPlayerUrn
	r.Position = m.Position.CloneVT()
	r.PlantedAt = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.PlantedAt).CloneVT())
	r.Countdown = (*durationpb.Duration)((*durationpb1.Duration)(m.Countdown).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombPlantedState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombDefusingState) CloneVT() *CS2BombDefusingState {
	if m == nil {
		return (*CS2BombDefusingState)(nil)
	}
	r := new(CS2BombDefusingState)
	r.PlayerUrn = m.PlayerUrn
	r.Position = m.Position.CloneVT()
	r.Countdown = (*durationpb.Duration)((*durationpb1.Duration)(m.Countdown).CloneVT())
	r.DefuseStartedAt = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.DefuseStartedAt).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombDefusingState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombDefusedState) CloneVT() *CS2BombDefusedState {
	if m == nil {
		return (*CS2BombDefusedState)(nil)
	}
	r := new(CS2BombDefusedState)
	r.DefusedByPlayerUrn = m.DefusedByPlayerUrn
	r.Position = m.Position.CloneVT()
	r.DefusedAt = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.DefusedAt).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombDefusedState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombExplodedState) CloneVT() *CS2BombExplodedState {
	if m == nil {
		return (*CS2BombExplodedState)(nil)
	}
	r := new(CS2BombExplodedState)
	r.Position = m.Position.CloneVT()
	r.ExplodedAt = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.ExplodedAt).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombExplodedState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2TeamMapStatePartialUpdate_Payload) CloneVT() *CS2TeamMapStatePartialUpdate_Payload {
	if m == nil {
		return (*CS2TeamMapStatePartialUpdate_Payload)(nil)
	}
	r := new(CS2TeamMapStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isCS2TeamMapStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2TeamMapStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2TeamMapStatePartialUpdate_Payload_PlayerState) CloneVT() isCS2TeamMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*CS2TeamMapStatePartialUpdate_Payload_PlayerState)(nil)
	}
	r := new(CS2TeamMapStatePartialUpdate_Payload_PlayerState)
	r.PlayerState = m.PlayerState.CloneVT()
	return r
}

func (m *CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate) CloneVT() isCS2TeamMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate)(nil)
	}
	r := new(CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate)
	r.PlayerMapStatesPartialUpdate = m.PlayerMapStatesPartialUpdate.CloneVT()
	return r
}

func (m *CS2TeamMapStatePartialUpdate) CloneVT() *CS2TeamMapStatePartialUpdate {
	if m == nil {
		return (*CS2TeamMapStatePartialUpdate)(nil)
	}
	r := new(CS2TeamMapStatePartialUpdate)
	r.TeamUrn = m.TeamUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2TeamMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2TeamMapState) CloneVT() *CS2TeamMapState {
	if m == nil {
		return (*CS2TeamMapState)(nil)
	}
	r := new(CS2TeamMapState)
	r.TeamUrn = m.TeamUrn
	r.Side = m.Side
	if rhs := m.PlayerMapStates; rhs != nil {
		tmpContainer := make(map[string]*CS2PlayerMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PlayerMapStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2TeamMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2TeamCurrentRoundStatePartialUpdate_Payload) CloneVT() *CS2TeamCurrentRoundStatePartialUpdate_Payload {
	if m == nil {
		return (*CS2TeamCurrentRoundStatePartialUpdate_Payload)(nil)
	}
	r := new(CS2TeamCurrentRoundStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2TeamCurrentRoundStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState) CloneVT() isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState)(nil)
	}
	r := new(CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState)
	r.PlayerState = m.PlayerState.CloneVT()
	return r
}

func (m *CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate) CloneVT() isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate)(nil)
	}
	r := new(CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate)
	r.PlayerRoundStatesPartialUpdate = m.PlayerRoundStatesPartialUpdate.CloneVT()
	return r
}

func (m *CS2TeamCurrentRoundStatePartialUpdate) CloneVT() *CS2TeamCurrentRoundStatePartialUpdate {
	if m == nil {
		return (*CS2TeamCurrentRoundStatePartialUpdate)(nil)
	}
	r := new(CS2TeamCurrentRoundStatePartialUpdate)
	r.TeamUrn = m.TeamUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2TeamCurrentRoundStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2TeamCurrentRoundState) CloneVT() *CS2TeamCurrentRoundState {
	if m == nil {
		return (*CS2TeamCurrentRoundState)(nil)
	}
	r := new(CS2TeamCurrentRoundState)
	r.TeamUrn = m.TeamUrn
	if rhs := m.PlayerRoundStates; rhs != nil {
		tmpContainer := make(map[string]*CS2PlayerCurrentRoundState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PlayerRoundStates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2TeamCurrentRoundState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PreviousTeamRoundState) CloneVT() *CS2PreviousTeamRoundState {
	if m == nil {
		return (*CS2PreviousTeamRoundState)(nil)
	}
	r := new(CS2PreviousTeamRoundState)
	r.TeamUrn = m.TeamUrn
	if rhs := m.Players; rhs != nil {
		tmpContainer := make(map[string]*CS2PlayerPreviousRoundState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Players = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PreviousTeamRoundState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerMapStatePartialUpdate_Payload) CloneVT() *CS2PlayerMapStatePartialUpdate_Payload {
	if m == nil {
		return (*CS2PlayerMapStatePartialUpdate_Payload)(nil)
	}
	r := new(CS2PlayerMapStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isCS2PlayerMapStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerMapStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerMapStatePartialUpdate_Payload_Statistics) CloneVT() isCS2PlayerMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*CS2PlayerMapStatePartialUpdate_Payload_Statistics)(nil)
	}
	r := new(CS2PlayerMapStatePartialUpdate_Payload_Statistics)
	r.Statistics = m.Statistics.CloneVT()
	return r
}

func (m *CS2PlayerMapStatePartialUpdate) CloneVT() *CS2PlayerMapStatePartialUpdate {
	if m == nil {
		return (*CS2PlayerMapStatePartialUpdate)(nil)
	}
	r := new(CS2PlayerMapStatePartialUpdate)
	r.PlayerUrn = m.PlayerUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerMapState) CloneVT() *CS2PlayerMapState {
	if m == nil {
		return (*CS2PlayerMapState)(nil)
	}
	r := new(CS2PlayerMapState)
	r.PlayerUrn = m.PlayerUrn
	r.PlayerName = m.PlayerName
	r.SlotId = m.SlotId
	r.Statistics = m.Statistics.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerMapStatisticsState) CloneVT() *CS2PlayerMapStatisticsState {
	if m == nil {
		return (*CS2PlayerMapStatisticsState)(nil)
	}
	r := new(CS2PlayerMapStatisticsState)
	r.PlayerUrn = m.PlayerUrn
	r.OpeningKills = m.OpeningKills
	r.OpeningDeaths = m.OpeningDeaths
	r.TotalDamage = m.TotalDamage
	r.AverageDamagePerRound = m.AverageDamagePerRound
	r.Statistics = m.Statistics.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerMapStatisticsState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerCurrentRoundStatePartialUpdate_Payload) CloneVT() *CS2PlayerCurrentRoundStatePartialUpdate_Payload {
	if m == nil {
		return (*CS2PlayerCurrentRoundStatePartialUpdate_Payload)(nil)
	}
	r := new(CS2PlayerCurrentRoundStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerCurrentRoundStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics) CloneVT() isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics)(nil)
	}
	r := new(CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics)
	r.Statistics = m.Statistics.CloneVT()
	return r
}

func (m *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items) CloneVT() isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items)(nil)
	}
	r := new(CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items)
	r.Items = m.Items.CloneVT()
	return r
}

func (m *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position) CloneVT() isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position)(nil)
	}
	r := new(CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position)
	r.Position = m.Position.CloneVT()
	return r
}

func (m *CS2PlayerCurrentRoundStatePartialUpdate) CloneVT() *CS2PlayerCurrentRoundStatePartialUpdate {
	if m == nil {
		return (*CS2PlayerCurrentRoundStatePartialUpdate)(nil)
	}
	r := new(CS2PlayerCurrentRoundStatePartialUpdate)
	r.PlayerUrn = m.PlayerUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerCurrentRoundStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerCurrentRoundState) CloneVT() *CS2PlayerCurrentRoundState {
	if m == nil {
		return (*CS2PlayerCurrentRoundState)(nil)
	}
	r := new(CS2PlayerCurrentRoundState)
	r.PlayerUrn = m.PlayerUrn
	r.PlayerName = m.PlayerName
	r.SlotId = m.SlotId
	r.Statistics = m.Statistics.CloneVT()
	r.Items = m.Items.CloneVT()
	r.Position = m.Position.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerCurrentRoundState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerCurrentRoundStatisticsState) CloneVT() *CS2PlayerCurrentRoundStatisticsState {
	if m == nil {
		return (*CS2PlayerCurrentRoundStatisticsState)(nil)
	}
	r := new(CS2PlayerCurrentRoundStatisticsState)
	r.PlayerUrn = m.PlayerUrn
	r.Alive = m.Alive
	r.Health = m.Health
	r.Armor = m.Armor
	r.Balance = m.Balance
	r.Statistics = m.Statistics.CloneVT()
	if rhs := m.Damage; rhs != nil {
		tmpVal := *rhs
		r.Damage = &tmpVal
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerCurrentRoundStatisticsState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerItemsState) CloneVT() *CS2PlayerItemsState {
	if m == nil {
		return (*CS2PlayerItemsState)(nil)
	}
	r := new(CS2PlayerItemsState)
	r.PlayerUrn = m.PlayerUrn
	r.EquipmentValue = m.EquipmentValue
	if rhs := m.Items; rhs != nil {
		tmpContainer := make([]*CS2Item, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Items = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerItemsState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerPreviousRoundState) CloneVT() *CS2PlayerPreviousRoundState {
	if m == nil {
		return (*CS2PlayerPreviousRoundState)(nil)
	}
	r := new(CS2PlayerPreviousRoundState)
	r.PlayerUrn = m.PlayerUrn
	r.PlayerName = m.PlayerName
	r.Statistics = m.Statistics.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerPreviousRoundState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerPositionState) CloneVT() *CS2PlayerPositionState {
	if m == nil {
		return (*CS2PlayerPositionState)(nil)
	}
	r := new(CS2PlayerPositionState)
	r.PlayerUrn = m.PlayerUrn
	r.Position = m.Position.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerPositionState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerStatistics) CloneVT() *CS2PlayerStatistics {
	if m == nil {
		return (*CS2PlayerStatistics)(nil)
	}
	r := new(CS2PlayerStatistics)
	r.PlayerUrn = m.PlayerUrn
	r.Kills = m.Kills
	r.FriendlyKills = m.FriendlyKills
	r.EnemyKills = m.EnemyKills
	r.SelfKills = m.SelfKills
	r.Deaths = m.Deaths
	r.Assists = m.Assists
	r.Headshots = m.Headshots
	r.Damage = m.Damage
	if rhs := m.FriendlyDamageDealtArmor; rhs != nil {
		tmpVal := *rhs
		r.FriendlyDamageDealtArmor = &tmpVal
	}
	if rhs := m.FriendlyDamageDealtHealth; rhs != nil {
		tmpVal := *rhs
		r.FriendlyDamageDealtHealth = &tmpVal
	}
	if rhs := m.EnemyDamageDealtArmor; rhs != nil {
		tmpVal := *rhs
		r.EnemyDamageDealtArmor = &tmpVal
	}
	if rhs := m.EnemyDamageDealtHealth; rhs != nil {
		tmpVal := *rhs
		r.EnemyDamageDealtHealth = &tmpVal
	}
	if rhs := m.EnemyDamageDealtArmorRaw; rhs != nil {
		tmpVal := *rhs
		r.EnemyDamageDealtArmorRaw = &tmpVal
	}
	if rhs := m.EnemyDamageDealtHealthRaw; rhs != nil {
		tmpVal := *rhs
		r.EnemyDamageDealtHealthRaw = &tmpVal
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerStatistics) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2Item) CloneVT() *CS2Item {
	if m == nil {
		return (*CS2Item)(nil)
	}
	r := new(CS2Item)
	r.Name = m.Name
	r.WeaponType = m.WeaponType
	r.Type = m.Type
	r.Count = m.Count
	r.IsActive = m.IsActive
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2Item) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2Position) CloneVT() *CS2Position {
	if m == nil {
		return (*CS2Position)(nil)
	}
	r := new(CS2Position)
	r.X = m.X
	r.Y = m.Y
	r.Z = m.Z
	r.Angle = m.Angle
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2Position) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2Event) CloneVT() *CS2Event {
	if m == nil {
		return (*CS2Event)(nil)
	}
	r := new(CS2Event)
	if m.Event != nil {
		r.Event = m.Event.(interface{ CloneVT() isCS2Event_Event }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2Event) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2Event_BombDefuseStarted) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_BombDefuseStarted)(nil)
	}
	r := new(CS2Event_BombDefuseStarted)
	r.BombDefuseStarted = m.BombDefuseStarted.CloneVT()
	return r
}

func (m *CS2Event_BombDefused) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_BombDefused)(nil)
	}
	r := new(CS2Event_BombDefused)
	r.BombDefused = m.BombDefused.CloneVT()
	return r
}

func (m *CS2Event_BombExploded) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_BombExploded)(nil)
	}
	r := new(CS2Event_BombExploded)
	r.BombExploded = m.BombExploded.CloneVT()
	return r
}

func (m *CS2Event_BombPlantStarted) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_BombPlantStarted)(nil)
	}
	r := new(CS2Event_BombPlantStarted)
	r.BombPlantStarted = m.BombPlantStarted.CloneVT()
	return r
}

func (m *CS2Event_BombPlanted) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_BombPlanted)(nil)
	}
	r := new(CS2Event_BombPlanted)
	r.BombPlanted = m.BombPlanted.CloneVT()
	return r
}

func (m *CS2Event_DamageDealt) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_DamageDealt)(nil)
	}
	r := new(CS2Event_DamageDealt)
	r.DamageDealt = m.DamageDealt.CloneVT()
	return r
}

func (m *CS2Event_FreezeTimeEnded) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_FreezeTimeEnded)(nil)
	}
	r := new(CS2Event_FreezeTimeEnded)
	r.FreezeTimeEnded = m.FreezeTimeEnded.CloneVT()
	return r
}

func (m *CS2Event_FreezeTimeStarted) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_FreezeTimeStarted)(nil)
	}
	r := new(CS2Event_FreezeTimeStarted)
	r.FreezeTimeStarted = m.FreezeTimeStarted.CloneVT()
	return r
}

func (m *CS2Event_ItemDrop) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_ItemDrop)(nil)
	}
	r := new(CS2Event_ItemDrop)
	r.ItemDrop = m.ItemDrop.CloneVT()
	return r
}

func (m *CS2Event_ItemPickUp) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_ItemPickUp)(nil)
	}
	r := new(CS2Event_ItemPickUp)
	r.ItemPickUp = m.ItemPickUp.CloneVT()
	return r
}

func (m *CS2Event_ItemPurchase) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_ItemPurchase)(nil)
	}
	r := new(CS2Event_ItemPurchase)
	r.ItemPurchase = m.ItemPurchase.CloneVT()
	return r
}

func (m *CS2Event_ItemThrow) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_ItemThrow)(nil)
	}
	r := new(CS2Event_ItemThrow)
	r.ItemThrow = m.ItemThrow.CloneVT()
	return r
}

func (m *CS2Event_Kill) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_Kill)(nil)
	}
	r := new(CS2Event_Kill)
	r.Kill = m.Kill.CloneVT()
	return r
}

func (m *CS2Event_Death) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_Death)(nil)
	}
	r := new(CS2Event_Death)
	r.Death = m.Death.CloneVT()
	return r
}

func (m *CS2Event_MapEnd) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_MapEnd)(nil)
	}
	r := new(CS2Event_MapEnd)
	r.MapEnd = m.MapEnd.CloneVT()
	return r
}

func (m *CS2Event_MapStart) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_MapStart)(nil)
	}
	r := new(CS2Event_MapStart)
	r.MapStart = m.MapStart.CloneVT()
	return r
}

func (m *CS2Event_RoundEnd) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_RoundEnd)(nil)
	}
	r := new(CS2Event_RoundEnd)
	r.RoundEnd = m.RoundEnd.CloneVT()
	return r
}

func (m *CS2Event_RoundPause) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_RoundPause)(nil)
	}
	r := new(CS2Event_RoundPause)
	r.RoundPause = m.RoundPause.CloneVT()
	return r
}

func (m *CS2Event_RoundResume) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_RoundResume)(nil)
	}
	r := new(CS2Event_RoundResume)
	r.RoundResume = m.RoundResume.CloneVT()
	return r
}

func (m *CS2Event_RoundRollback) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_RoundRollback)(nil)
	}
	r := new(CS2Event_RoundRollback)
	r.RoundRollback = m.RoundRollback.CloneVT()
	return r
}

func (m *CS2Event_RoundStart) CloneVT() isCS2Event_Event {
	if m == nil {
		return (*CS2Event_RoundStart)(nil)
	}
	r := new(CS2Event_RoundStart)
	r.RoundStart = m.RoundStart.CloneVT()
	return r
}

func (m *CS2PlayerBalance) CloneVT() *CS2PlayerBalance {
	if m == nil {
		return (*CS2PlayerBalance)(nil)
	}
	r := new(CS2PlayerBalance)
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	r.Balance = m.Balance
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerBalance) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2PlayerItems) CloneVT() *CS2PlayerItems {
	if m == nil {
		return (*CS2PlayerItems)(nil)
	}
	r := new(CS2PlayerItems)
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	r.EquipmentValue = m.EquipmentValue
	if rhs := m.Items; rhs != nil {
		tmpContainer := make([]*CS2Item, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Items = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2PlayerItems) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombDefuseStarted) CloneVT() *CS2BombDefuseStarted {
	if m == nil {
		return (*CS2BombDefuseStarted)(nil)
	}
	r := new(CS2BombDefuseStarted)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombDefuseStarted) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombDefused) CloneVT() *CS2BombDefused {
	if m == nil {
		return (*CS2BombDefused)(nil)
	}
	r := new(CS2BombDefused)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombDefused) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombExploded) CloneVT() *CS2BombExploded {
	if m == nil {
		return (*CS2BombExploded)(nil)
	}
	r := new(CS2BombExploded)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombExploded) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombPlantStarted) CloneVT() *CS2BombPlantStarted {
	if m == nil {
		return (*CS2BombPlantStarted)(nil)
	}
	r := new(CS2BombPlantStarted)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombPlantStarted) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2BombPlanted) CloneVT() *CS2BombPlanted {
	if m == nil {
		return (*CS2BombPlanted)(nil)
	}
	r := new(CS2BombPlanted)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2BombPlanted) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2DamageDealt) CloneVT() *CS2DamageDealt {
	if m == nil {
		return (*CS2DamageDealt)(nil)
	}
	r := new(CS2DamageDealt)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.KillerPosition = m.KillerPosition.CloneVT()
	r.KillerUrn = m.KillerUrn
	r.KillerTeamUrn = m.KillerTeamUrn
	r.VictimUrn = m.VictimUrn
	r.VictimTeamUrn = m.VictimTeamUrn
	r.Weapon = m.Weapon
	r.Hitgroup = m.Hitgroup
	r.HealthDeducted = m.HealthDeducted
	r.HealthRemaining = m.HealthRemaining
	r.ArmorDeducted = m.ArmorDeducted
	r.ArmorRemaining = m.ArmorRemaining
	r.VictimPosition = m.VictimPosition.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2DamageDealt) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2FreezeTimeEnded) CloneVT() *CS2FreezeTimeEnded {
	if m == nil {
		return (*CS2FreezeTimeEnded)(nil)
	}
	r := new(CS2FreezeTimeEnded)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	if rhs := m.PlayerBalances; rhs != nil {
		tmpContainer := make(map[string]*CS2PlayerBalance, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PlayerBalances = tmpContainer
	}
	if rhs := m.PlayerInventories; rhs != nil {
		tmpContainer := make(map[string]*CS2PlayerItems, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PlayerInventories = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2FreezeTimeEnded) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2FreezeTimeStarted) CloneVT() *CS2FreezeTimeStarted {
	if m == nil {
		return (*CS2FreezeTimeStarted)(nil)
	}
	r := new(CS2FreezeTimeStarted)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	if rhs := m.PlayerBalances; rhs != nil {
		tmpContainer := make(map[string]*CS2PlayerBalance, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PlayerBalances = tmpContainer
	}
	if rhs := m.TeamsRoundInfo; rhs != nil {
		tmpContainer := make(map[string]CS2Side, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v
		}
		r.TeamsRoundInfo = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2FreezeTimeStarted) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2ItemDrop) CloneVT() *CS2ItemDrop {
	if m == nil {
		return (*CS2ItemDrop)(nil)
	}
	r := new(CS2ItemDrop)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.Position = m.Position.CloneVT()
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	r.Item = m.Item
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2ItemDrop) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2ItemPickUp) CloneVT() *CS2ItemPickUp {
	if m == nil {
		return (*CS2ItemPickUp)(nil)
	}
	r := new(CS2ItemPickUp)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	r.Item = m.Item
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2ItemPickUp) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2ItemPurchase) CloneVT() *CS2ItemPurchase {
	if m == nil {
		return (*CS2ItemPurchase)(nil)
	}
	r := new(CS2ItemPurchase)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	r.Item = m.Item
	r.PlayerBalance = m.PlayerBalance
	r.EquipmentValue = m.EquipmentValue
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2ItemPurchase) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2ItemThrow) CloneVT() *CS2ItemThrow {
	if m == nil {
		return (*CS2ItemThrow)(nil)
	}
	r := new(CS2ItemThrow)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.Position = m.Position.CloneVT()
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	r.Item = m.Item
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2ItemThrow) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2Kill) CloneVT() *CS2Kill {
	if m == nil {
		return (*CS2Kill)(nil)
	}
	r := new(CS2Kill)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.KillerPosition = m.KillerPosition.CloneVT()
	r.KillerUrn = m.KillerUrn
	r.KillerTeamUrn = m.KillerTeamUrn
	r.VictimUrn = m.VictimUrn
	r.VictimTeamUrn = m.VictimTeamUrn
	r.Weapon = m.Weapon
	r.Headshot = m.Headshot
	r.Penetrated = m.Penetrated
	if rhs := m.Assistants; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Assistants = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2Kill) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2Death) CloneVT() *CS2Death {
	if m == nil {
		return (*CS2Death)(nil)
	}
	r := new(CS2Death)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.Position = m.Position.CloneVT()
	r.PlayerUrn = m.PlayerUrn
	r.TeamUrn = m.TeamUrn
	r.TotalDeaths = m.TotalDeaths
	r.Suicide = m.Suicide
	r.DeathByBomb = m.DeathByBomb
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2Death) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MapEnd) CloneVT() *CS2MapEnd {
	if m == nil {
		return (*CS2MapEnd)(nil)
	}
	r := new(CS2MapEnd)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.MapName = m.MapName
	r.WinningTeamUrn = m.WinningTeamUrn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MapEnd) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2MapStart) CloneVT() *CS2MapStart {
	if m == nil {
		return (*CS2MapStart)(nil)
	}
	r := new(CS2MapStart)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.MapName = m.MapName
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2MapStart) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2RoundEnd) CloneVT() *CS2RoundEnd {
	if m == nil {
		return (*CS2RoundEnd)(nil)
	}
	r := new(CS2RoundEnd)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	r.WinningTeamUrn = m.WinningTeamUrn
	r.WinReason = m.WinReason
	if rhs := m.PlayerBalances; rhs != nil {
		tmpContainer := make(map[string]*CS2PlayerBalance, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PlayerBalances = tmpContainer
	}
	if rhs := m.PlayerInventories; rhs != nil {
		tmpContainer := make(map[string]*CS2PlayerItems, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PlayerInventories = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2RoundEnd) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2RoundPause) CloneVT() *CS2RoundPause {
	if m == nil {
		return (*CS2RoundPause)(nil)
	}
	r := new(CS2RoundPause)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2RoundPause) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2RoundResume) CloneVT() *CS2RoundResume {
	if m == nil {
		return (*CS2RoundResume)(nil)
	}
	r := new(CS2RoundResume)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2RoundResume) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2RoundRollback) CloneVT() *CS2RoundRollback {
	if m == nil {
		return (*CS2RoundRollback)(nil)
	}
	r := new(CS2RoundRollback)
	r.NextRoundNumber = m.NextRoundNumber
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2RoundRollback) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *CS2RoundStart) CloneVT() *CS2RoundStart {
	if m == nil {
		return (*CS2RoundStart)(nil)
	}
	r := new(CS2RoundStart)
	r.MapTime = (*durationpb.Duration)((*durationpb1.Duration)(m.MapTime).CloneVT())
	r.TimeRemaining = (*durationpb.Duration)((*durationpb1.Duration)(m.TimeRemaining).CloneVT())
	r.CurrentRoundNumber = m.CurrentRoundNumber
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CS2RoundStart) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *CS2MatchMessage_Payload) EqualVT(that *CS2MatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2MatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchMessage_Payload_Snapshot) EqualVT(thatIface isCS2MatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*CS2MatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &CS2MatchSnapshot{}
		}
		if q == nil {
			q = &CS2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchMessage_Payload_Update) EqualVT(thatIface isCS2MatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*CS2MatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &CS2MatchUpdate{}
		}
		if q == nil {
			q = &CS2MatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchMessage) EqualVT(that *CS2MatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchSnapshot) EqualVT(that *CS2MatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchUpdate_Payload) EqualVT(that *CS2MatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2MatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchUpdate_Payload_MatchState) EqualVT(thatIface isCS2MatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2MatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &CS2MatchState{}
		}
		if q == nil {
			q = &CS2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isCS2MatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2MatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &CS2MatchStatePartialUpdates{}
		}
		if q == nil {
			q = &CS2MatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchUpdate) EqualVT(that *CS2MatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2Event{}
			}
			if q == nil {
				q = &CS2Event{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchStatePartialUpdates) EqualVT(that *CS2MatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2MatchStatePartialUpdate{}
			}
			if q == nil {
				q = &CS2MatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchStatePartialUpdate) EqualVT(that *CS2MatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isCS2MatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchStatePartialUpdate_Score) EqualVT(thatIface isCS2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2MatchStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &CS2MatchScoreState{}
		}
		if q == nil {
			q = &CS2MatchScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchStatePartialUpdate_CurrentMapState) EqualVT(thatIface isCS2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2MatchStatePartialUpdate_CurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapState, that.CurrentMapState; p != q {
		if p == nil {
			p = &CS2CurrentMapState{}
		}
		if q == nil {
			q = &CS2CurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate) EqualVT(thatIface isCS2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapStatePartialUpdate, that.CurrentMapStatePartialUpdate; p != q {
		if p == nil {
			p = &CS2CurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2CurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchState) EqualVT(that *CS2MatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.CurrentMapState.EqualVT(that.CurrentMapState) {
		return false
	}
	if len(this.PreviousMapStates) != len(that.PreviousMapStates) {
		return false
	}
	for i, vx := range this.PreviousMapStates {
		vy := that.PreviousMapStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PreviousMapState{}
			}
			if q == nil {
				q = &CS2PreviousMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if p, q := this.WinTeamUrn, that.WinTeamUrn; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchScoreState) EqualVT(that *CS2MatchScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Team) EqualVT(that *CS2Team) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.TeamName != that.TeamName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Team) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Team)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2CurrentMapStatePartialUpdate) EqualVT(that *CS2CurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isCS2CurrentMapStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2CurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2CurrentMapStatePartialUpdate_Info) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_Info)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Info, that.Info; p != q {
		if p == nil {
			p = &CS2MapInfoState{}
		}
		if q == nil {
			q = &CS2MapInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapStatePartialUpdate_Score) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &CS2MapScoreState{}
		}
		if q == nil {
			q = &CS2MapScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapStatePartialUpdate_CurrentRoundState) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_CurrentRoundState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentRoundState, that.CurrentRoundState; p != q {
		if p == nil {
			p = &CS2CurrentRoundState{}
		}
		if q == nil {
			q = &CS2CurrentRoundState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentRoundStatePartialUpdate, that.CurrentRoundStatePartialUpdate; p != q {
		if p == nil {
			p = &CS2CurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2CurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamMapStatesPartialUpdate, that.TeamMapStatesPartialUpdate; p != q {
		if p == nil {
			p = &CS2TeamMapStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2TeamMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapState) EqualVT(that *CS2CurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if !this.Info.EqualVT(that.Info) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if !this.CurrentRoundState.EqualVT(that.CurrentRoundState) {
		return false
	}
	if len(this.PreviousRoundStates) != len(that.PreviousRoundStates) {
		return false
	}
	for i, vx := range this.PreviousRoundStates {
		vy := that.PreviousRoundStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PreviousRoundState{}
			}
			if q == nil {
				q = &CS2PreviousRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.TeamMapStates) != len(that.TeamMapStates) {
		return false
	}
	for i, vx := range this.TeamMapStates {
		vy, ok := that.TeamMapStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2TeamMapState{}
			}
			if q == nil {
				q = &CS2TeamMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2CurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2CurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PreviousMapState) EqualVT(that *CS2PreviousMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if !this.Info.EqualVT(that.Info) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if len(this.RoundStates) != len(that.RoundStates) {
		return false
	}
	for i, vx := range this.RoundStates {
		vy := that.RoundStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PreviousRoundState{}
			}
			if q == nil {
				q = &CS2PreviousRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.TeamMapStates) != len(that.TeamMapStates) {
		return false
	}
	for i, vx := range this.TeamMapStates {
		vy, ok := that.TeamMapStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2TeamMapState{}
			}
			if q == nil {
				q = &CS2TeamMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PreviousMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PreviousMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MapInfoState) EqualVT(that *CS2MapInfoState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapName != that.MapName {
		return false
	}
	if this.MaxRoundsDefault != that.MaxRoundsDefault {
		return false
	}
	if this.MaxRoundsOvertime != that.MaxRoundsOvertime {
		return false
	}
	if !(*durationpb1.Duration)(this.FreezeTimeDuration).EqualVT((*durationpb1.Duration)(that.FreezeTimeDuration)) {
		return false
	}
	if !(*durationpb1.Duration)(this.RoundTimeDuration).EqualVT((*durationpb1.Duration)(that.RoundTimeDuration)) {
		return false
	}
	if !(*durationpb1.Duration)(this.BombTimeDuration).EqualVT((*durationpb1.Duration)(that.BombTimeDuration)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartTime).EqualVT((*timestamppb1.Timestamp)(that.StartTime)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.EndTime).EqualVT((*timestamppb1.Timestamp)(that.EndTime)) {
		return false
	}
	if this.MapEnded != that.MapEnded {
		return false
	}
	if p, q := this.WinTeamUrn, that.WinTeamUrn; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MapInfoState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MapInfoState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MapScoreState) EqualVT(that *CS2MapScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MapScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MapScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2CurrentRoundStatePartialUpdate) EqualVT(that *CS2CurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isCS2CurrentRoundStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2CurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2CurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2CurrentRoundStatePartialUpdate_Info) EqualVT(thatIface isCS2CurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentRoundStatePartialUpdate_Info)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Info, that.Info; p != q {
		if p == nil {
			p = &CS2RoundInfoState{}
		}
		if q == nil {
			q = &CS2RoundInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentRoundStatePartialUpdate_Time) EqualVT(thatIface isCS2CurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentRoundStatePartialUpdate_Time)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Time, that.Time; p != q {
		if p == nil {
			p = &CS2RoundTimeState{}
		}
		if q == nil {
			q = &CS2RoundTimeState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentRoundStatePartialUpdate_BombState) EqualVT(thatIface isCS2CurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentRoundStatePartialUpdate_BombState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombState, that.BombState; p != q {
		if p == nil {
			p = &CS2BombState{}
		}
		if q == nil {
			q = &CS2BombState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate) EqualVT(thatIface isCS2CurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamStatesPartialUpdate, that.TeamStatesPartialUpdate; p != q {
		if p == nil {
			p = &CS2TeamCurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2TeamCurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentRoundState) EqualVT(that *CS2CurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RoundNumber != that.RoundNumber {
		return false
	}
	if !this.Info.EqualVT(that.Info) {
		return false
	}
	if !this.Time.EqualVT(that.Time) {
		return false
	}
	if !this.BombState.EqualVT(that.BombState) {
		return false
	}
	if len(this.TeamStates) != len(that.TeamStates) {
		return false
	}
	for i, vx := range this.TeamStates {
		vy, ok := that.TeamStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2TeamCurrentRoundState{}
			}
			if q == nil {
				q = &CS2TeamCurrentRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2CurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2CurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PreviousRoundState) EqualVT(that *CS2PreviousRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RoundNumber != that.RoundNumber {
		return false
	}
	if !this.Info.EqualVT(that.Info) {
		return false
	}
	if len(this.TeamStates) != len(that.TeamStates) {
		return false
	}
	for i, vx := range this.TeamStates {
		vy, ok := that.TeamStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PreviousTeamRoundState{}
			}
			if q == nil {
				q = &CS2PreviousTeamRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PreviousRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PreviousRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundInfoState) EqualVT(that *CS2RoundInfoState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RoundType != that.RoundType {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.StartTime).EqualVT((*timestamppb1.Timestamp)(that.StartTime)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.EndTime).EqualVT((*timestamppb1.Timestamp)(that.EndTime)) {
		return false
	}
	if p, q := this.WinningTeamUrn, that.WinningTeamUrn; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.WinReason, that.WinReason; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.HomeWon, that.HomeWon; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundInfoState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundInfoState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundTimeState) EqualVT(that *CS2RoundTimeState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundTimeState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundTimeState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombState) EqualVT(that *CS2BombState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2BombState_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombState_Carried) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Carried)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Carried, that.Carried; p != q {
		if p == nil {
			p = &CS2BombCarriedState{}
		}
		if q == nil {
			q = &CS2BombCarriedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Dropped) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Dropped)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Dropped, that.Dropped; p != q {
		if p == nil {
			p = &CS2BombDroppedState{}
		}
		if q == nil {
			q = &CS2BombDroppedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Planting) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Planting)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Planting, that.Planting; p != q {
		if p == nil {
			p = &CS2BombPlantingState{}
		}
		if q == nil {
			q = &CS2BombPlantingState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Planted) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Planted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Planted, that.Planted; p != q {
		if p == nil {
			p = &CS2BombPlantedState{}
		}
		if q == nil {
			q = &CS2BombPlantedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Defusing) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Defusing)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Defusing, that.Defusing; p != q {
		if p == nil {
			p = &CS2BombDefusingState{}
		}
		if q == nil {
			q = &CS2BombDefusingState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Defused) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Defused)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Defused, that.Defused; p != q {
		if p == nil {
			p = &CS2BombDefusedState{}
		}
		if q == nil {
			q = &CS2BombDefusedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Exploded) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Exploded)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Exploded, that.Exploded; p != q {
		if p == nil {
			p = &CS2BombExplodedState{}
		}
		if q == nil {
			q = &CS2BombExplodedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombCarriedState) EqualVT(that *CS2BombCarriedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombCarriedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombCarriedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDroppedState) EqualVT(that *CS2BombDroppedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DroppedByPlayerUrn != that.DroppedByPlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDroppedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDroppedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombPlantingState) EqualVT(that *CS2BombPlantingState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*durationpb1.Duration)(this.Countdown).EqualVT((*durationpb1.Duration)(that.Countdown)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombPlantingState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombPlantingState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombPlantedState) EqualVT(that *CS2BombPlantedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlantedByPlayerUrn != that.PlantedByPlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.PlantedAt).EqualVT((*timestamppb1.Timestamp)(that.PlantedAt)) {
		return false
	}
	if !(*durationpb1.Duration)(this.Countdown).EqualVT((*durationpb1.Duration)(that.Countdown)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombPlantedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombPlantedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDefusingState) EqualVT(that *CS2BombDefusingState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*durationpb1.Duration)(this.Countdown).EqualVT((*durationpb1.Duration)(that.Countdown)) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.DefuseStartedAt).EqualVT((*timestamppb1.Timestamp)(that.DefuseStartedAt)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDefusingState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDefusingState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDefusedState) EqualVT(that *CS2BombDefusedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DefusedByPlayerUrn != that.DefusedByPlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.DefusedAt).EqualVT((*timestamppb1.Timestamp)(that.DefusedAt)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDefusedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDefusedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombExplodedState) EqualVT(that *CS2BombExplodedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.ExplodedAt).EqualVT((*timestamppb1.Timestamp)(that.ExplodedAt)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombExplodedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombExplodedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamMapStatePartialUpdate_Payload) EqualVT(that *CS2TeamMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2TeamMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate) EqualVT(thatIface isCS2TeamMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerMapStatesPartialUpdate, that.PlayerMapStatesPartialUpdate; p != q {
		if p == nil {
			p = &CS2PlayerMapStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2PlayerMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2TeamMapStatePartialUpdate_Payload_PlayerState) EqualVT(thatIface isCS2TeamMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2TeamMapStatePartialUpdate_Payload_PlayerState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerState, that.PlayerState; p != q {
		if p == nil {
			p = &CS2PlayerMapState{}
		}
		if q == nil {
			q = &CS2PlayerMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2TeamMapStatePartialUpdate) EqualVT(that *CS2TeamMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamMapState) EqualVT(that *CS2TeamMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Side != that.Side {
		return false
	}
	if len(this.PlayerMapStates) != len(that.PlayerMapStates) {
		return false
	}
	for i, vx := range this.PlayerMapStates {
		vy, ok := that.PlayerMapStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerMapState{}
			}
			if q == nil {
				q = &CS2PlayerMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamCurrentRoundStatePartialUpdate_Payload) EqualVT(that *CS2TeamCurrentRoundStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamCurrentRoundStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamCurrentRoundStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate) EqualVT(thatIface isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerRoundStatesPartialUpdate, that.PlayerRoundStatesPartialUpdate; p != q {
		if p == nil {
			p = &CS2PlayerCurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2PlayerCurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState) EqualVT(thatIface isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerState, that.PlayerState; p != q {
		if p == nil {
			p = &CS2PlayerCurrentRoundState{}
		}
		if q == nil {
			q = &CS2PlayerCurrentRoundState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2TeamCurrentRoundStatePartialUpdate) EqualVT(that *CS2TeamCurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamCurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamCurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamCurrentRoundState) EqualVT(that *CS2TeamCurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if len(this.PlayerRoundStates) != len(that.PlayerRoundStates) {
		return false
	}
	for i, vx := range this.PlayerRoundStates {
		vy, ok := that.PlayerRoundStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerCurrentRoundState{}
			}
			if q == nil {
				q = &CS2PlayerCurrentRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamCurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamCurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PreviousTeamRoundState) EqualVT(that *CS2PreviousTeamRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if len(this.Players) != len(that.Players) {
		return false
	}
	for i, vx := range this.Players {
		vy, ok := that.Players[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerPreviousRoundState{}
			}
			if q == nil {
				q = &CS2PlayerPreviousRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PreviousTeamRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PreviousTeamRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerMapStatePartialUpdate_Payload) EqualVT(that *CS2PlayerMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2PlayerMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerMapStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isCS2PlayerMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2PlayerMapStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &CS2PlayerMapStatisticsState{}
		}
		if q == nil {
			q = &CS2PlayerMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerMapStatePartialUpdate) EqualVT(that *CS2PlayerMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerMapState) EqualVT(that *CS2PlayerMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.PlayerName != that.PlayerName {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if this.SlotId != that.SlotId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerMapStatisticsState) EqualVT(that *CS2PlayerMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if this.OpeningKills != that.OpeningKills {
		return false
	}
	if this.OpeningDeaths != that.OpeningDeaths {
		return false
	}
	if this.TotalDamage != that.TotalDamage {
		return false
	}
	if this.AverageDamagePerRound != that.AverageDamagePerRound {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload) EqualVT(that *CS2PlayerCurrentRoundStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &CS2PlayerCurrentRoundStatisticsState{}
		}
		if q == nil {
			q = &CS2PlayerCurrentRoundStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items) EqualVT(thatIface isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Items, that.Items; p != q {
		if p == nil {
			p = &CS2PlayerItemsState{}
		}
		if q == nil {
			q = &CS2PlayerItemsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position) EqualVT(thatIface isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Position, that.Position; p != q {
		if p == nil {
			p = &CS2PlayerPositionState{}
		}
		if q == nil {
			q = &CS2PlayerPositionState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate) EqualVT(that *CS2PlayerCurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerCurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerCurrentRoundState) EqualVT(that *CS2PlayerCurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.PlayerName != that.PlayerName {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if !this.Items.EqualVT(that.Items) {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if this.SlotId != that.SlotId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerCurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerCurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerCurrentRoundStatisticsState) EqualVT(that *CS2PlayerCurrentRoundStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	if this.Health != that.Health {
		return false
	}
	if this.Armor != that.Armor {
		return false
	}
	if this.Balance != that.Balance {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if p, q := this.Damage, that.Damage; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerCurrentRoundStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerCurrentRoundStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerItemsState) EqualVT(that *CS2PlayerItemsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.EquipmentValue != that.EquipmentValue {
		return false
	}
	if len(this.Items) != len(that.Items) {
		return false
	}
	for i, vx := range this.Items {
		vy := that.Items[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2Item{}
			}
			if q == nil {
				q = &CS2Item{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerItemsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerItemsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerPreviousRoundState) EqualVT(that *CS2PlayerPreviousRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.PlayerName != that.PlayerName {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerPreviousRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerPreviousRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerPositionState) EqualVT(that *CS2PlayerPositionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerPositionState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerPositionState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerStatistics) EqualVT(that *CS2PlayerStatistics) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.FriendlyKills != that.FriendlyKills {
		return false
	}
	if this.EnemyKills != that.EnemyKills {
		return false
	}
	if this.SelfKills != that.SelfKills {
		return false
	}
	if this.Deaths != that.Deaths {
		return false
	}
	if this.Assists != that.Assists {
		return false
	}
	if this.Headshots != that.Headshots {
		return false
	}
	if p, q := this.FriendlyDamageDealtArmor, that.FriendlyDamageDealtArmor; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.FriendlyDamageDealtHealth, that.FriendlyDamageDealtHealth; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.EnemyDamageDealtArmor, that.EnemyDamageDealtArmor; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.EnemyDamageDealtHealth, that.EnemyDamageDealtHealth; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.EnemyDamageDealtArmorRaw, that.EnemyDamageDealtArmorRaw; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.EnemyDamageDealtHealthRaw, that.EnemyDamageDealtHealthRaw; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if this.Damage != that.Damage {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerStatistics) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerStatistics)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Item) EqualVT(that *CS2Item) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.WeaponType != that.WeaponType {
		return false
	}
	if this.Count != that.Count {
		return false
	}
	if this.IsActive != that.IsActive {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Item) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Item)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Position) EqualVT(that *CS2Position) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.X != that.X {
		return false
	}
	if this.Y != that.Y {
		return false
	}
	if this.Angle != that.Angle {
		return false
	}
	if this.Z != that.Z {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Position) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Position)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Event) EqualVT(that *CS2Event) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Event == nil && that.Event != nil {
		return false
	} else if this.Event != nil {
		if that.Event == nil {
			return false
		}
		if !this.Event.(interface{ EqualVT(isCS2Event_Event) bool }).EqualVT(that.Event) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Event) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Event)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Event_BombDefuseStarted) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombDefuseStarted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombDefuseStarted, that.BombDefuseStarted; p != q {
		if p == nil {
			p = &CS2BombDefuseStarted{}
		}
		if q == nil {
			q = &CS2BombDefuseStarted{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_BombDefused) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombDefused)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombDefused, that.BombDefused; p != q {
		if p == nil {
			p = &CS2BombDefused{}
		}
		if q == nil {
			q = &CS2BombDefused{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_BombExploded) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombExploded)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombExploded, that.BombExploded; p != q {
		if p == nil {
			p = &CS2BombExploded{}
		}
		if q == nil {
			q = &CS2BombExploded{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_BombPlanted) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombPlanted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombPlanted, that.BombPlanted; p != q {
		if p == nil {
			p = &CS2BombPlanted{}
		}
		if q == nil {
			q = &CS2BombPlanted{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_DamageDealt) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_DamageDealt)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DamageDealt, that.DamageDealt; p != q {
		if p == nil {
			p = &CS2DamageDealt{}
		}
		if q == nil {
			q = &CS2DamageDealt{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_FreezeTimeEnded) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_FreezeTimeEnded)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FreezeTimeEnded, that.FreezeTimeEnded; p != q {
		if p == nil {
			p = &CS2FreezeTimeEnded{}
		}
		if q == nil {
			q = &CS2FreezeTimeEnded{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_FreezeTimeStarted) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_FreezeTimeStarted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FreezeTimeStarted, that.FreezeTimeStarted; p != q {
		if p == nil {
			p = &CS2FreezeTimeStarted{}
		}
		if q == nil {
			q = &CS2FreezeTimeStarted{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_ItemDrop) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_ItemDrop)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ItemDrop, that.ItemDrop; p != q {
		if p == nil {
			p = &CS2ItemDrop{}
		}
		if q == nil {
			q = &CS2ItemDrop{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_ItemPickUp) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_ItemPickUp)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ItemPickUp, that.ItemPickUp; p != q {
		if p == nil {
			p = &CS2ItemPickUp{}
		}
		if q == nil {
			q = &CS2ItemPickUp{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_ItemPurchase) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_ItemPurchase)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ItemPurchase, that.ItemPurchase; p != q {
		if p == nil {
			p = &CS2ItemPurchase{}
		}
		if q == nil {
			q = &CS2ItemPurchase{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_ItemThrow) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_ItemThrow)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ItemThrow, that.ItemThrow; p != q {
		if p == nil {
			p = &CS2ItemThrow{}
		}
		if q == nil {
			q = &CS2ItemThrow{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_Kill) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_Kill)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Kill, that.Kill; p != q {
		if p == nil {
			p = &CS2Kill{}
		}
		if q == nil {
			q = &CS2Kill{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_Death) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_Death)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Death, that.Death; p != q {
		if p == nil {
			p = &CS2Death{}
		}
		if q == nil {
			q = &CS2Death{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_MapEnd) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_MapEnd)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MapEnd, that.MapEnd; p != q {
		if p == nil {
			p = &CS2MapEnd{}
		}
		if q == nil {
			q = &CS2MapEnd{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_MapStart) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_MapStart)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MapStart, that.MapStart; p != q {
		if p == nil {
			p = &CS2MapStart{}
		}
		if q == nil {
			q = &CS2MapStart{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundEnd) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundEnd)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundEnd, that.RoundEnd; p != q {
		if p == nil {
			p = &CS2RoundEnd{}
		}
		if q == nil {
			q = &CS2RoundEnd{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundPause) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundPause)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundPause, that.RoundPause; p != q {
		if p == nil {
			p = &CS2RoundPause{}
		}
		if q == nil {
			q = &CS2RoundPause{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundResume) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundResume)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundResume, that.RoundResume; p != q {
		if p == nil {
			p = &CS2RoundResume{}
		}
		if q == nil {
			q = &CS2RoundResume{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundRollback) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundRollback)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundRollback, that.RoundRollback; p != q {
		if p == nil {
			p = &CS2RoundRollback{}
		}
		if q == nil {
			q = &CS2RoundRollback{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundStart) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundStart)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundStart, that.RoundStart; p != q {
		if p == nil {
			p = &CS2RoundStart{}
		}
		if q == nil {
			q = &CS2RoundStart{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_BombPlantStarted) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombPlantStarted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombPlantStarted, that.BombPlantStarted; p != q {
		if p == nil {
			p = &CS2BombPlantStarted{}
		}
		if q == nil {
			q = &CS2BombPlantStarted{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerBalance) EqualVT(that *CS2PlayerBalance) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Balance != that.Balance {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerBalance) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerBalance)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerItems) EqualVT(that *CS2PlayerItems) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.EquipmentValue != that.EquipmentValue {
		return false
	}
	if len(this.Items) != len(that.Items) {
		return false
	}
	for i, vx := range this.Items {
		vy := that.Items[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2Item{}
			}
			if q == nil {
				q = &CS2Item{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerItems) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerItems)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDefuseStarted) EqualVT(that *CS2BombDefuseStarted) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDefuseStarted) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDefuseStarted)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDefused) EqualVT(that *CS2BombDefused) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDefused) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDefused)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombExploded) EqualVT(that *CS2BombExploded) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombExploded) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombExploded)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombPlantStarted) EqualVT(that *CS2BombPlantStarted) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombPlantStarted) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombPlantStarted)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombPlanted) EqualVT(that *CS2BombPlanted) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombPlanted) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombPlanted)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2DamageDealt) EqualVT(that *CS2DamageDealt) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.KillerPosition.EqualVT(that.KillerPosition) {
		return false
	}
	if this.KillerUrn != that.KillerUrn {
		return false
	}
	if this.KillerTeamUrn != that.KillerTeamUrn {
		return false
	}
	if this.VictimUrn != that.VictimUrn {
		return false
	}
	if this.VictimTeamUrn != that.VictimTeamUrn {
		return false
	}
	if this.Weapon != that.Weapon {
		return false
	}
	if this.Hitgroup != that.Hitgroup {
		return false
	}
	if this.HealthDeducted != that.HealthDeducted {
		return false
	}
	if this.HealthRemaining != that.HealthRemaining {
		return false
	}
	if this.ArmorDeducted != that.ArmorDeducted {
		return false
	}
	if this.ArmorRemaining != that.ArmorRemaining {
		return false
	}
	if !this.VictimPosition.EqualVT(that.VictimPosition) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2DamageDealt) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2DamageDealt)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2FreezeTimeEnded) EqualVT(that *CS2FreezeTimeEnded) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if len(this.PlayerBalances) != len(that.PlayerBalances) {
		return false
	}
	for i, vx := range this.PlayerBalances {
		vy, ok := that.PlayerBalances[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerBalance{}
			}
			if q == nil {
				q = &CS2PlayerBalance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PlayerInventories) != len(that.PlayerInventories) {
		return false
	}
	for i, vx := range this.PlayerInventories {
		vy, ok := that.PlayerInventories[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerItems{}
			}
			if q == nil {
				q = &CS2PlayerItems{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2FreezeTimeEnded) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2FreezeTimeEnded)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2FreezeTimeStarted) EqualVT(that *CS2FreezeTimeStarted) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if len(this.PlayerBalances) != len(that.PlayerBalances) {
		return false
	}
	for i, vx := range this.PlayerBalances {
		vy, ok := that.PlayerBalances[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerBalance{}
			}
			if q == nil {
				q = &CS2PlayerBalance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.TeamsRoundInfo) != len(that.TeamsRoundInfo) {
		return false
	}
	for i, vx := range this.TeamsRoundInfo {
		vy, ok := that.TeamsRoundInfo[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2FreezeTimeStarted) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2FreezeTimeStarted)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2ItemDrop) EqualVT(that *CS2ItemDrop) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Item != that.Item {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2ItemDrop) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2ItemDrop)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2ItemPickUp) EqualVT(that *CS2ItemPickUp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Item != that.Item {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2ItemPickUp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2ItemPickUp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2ItemPurchase) EqualVT(that *CS2ItemPurchase) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Item != that.Item {
		return false
	}
	if this.PlayerBalance != that.PlayerBalance {
		return false
	}
	if this.EquipmentValue != that.EquipmentValue {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2ItemPurchase) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2ItemPurchase)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2ItemThrow) EqualVT(that *CS2ItemThrow) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Item != that.Item {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2ItemThrow) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2ItemThrow)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Kill) EqualVT(that *CS2Kill) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.KillerPosition.EqualVT(that.KillerPosition) {
		return false
	}
	if this.KillerUrn != that.KillerUrn {
		return false
	}
	if this.KillerTeamUrn != that.KillerTeamUrn {
		return false
	}
	if this.VictimUrn != that.VictimUrn {
		return false
	}
	if this.VictimTeamUrn != that.VictimTeamUrn {
		return false
	}
	if this.Weapon != that.Weapon {
		return false
	}
	if this.Headshot != that.Headshot {
		return false
	}
	if this.Penetrated != that.Penetrated {
		return false
	}
	if len(this.Assistants) != len(that.Assistants) {
		return false
	}
	for i, vx := range this.Assistants {
		vy := that.Assistants[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Kill) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Kill)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Death) EqualVT(that *CS2Death) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.TotalDeaths != that.TotalDeaths {
		return false
	}
	if this.Suicide != that.Suicide {
		return false
	}
	if this.DeathByBomb != that.DeathByBomb {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Death) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Death)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MapEnd) EqualVT(that *CS2MapEnd) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.MapName != that.MapName {
		return false
	}
	if this.WinningTeamUrn != that.WinningTeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MapEnd) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MapEnd)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MapStart) EqualVT(that *CS2MapStart) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if this.MapName != that.MapName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MapStart) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MapStart)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundEnd) EqualVT(that *CS2RoundEnd) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.WinningTeamUrn != that.WinningTeamUrn {
		return false
	}
	if this.WinReason != that.WinReason {
		return false
	}
	if len(this.PlayerBalances) != len(that.PlayerBalances) {
		return false
	}
	for i, vx := range this.PlayerBalances {
		vy, ok := that.PlayerBalances[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerBalance{}
			}
			if q == nil {
				q = &CS2PlayerBalance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PlayerInventories) != len(that.PlayerInventories) {
		return false
	}
	for i, vx := range this.PlayerInventories {
		vy, ok := that.PlayerInventories[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerItems{}
			}
			if q == nil {
				q = &CS2PlayerItems{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundEnd) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundEnd)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundPause) EqualVT(that *CS2RoundPause) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundPause) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundPause)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundResume) EqualVT(that *CS2RoundResume) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundResume) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundResume)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundRollback) EqualVT(that *CS2RoundRollback) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.NextRoundNumber != that.NextRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundRollback) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundRollback)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundStart) EqualVT(that *CS2RoundStart) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.MapTime).EqualVT((*durationpb1.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.TimeRemaining).EqualVT((*durationpb1.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundStart) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundStart)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
