// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.1-0.20241121165744-79df5c4772f2
// source: bragi/cs2.proto

package bragi

import (
	durationpb "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (this *CS2MatchMessage_Payload) EqualVT(that *CS2MatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2MatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchMessage_Payload_Snapshot) EqualVT(thatIface isCS2MatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*CS2MatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &CS2MatchSnapshot{}
		}
		if q == nil {
			q = &CS2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchMessage_Payload_Update) EqualVT(thatIface isCS2MatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*CS2MatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &CS2MatchUpdate{}
		}
		if q == nil {
			q = &CS2MatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchMessage) EqualVT(that *CS2MatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchSnapshot) EqualVT(that *CS2MatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchUpdate_Payload) EqualVT(that *CS2MatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2MatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchUpdate_Payload_MatchState) EqualVT(thatIface isCS2MatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2MatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &CS2MatchState{}
		}
		if q == nil {
			q = &CS2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isCS2MatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2MatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &CS2MatchStatePartialUpdates{}
		}
		if q == nil {
			q = &CS2MatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchUpdate) EqualVT(that *CS2MatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2Event{}
			}
			if q == nil {
				q = &CS2Event{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchStatePartialUpdates) EqualVT(that *CS2MatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2MatchStatePartialUpdate{}
			}
			if q == nil {
				q = &CS2MatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchEvents) EqualVT(that *CS2MatchEvents) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2Event{}
			}
			if q == nil {
				q = &CS2Event{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchEvents) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchEvents)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchStatePartialUpdate) EqualVT(that *CS2MatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isCS2MatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchStatePartialUpdate_Score) EqualVT(thatIface isCS2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2MatchStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &CS2MatchScoreState{}
		}
		if q == nil {
			q = &CS2MatchScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchStatePartialUpdate_CurrentMapState) EqualVT(thatIface isCS2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2MatchStatePartialUpdate_CurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapState, that.CurrentMapState; p != q {
		if p == nil {
			p = &CS2CurrentMapState{}
		}
		if q == nil {
			q = &CS2CurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate) EqualVT(thatIface isCS2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapStatePartialUpdate, that.CurrentMapStatePartialUpdate; p != q {
		if p == nil {
			p = &CS2CurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2CurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2MatchState) EqualVT(that *CS2MatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.CurrentMapState.EqualVT(that.CurrentMapState) {
		return false
	}
	if len(this.PreviousMapStates) != len(that.PreviousMapStates) {
		return false
	}
	for i, vx := range this.PreviousMapStates {
		vy := that.PreviousMapStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PreviousMapState{}
			}
			if q == nil {
				q = &CS2PreviousMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if p, q := this.WinTeamUrn, that.WinTeamUrn; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MatchScoreState) EqualVT(that *CS2MatchScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MatchScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MatchScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Team) EqualVT(that *CS2Team) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.TeamName != that.TeamName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Team) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Team)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2CurrentMapStatePartialUpdate) EqualVT(that *CS2CurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isCS2CurrentMapStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2CurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2CurrentMapStatePartialUpdate_Info) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_Info)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Info, that.Info; p != q {
		if p == nil {
			p = &CS2MapInfoState{}
		}
		if q == nil {
			q = &CS2MapInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapStatePartialUpdate_Score) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &CS2MapScoreState{}
		}
		if q == nil {
			q = &CS2MapScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapStatePartialUpdate_CurrentRoundState) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_CurrentRoundState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentRoundState, that.CurrentRoundState; p != q {
		if p == nil {
			p = &CS2CurrentRoundState{}
		}
		if q == nil {
			q = &CS2CurrentRoundState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentRoundStatePartialUpdate, that.CurrentRoundStatePartialUpdate; p != q {
		if p == nil {
			p = &CS2CurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2CurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate) EqualVT(thatIface isCS2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamMapStatesPartialUpdate, that.TeamMapStatesPartialUpdate; p != q {
		if p == nil {
			p = &CS2TeamMapStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2TeamMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentMapState) EqualVT(that *CS2CurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if !this.Info.EqualVT(that.Info) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if !this.CurrentRoundState.EqualVT(that.CurrentRoundState) {
		return false
	}
	if len(this.PreviousRoundStates) != len(that.PreviousRoundStates) {
		return false
	}
	for i, vx := range this.PreviousRoundStates {
		vy := that.PreviousRoundStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PreviousRoundState{}
			}
			if q == nil {
				q = &CS2PreviousRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.TeamMapStates) != len(that.TeamMapStates) {
		return false
	}
	for i, vx := range this.TeamMapStates {
		vy, ok := that.TeamMapStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2TeamMapState{}
			}
			if q == nil {
				q = &CS2TeamMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2CurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2CurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PreviousMapState) EqualVT(that *CS2PreviousMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if !this.Info.EqualVT(that.Info) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if len(this.RoundStates) != len(that.RoundStates) {
		return false
	}
	for i, vx := range this.RoundStates {
		vy := that.RoundStates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PreviousRoundState{}
			}
			if q == nil {
				q = &CS2PreviousRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.TeamMapStates) != len(that.TeamMapStates) {
		return false
	}
	for i, vx := range this.TeamMapStates {
		vy, ok := that.TeamMapStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2TeamMapState{}
			}
			if q == nil {
				q = &CS2TeamMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PreviousMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PreviousMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MapInfoState) EqualVT(that *CS2MapInfoState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapName != that.MapName {
		return false
	}
	if this.MaxRoundsDefault != that.MaxRoundsDefault {
		return false
	}
	if this.MaxRoundsOvertime != that.MaxRoundsOvertime {
		return false
	}
	if !(*durationpb.Duration)(this.FreezeTimeDuration).EqualVT((*durationpb.Duration)(that.FreezeTimeDuration)) {
		return false
	}
	if !(*durationpb.Duration)(this.RoundTimeDuration).EqualVT((*durationpb.Duration)(that.RoundTimeDuration)) {
		return false
	}
	if !(*durationpb.Duration)(this.BombTimeDuration).EqualVT((*durationpb.Duration)(that.BombTimeDuration)) {
		return false
	}
	if !(*timestamppb.Timestamp)(this.StartTime).EqualVT((*timestamppb.Timestamp)(that.StartTime)) {
		return false
	}
	if !(*timestamppb.Timestamp)(this.EndTime).EqualVT((*timestamppb.Timestamp)(that.EndTime)) {
		return false
	}
	if this.MapEnded != that.MapEnded {
		return false
	}
	if p, q := this.WinTeamUrn, that.WinTeamUrn; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MapInfoState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MapInfoState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MapScoreState) EqualVT(that *CS2MapScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MapScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MapScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2CurrentRoundStatePartialUpdate) EqualVT(that *CS2CurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isCS2CurrentRoundStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2CurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2CurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2CurrentRoundStatePartialUpdate_Info) EqualVT(thatIface isCS2CurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentRoundStatePartialUpdate_Info)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Info, that.Info; p != q {
		if p == nil {
			p = &CS2RoundInfoState{}
		}
		if q == nil {
			q = &CS2RoundInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentRoundStatePartialUpdate_Time) EqualVT(thatIface isCS2CurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentRoundStatePartialUpdate_Time)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Time, that.Time; p != q {
		if p == nil {
			p = &CS2RoundTimeState{}
		}
		if q == nil {
			q = &CS2RoundTimeState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentRoundStatePartialUpdate_BombState) EqualVT(thatIface isCS2CurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentRoundStatePartialUpdate_BombState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombState, that.BombState; p != q {
		if p == nil {
			p = &CS2BombState{}
		}
		if q == nil {
			q = &CS2BombState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate) EqualVT(thatIface isCS2CurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*CS2CurrentRoundStatePartialUpdate_TeamStatesPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamStatesPartialUpdate, that.TeamStatesPartialUpdate; p != q {
		if p == nil {
			p = &CS2TeamCurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2TeamCurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2CurrentRoundState) EqualVT(that *CS2CurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RoundNumber != that.RoundNumber {
		return false
	}
	if !this.Info.EqualVT(that.Info) {
		return false
	}
	if !this.Time.EqualVT(that.Time) {
		return false
	}
	if !this.BombState.EqualVT(that.BombState) {
		return false
	}
	if len(this.TeamStates) != len(that.TeamStates) {
		return false
	}
	for i, vx := range this.TeamStates {
		vy, ok := that.TeamStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2TeamCurrentRoundState{}
			}
			if q == nil {
				q = &CS2TeamCurrentRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2CurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2CurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PreviousRoundState) EqualVT(that *CS2PreviousRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RoundNumber != that.RoundNumber {
		return false
	}
	if !this.Info.EqualVT(that.Info) {
		return false
	}
	if len(this.TeamStates) != len(that.TeamStates) {
		return false
	}
	for i, vx := range this.TeamStates {
		vy, ok := that.TeamStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PreviousTeamRoundState{}
			}
			if q == nil {
				q = &CS2PreviousTeamRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PreviousRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PreviousRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundInfoState) EqualVT(that *CS2RoundInfoState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.RoundType != that.RoundType {
		return false
	}
	if !(*timestamppb.Timestamp)(this.StartTime).EqualVT((*timestamppb.Timestamp)(that.StartTime)) {
		return false
	}
	if !(*timestamppb.Timestamp)(this.EndTime).EqualVT((*timestamppb.Timestamp)(that.EndTime)) {
		return false
	}
	if p, q := this.WinningTeamUrn, that.WinningTeamUrn; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.WinReason, that.WinReason; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.HomeWon, that.HomeWon; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundInfoState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundInfoState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundTimeState) EqualVT(that *CS2RoundTimeState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundTimeState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundTimeState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombState) EqualVT(that *CS2BombState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2BombState_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombState_Carried) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Carried)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Carried, that.Carried; p != q {
		if p == nil {
			p = &CS2BombCarriedState{}
		}
		if q == nil {
			q = &CS2BombCarriedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Dropped) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Dropped)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Dropped, that.Dropped; p != q {
		if p == nil {
			p = &CS2BombDroppedState{}
		}
		if q == nil {
			q = &CS2BombDroppedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Planting) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Planting)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Planting, that.Planting; p != q {
		if p == nil {
			p = &CS2BombPlantingState{}
		}
		if q == nil {
			q = &CS2BombPlantingState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Planted) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Planted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Planted, that.Planted; p != q {
		if p == nil {
			p = &CS2BombPlantedState{}
		}
		if q == nil {
			q = &CS2BombPlantedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Defusing) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Defusing)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Defusing, that.Defusing; p != q {
		if p == nil {
			p = &CS2BombDefusingState{}
		}
		if q == nil {
			q = &CS2BombDefusingState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Defused) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Defused)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Defused, that.Defused; p != q {
		if p == nil {
			p = &CS2BombDefusedState{}
		}
		if q == nil {
			q = &CS2BombDefusedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombState_Exploded) EqualVT(thatIface isCS2BombState_Payload) bool {
	that, ok := thatIface.(*CS2BombState_Exploded)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Exploded, that.Exploded; p != q {
		if p == nil {
			p = &CS2BombExplodedState{}
		}
		if q == nil {
			q = &CS2BombExplodedState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2BombCarriedState) EqualVT(that *CS2BombCarriedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombCarriedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombCarriedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDroppedState) EqualVT(that *CS2BombDroppedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DroppedByPlayerUrn != that.DroppedByPlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDroppedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDroppedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombPlantingState) EqualVT(that *CS2BombPlantingState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*durationpb.Duration)(this.Countdown).EqualVT((*durationpb.Duration)(that.Countdown)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombPlantingState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombPlantingState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombPlantedState) EqualVT(that *CS2BombPlantedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlantedByPlayerUrn != that.PlantedByPlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*timestamppb.Timestamp)(this.PlantedAt).EqualVT((*timestamppb.Timestamp)(that.PlantedAt)) {
		return false
	}
	if !(*durationpb.Duration)(this.Countdown).EqualVT((*durationpb.Duration)(that.Countdown)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombPlantedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombPlantedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDefusingState) EqualVT(that *CS2BombDefusingState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*durationpb.Duration)(this.Countdown).EqualVT((*durationpb.Duration)(that.Countdown)) {
		return false
	}
	if !(*timestamppb.Timestamp)(this.DefuseStartedAt).EqualVT((*timestamppb.Timestamp)(that.DefuseStartedAt)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDefusingState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDefusingState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDefusedState) EqualVT(that *CS2BombDefusedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.DefusedByPlayerUrn != that.DefusedByPlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*timestamppb.Timestamp)(this.DefusedAt).EqualVT((*timestamppb.Timestamp)(that.DefusedAt)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDefusedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDefusedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombExplodedState) EqualVT(that *CS2BombExplodedState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !(*timestamppb.Timestamp)(this.ExplodedAt).EqualVT((*timestamppb.Timestamp)(that.ExplodedAt)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombExplodedState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombExplodedState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamMapStatePartialUpdate_Payload) EqualVT(that *CS2TeamMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2TeamMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate) EqualVT(thatIface isCS2TeamMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2TeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerMapStatesPartialUpdate, that.PlayerMapStatesPartialUpdate; p != q {
		if p == nil {
			p = &CS2PlayerMapStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2PlayerMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2TeamMapStatePartialUpdate_Payload_PlayerState) EqualVT(thatIface isCS2TeamMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2TeamMapStatePartialUpdate_Payload_PlayerState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerState, that.PlayerState; p != q {
		if p == nil {
			p = &CS2PlayerMapState{}
		}
		if q == nil {
			q = &CS2PlayerMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2TeamMapStatePartialUpdate) EqualVT(that *CS2TeamMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamMapState) EqualVT(that *CS2TeamMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Side != that.Side {
		return false
	}
	if len(this.PlayerMapStates) != len(that.PlayerMapStates) {
		return false
	}
	for i, vx := range this.PlayerMapStates {
		vy, ok := that.PlayerMapStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerMapState{}
			}
			if q == nil {
				q = &CS2PlayerMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamCurrentRoundStatePartialUpdate_Payload) EqualVT(that *CS2TeamCurrentRoundStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamCurrentRoundStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamCurrentRoundStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate) EqualVT(thatIface isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerRoundStatesPartialUpdate, that.PlayerRoundStatesPartialUpdate; p != q {
		if p == nil {
			p = &CS2PlayerCurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &CS2PlayerCurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState) EqualVT(thatIface isCS2TeamCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2TeamCurrentRoundStatePartialUpdate_Payload_PlayerState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerState, that.PlayerState; p != q {
		if p == nil {
			p = &CS2PlayerCurrentRoundState{}
		}
		if q == nil {
			q = &CS2PlayerCurrentRoundState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2TeamCurrentRoundStatePartialUpdate) EqualVT(that *CS2TeamCurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamCurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamCurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2TeamCurrentRoundState) EqualVT(that *CS2TeamCurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if len(this.PlayerRoundStates) != len(that.PlayerRoundStates) {
		return false
	}
	for i, vx := range this.PlayerRoundStates {
		vy, ok := that.PlayerRoundStates[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerCurrentRoundState{}
			}
			if q == nil {
				q = &CS2PlayerCurrentRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2TeamCurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2TeamCurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PreviousTeamRoundState) EqualVT(that *CS2PreviousTeamRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if len(this.Players) != len(that.Players) {
		return false
	}
	for i, vx := range this.Players {
		vy, ok := that.Players[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerPreviousRoundState{}
			}
			if q == nil {
				q = &CS2PlayerPreviousRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PreviousTeamRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PreviousTeamRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerMapStatePartialUpdate_Payload) EqualVT(that *CS2PlayerMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2PlayerMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerMapStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isCS2PlayerMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2PlayerMapStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &CS2PlayerMapStatisticsState{}
		}
		if q == nil {
			q = &CS2PlayerMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerMapStatePartialUpdate) EqualVT(that *CS2PlayerMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerMapState) EqualVT(that *CS2PlayerMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.PlayerName != that.PlayerName {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if this.SlotId != that.SlotId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerMapStatisticsState) EqualVT(that *CS2PlayerMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if this.OpeningKills != that.OpeningKills {
		return false
	}
	if this.OpeningDeaths != that.OpeningDeaths {
		return false
	}
	if this.TotalDamage != that.TotalDamage {
		return false
	}
	if this.AverageDamagePerRound != that.AverageDamagePerRound {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload) EqualVT(that *CS2PlayerCurrentRoundStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &CS2PlayerCurrentRoundStatisticsState{}
		}
		if q == nil {
			q = &CS2PlayerCurrentRoundStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items) EqualVT(thatIface isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Items)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Items, that.Items; p != q {
		if p == nil {
			p = &CS2PlayerItemsState{}
		}
		if q == nil {
			q = &CS2PlayerItemsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position) EqualVT(thatIface isCS2PlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*CS2PlayerCurrentRoundStatePartialUpdate_Payload_Position)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Position, that.Position; p != q {
		if p == nil {
			p = &CS2PlayerPositionState{}
		}
		if q == nil {
			q = &CS2PlayerPositionState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate) EqualVT(that *CS2PlayerCurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerCurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerCurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerCurrentRoundState) EqualVT(that *CS2PlayerCurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.PlayerName != that.PlayerName {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if !this.Items.EqualVT(that.Items) {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if this.SlotId != that.SlotId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerCurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerCurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerCurrentRoundStatisticsState) EqualVT(that *CS2PlayerCurrentRoundStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	if this.Health != that.Health {
		return false
	}
	if this.Armor != that.Armor {
		return false
	}
	if this.Balance != that.Balance {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if p, q := this.Damage, that.Damage; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerCurrentRoundStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerCurrentRoundStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerItemsState) EqualVT(that *CS2PlayerItemsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.EquipmentValue != that.EquipmentValue {
		return false
	}
	if len(this.Items) != len(that.Items) {
		return false
	}
	for i, vx := range this.Items {
		vy := that.Items[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2Item{}
			}
			if q == nil {
				q = &CS2Item{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerItemsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerItemsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerPreviousRoundState) EqualVT(that *CS2PlayerPreviousRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.PlayerName != that.PlayerName {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerPreviousRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerPreviousRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerPositionState) EqualVT(that *CS2PlayerPositionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerPositionState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerPositionState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerStatistics) EqualVT(that *CS2PlayerStatistics) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.FriendlyKills != that.FriendlyKills {
		return false
	}
	if this.EnemyKills != that.EnemyKills {
		return false
	}
	if this.SelfKills != that.SelfKills {
		return false
	}
	if this.Deaths != that.Deaths {
		return false
	}
	if this.Assists != that.Assists {
		return false
	}
	if this.Headshots != that.Headshots {
		return false
	}
	if p, q := this.FriendlyDamageDealtArmor, that.FriendlyDamageDealtArmor; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.FriendlyDamageDealtHealth, that.FriendlyDamageDealtHealth; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.EnemyDamageDealtArmor, that.EnemyDamageDealtArmor; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.EnemyDamageDealtHealth, that.EnemyDamageDealtHealth; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.EnemyDamageDealtArmorRaw, that.EnemyDamageDealtArmorRaw; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.EnemyDamageDealtHealthRaw, that.EnemyDamageDealtHealthRaw; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if this.Damage != that.Damage {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerStatistics) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerStatistics)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Item) EqualVT(that *CS2Item) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.WeaponType != that.WeaponType {
		return false
	}
	if this.Count != that.Count {
		return false
	}
	if this.IsActive != that.IsActive {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Item) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Item)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Position) EqualVT(that *CS2Position) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.X != that.X {
		return false
	}
	if this.Y != that.Y {
		return false
	}
	if this.Angle != that.Angle {
		return false
	}
	if this.Z != that.Z {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Position) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Position)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Event) EqualVT(that *CS2Event) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Event == nil && that.Event != nil {
		return false
	} else if this.Event != nil {
		if that.Event == nil {
			return false
		}
		if !this.Event.(interface{ EqualVT(isCS2Event_Event) bool }).EqualVT(that.Event) {
			return false
		}
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.MapId != that.MapId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Event) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Event)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Event_BombDefuseStarted) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombDefuseStarted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombDefuseStarted, that.BombDefuseStarted; p != q {
		if p == nil {
			p = &CS2BombDefuseStarted{}
		}
		if q == nil {
			q = &CS2BombDefuseStarted{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_BombDefused) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombDefused)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombDefused, that.BombDefused; p != q {
		if p == nil {
			p = &CS2BombDefused{}
		}
		if q == nil {
			q = &CS2BombDefused{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_BombExploded) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombExploded)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombExploded, that.BombExploded; p != q {
		if p == nil {
			p = &CS2BombExploded{}
		}
		if q == nil {
			q = &CS2BombExploded{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_BombPlanted) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombPlanted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombPlanted, that.BombPlanted; p != q {
		if p == nil {
			p = &CS2BombPlanted{}
		}
		if q == nil {
			q = &CS2BombPlanted{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_DamageDealt) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_DamageDealt)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DamageDealt, that.DamageDealt; p != q {
		if p == nil {
			p = &CS2DamageDealt{}
		}
		if q == nil {
			q = &CS2DamageDealt{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_FreezeTimeEnded) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_FreezeTimeEnded)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FreezeTimeEnded, that.FreezeTimeEnded; p != q {
		if p == nil {
			p = &CS2FreezeTimeEnded{}
		}
		if q == nil {
			q = &CS2FreezeTimeEnded{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_FreezeTimeStarted) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_FreezeTimeStarted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FreezeTimeStarted, that.FreezeTimeStarted; p != q {
		if p == nil {
			p = &CS2FreezeTimeStarted{}
		}
		if q == nil {
			q = &CS2FreezeTimeStarted{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_ItemDrop) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_ItemDrop)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ItemDrop, that.ItemDrop; p != q {
		if p == nil {
			p = &CS2ItemDrop{}
		}
		if q == nil {
			q = &CS2ItemDrop{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_ItemPickUp) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_ItemPickUp)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ItemPickUp, that.ItemPickUp; p != q {
		if p == nil {
			p = &CS2ItemPickUp{}
		}
		if q == nil {
			q = &CS2ItemPickUp{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_ItemPurchase) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_ItemPurchase)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ItemPurchase, that.ItemPurchase; p != q {
		if p == nil {
			p = &CS2ItemPurchase{}
		}
		if q == nil {
			q = &CS2ItemPurchase{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_ItemThrow) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_ItemThrow)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ItemThrow, that.ItemThrow; p != q {
		if p == nil {
			p = &CS2ItemThrow{}
		}
		if q == nil {
			q = &CS2ItemThrow{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_Kill) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_Kill)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Kill, that.Kill; p != q {
		if p == nil {
			p = &CS2Kill{}
		}
		if q == nil {
			q = &CS2Kill{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_Death) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_Death)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Death, that.Death; p != q {
		if p == nil {
			p = &CS2Death{}
		}
		if q == nil {
			q = &CS2Death{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_MapEnd) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_MapEnd)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MapEnd, that.MapEnd; p != q {
		if p == nil {
			p = &CS2MapEnd{}
		}
		if q == nil {
			q = &CS2MapEnd{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_MapStart) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_MapStart)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MapStart, that.MapStart; p != q {
		if p == nil {
			p = &CS2MapStart{}
		}
		if q == nil {
			q = &CS2MapStart{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundEnd) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundEnd)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundEnd, that.RoundEnd; p != q {
		if p == nil {
			p = &CS2RoundEnd{}
		}
		if q == nil {
			q = &CS2RoundEnd{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundPause) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundPause)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundPause, that.RoundPause; p != q {
		if p == nil {
			p = &CS2RoundPause{}
		}
		if q == nil {
			q = &CS2RoundPause{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundResume) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundResume)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundResume, that.RoundResume; p != q {
		if p == nil {
			p = &CS2RoundResume{}
		}
		if q == nil {
			q = &CS2RoundResume{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundRollback) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundRollback)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundRollback, that.RoundRollback; p != q {
		if p == nil {
			p = &CS2RoundRollback{}
		}
		if q == nil {
			q = &CS2RoundRollback{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_RoundStart) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_RoundStart)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundStart, that.RoundStart; p != q {
		if p == nil {
			p = &CS2RoundStart{}
		}
		if q == nil {
			q = &CS2RoundStart{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_BombPlantStarted) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_BombPlantStarted)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BombPlantStarted, that.BombPlantStarted; p != q {
		if p == nil {
			p = &CS2BombPlantStarted{}
		}
		if q == nil {
			q = &CS2BombPlantStarted{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2Event_WorldBomb) EqualVT(thatIface isCS2Event_Event) bool {
	that, ok := thatIface.(*CS2Event_WorldBomb)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.WorldBomb, that.WorldBomb; p != q {
		if p == nil {
			p = &CS2WorldBomb{}
		}
		if q == nil {
			q = &CS2WorldBomb{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *CS2PlayerBalance) EqualVT(that *CS2PlayerBalance) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Balance != that.Balance {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerBalance) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerBalance)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2PlayerItems) EqualVT(that *CS2PlayerItems) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.EquipmentValue != that.EquipmentValue {
		return false
	}
	if len(this.Items) != len(that.Items) {
		return false
	}
	for i, vx := range this.Items {
		vy := that.Items[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2Item{}
			}
			if q == nil {
				q = &CS2Item{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2PlayerItems) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2PlayerItems)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDefuseStarted) EqualVT(that *CS2BombDefuseStarted) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDefuseStarted) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDefuseStarted)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombDefused) EqualVT(that *CS2BombDefused) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombDefused) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombDefused)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombExploded) EqualVT(that *CS2BombExploded) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombExploded) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombExploded)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombPlantStarted) EqualVT(that *CS2BombPlantStarted) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombPlantStarted) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombPlantStarted)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2BombPlanted) EqualVT(that *CS2BombPlanted) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.BombSite != that.BombSite {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2BombPlanted) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2BombPlanted)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2DamageDealt) EqualVT(that *CS2DamageDealt) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.KillerPosition.EqualVT(that.KillerPosition) {
		return false
	}
	if this.KillerUrn != that.KillerUrn {
		return false
	}
	if this.KillerTeamUrn != that.KillerTeamUrn {
		return false
	}
	if this.VictimUrn != that.VictimUrn {
		return false
	}
	if this.VictimTeamUrn != that.VictimTeamUrn {
		return false
	}
	if this.Weapon != that.Weapon {
		return false
	}
	if this.Hitgroup != that.Hitgroup {
		return false
	}
	if this.HealthDeducted != that.HealthDeducted {
		return false
	}
	if this.HealthRemaining != that.HealthRemaining {
		return false
	}
	if this.ArmorDeducted != that.ArmorDeducted {
		return false
	}
	if this.ArmorRemaining != that.ArmorRemaining {
		return false
	}
	if !this.VictimPosition.EqualVT(that.VictimPosition) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2DamageDealt) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2DamageDealt)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2FreezeTimeEnded) EqualVT(that *CS2FreezeTimeEnded) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if len(this.PlayerBalances) != len(that.PlayerBalances) {
		return false
	}
	for i, vx := range this.PlayerBalances {
		vy, ok := that.PlayerBalances[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerBalance{}
			}
			if q == nil {
				q = &CS2PlayerBalance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PlayerInventories) != len(that.PlayerInventories) {
		return false
	}
	for i, vx := range this.PlayerInventories {
		vy, ok := that.PlayerInventories[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerItems{}
			}
			if q == nil {
				q = &CS2PlayerItems{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2FreezeTimeEnded) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2FreezeTimeEnded)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2FreezeTimeStarted) EqualVT(that *CS2FreezeTimeStarted) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if len(this.PlayerBalances) != len(that.PlayerBalances) {
		return false
	}
	for i, vx := range this.PlayerBalances {
		vy, ok := that.PlayerBalances[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerBalance{}
			}
			if q == nil {
				q = &CS2PlayerBalance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.TeamsRoundInfo) != len(that.TeamsRoundInfo) {
		return false
	}
	for i, vx := range this.TeamsRoundInfo {
		vy, ok := that.TeamsRoundInfo[i]
		if !ok {
			return false
		}
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2FreezeTimeStarted) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2FreezeTimeStarted)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2ItemDrop) EqualVT(that *CS2ItemDrop) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Item != that.Item {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2ItemDrop) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2ItemDrop)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2ItemPickUp) EqualVT(that *CS2ItemPickUp) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Item != that.Item {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2ItemPickUp) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2ItemPickUp)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2ItemPurchase) EqualVT(that *CS2ItemPurchase) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Item != that.Item {
		return false
	}
	if this.PlayerBalance != that.PlayerBalance {
		return false
	}
	if this.EquipmentValue != that.EquipmentValue {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2ItemPurchase) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2ItemPurchase)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2ItemThrow) EqualVT(that *CS2ItemThrow) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Item != that.Item {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2ItemThrow) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2ItemThrow)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Kill) EqualVT(that *CS2Kill) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.KillerPosition.EqualVT(that.KillerPosition) {
		return false
	}
	if this.KillerUrn != that.KillerUrn {
		return false
	}
	if this.KillerTeamUrn != that.KillerTeamUrn {
		return false
	}
	if this.VictimUrn != that.VictimUrn {
		return false
	}
	if this.VictimTeamUrn != that.VictimTeamUrn {
		return false
	}
	if this.Weapon != that.Weapon {
		return false
	}
	if this.Headshot != that.Headshot {
		return false
	}
	if this.Penetrated != that.Penetrated {
		return false
	}
	if len(this.Assistants) != len(that.Assistants) {
		return false
	}
	for i, vx := range this.Assistants {
		vy := that.Assistants[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Kill) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Kill)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2Death) EqualVT(that *CS2Death) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.TotalDeaths != that.TotalDeaths {
		return false
	}
	if this.Suicide != that.Suicide {
		return false
	}
	if this.DeathByBomb != that.DeathByBomb {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2Death) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2Death)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MapEnd) EqualVT(that *CS2MapEnd) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.MapName != that.MapName {
		return false
	}
	if this.WinningTeamUrn != that.WinningTeamUrn {
		return false
	}
	if this.LightTeamScore != that.LightTeamScore {
		return false
	}
	if this.DarkTeamScore != that.DarkTeamScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MapEnd) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MapEnd)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2MapStart) EqualVT(that *CS2MapStart) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if this.MapName != that.MapName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2MapStart) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2MapStart)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundEnd) EqualVT(that *CS2RoundEnd) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	if this.WinningTeamUrn != that.WinningTeamUrn {
		return false
	}
	if this.WinReason != that.WinReason {
		return false
	}
	if len(this.PlayerBalances) != len(that.PlayerBalances) {
		return false
	}
	for i, vx := range this.PlayerBalances {
		vy, ok := that.PlayerBalances[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerBalance{}
			}
			if q == nil {
				q = &CS2PlayerBalance{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PlayerInventories) != len(that.PlayerInventories) {
		return false
	}
	for i, vx := range this.PlayerInventories {
		vy, ok := that.PlayerInventories[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &CS2PlayerItems{}
			}
			if q == nil {
				q = &CS2PlayerItems{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundEnd) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundEnd)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundPause) EqualVT(that *CS2RoundPause) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundPause) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundPause)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundResume) EqualVT(that *CS2RoundResume) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundResume) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundResume)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundRollback) EqualVT(that *CS2RoundRollback) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.NextRoundNumber != that.NextRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundRollback) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundRollback)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2RoundStart) EqualVT(that *CS2RoundStart) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.MapTime).EqualVT((*durationpb.Duration)(that.MapTime)) {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if this.CurrentRoundNumber != that.CurrentRoundNumber {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2RoundStart) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2RoundStart)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CS2WorldBomb) EqualVT(that *CS2WorldBomb) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	if !this.State.EqualVT(that.State) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CS2WorldBomb) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*CS2WorldBomb)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
