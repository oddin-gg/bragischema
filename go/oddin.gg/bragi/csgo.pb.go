// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: bragi/csgo.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CsgoSide int32

const (
	CsgoSide_CSGO_SIDE_UNSPECIFIED        CsgoSide = 0
	CsgoSide_CSGO_SIDE_COUNTER_TERRORISTS CsgoSide = 1
	CsgoSide_CSGO_SIDE_TERRORISTS         CsgoSide = 2
)

// Enum value maps for CsgoSide.
var (
	CsgoSide_name = map[int32]string{
		0: "CSGO_SIDE_UNSPECIFIED",
		1: "CSGO_SIDE_COUNTER_TERRORISTS",
		2: "CSGO_SIDE_TERRORISTS",
	}
	CsgoSide_value = map[string]int32{
		"CSGO_SIDE_UNSPECIFIED":        0,
		"CSGO_SIDE_COUNTER_TERRORISTS": 1,
		"CSGO_SIDE_TERRORISTS":         2,
	}
)

func (x CsgoSide) Enum() *CsgoSide {
	p := new(CsgoSide)
	*p = x
	return p
}

func (x CsgoSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsgoSide) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_csgo_proto_enumTypes[0].Descriptor()
}

func (CsgoSide) Type() protoreflect.EnumType {
	return &file_bragi_csgo_proto_enumTypes[0]
}

func (x CsgoSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsgoSide.Descriptor instead.
func (CsgoSide) EnumDescriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{0}
}

type CsgoWinReason int32

const (
	CsgoWinReason_CSGO_WIN_REASON_UNSPECIFIED                   CsgoWinReason = 0
	CsgoWinReason_CSGO_WIN_REASON_COUNTER_TERRORISTS_ELIMINATED CsgoWinReason = 1
	CsgoWinReason_CSGO_WIN_REASON_TERRORISTS_ELIMINATED         CsgoWinReason = 2
	CsgoWinReason_CSGO_WIN_REASON_EXPLOSION                     CsgoWinReason = 3
	CsgoWinReason_CSGO_WIN_REASON_DEFUSE                        CsgoWinReason = 4
	CsgoWinReason_CSGO_WIN_REASON_TIMEOUT                       CsgoWinReason = 5
	CsgoWinReason_CSGO_WIN_REASON_TARGET_SAVED                  CsgoWinReason = 6
)

// Enum value maps for CsgoWinReason.
var (
	CsgoWinReason_name = map[int32]string{
		0: "CSGO_WIN_REASON_UNSPECIFIED",
		1: "CSGO_WIN_REASON_COUNTER_TERRORISTS_ELIMINATED",
		2: "CSGO_WIN_REASON_TERRORISTS_ELIMINATED",
		3: "CSGO_WIN_REASON_EXPLOSION",
		4: "CSGO_WIN_REASON_DEFUSE",
		5: "CSGO_WIN_REASON_TIMEOUT",
		6: "CSGO_WIN_REASON_TARGET_SAVED",
	}
	CsgoWinReason_value = map[string]int32{
		"CSGO_WIN_REASON_UNSPECIFIED":                   0,
		"CSGO_WIN_REASON_COUNTER_TERRORISTS_ELIMINATED": 1,
		"CSGO_WIN_REASON_TERRORISTS_ELIMINATED":         2,
		"CSGO_WIN_REASON_EXPLOSION":                     3,
		"CSGO_WIN_REASON_DEFUSE":                        4,
		"CSGO_WIN_REASON_TIMEOUT":                       5,
		"CSGO_WIN_REASON_TARGET_SAVED":                  6,
	}
)

func (x CsgoWinReason) Enum() *CsgoWinReason {
	p := new(CsgoWinReason)
	*p = x
	return p
}

func (x CsgoWinReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsgoWinReason) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_csgo_proto_enumTypes[1].Descriptor()
}

func (CsgoWinReason) Type() protoreflect.EnumType {
	return &file_bragi_csgo_proto_enumTypes[1]
}

func (x CsgoWinReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsgoWinReason.Descriptor instead.
func (CsgoWinReason) EnumDescriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{1}
}

type CsgoRoundStateType int32

const (
	CsgoRoundStateType_CSGO_ROUND_STATE_TYPE_UNSPECIFIED CsgoRoundStateType = 0
	CsgoRoundStateType_CSGO_ROUND_STATE_TYPE_BUY_TIME    CsgoRoundStateType = 1
	CsgoRoundStateType_CSGO_ROUND_STATE_TYPE_IN_PROGRESS CsgoRoundStateType = 2
	CsgoRoundStateType_CSGO_ROUND_STATE_TYPE_PAUSED      CsgoRoundStateType = 3
	CsgoRoundStateType_CSGO_ROUND_STATE_TYPE_FINISHED    CsgoRoundStateType = 4
)

// Enum value maps for CsgoRoundStateType.
var (
	CsgoRoundStateType_name = map[int32]string{
		0: "CSGO_ROUND_STATE_TYPE_UNSPECIFIED",
		1: "CSGO_ROUND_STATE_TYPE_BUY_TIME",
		2: "CSGO_ROUND_STATE_TYPE_IN_PROGRESS",
		3: "CSGO_ROUND_STATE_TYPE_PAUSED",
		4: "CSGO_ROUND_STATE_TYPE_FINISHED",
	}
	CsgoRoundStateType_value = map[string]int32{
		"CSGO_ROUND_STATE_TYPE_UNSPECIFIED": 0,
		"CSGO_ROUND_STATE_TYPE_BUY_TIME":    1,
		"CSGO_ROUND_STATE_TYPE_IN_PROGRESS": 2,
		"CSGO_ROUND_STATE_TYPE_PAUSED":      3,
		"CSGO_ROUND_STATE_TYPE_FINISHED":    4,
	}
)

func (x CsgoRoundStateType) Enum() *CsgoRoundStateType {
	p := new(CsgoRoundStateType)
	*p = x
	return p
}

func (x CsgoRoundStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsgoRoundStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_csgo_proto_enumTypes[2].Descriptor()
}

func (CsgoRoundStateType) Type() protoreflect.EnumType {
	return &file_bragi_csgo_proto_enumTypes[2]
}

func (x CsgoRoundStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsgoRoundStateType.Descriptor instead.
func (CsgoRoundStateType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{2}
}

type CsgoMatchStatusType int32

const (
	CsgoMatchStatusType_CSGO_MATCH_STATUS_TYPE_UNSPECIFIED CsgoMatchStatusType = 0
	CsgoMatchStatusType_CSGO_MATCH_STATUS_TYPE_LIVE        CsgoMatchStatusType = 1
	CsgoMatchStatusType_CSGO_MATCH_STATUS_TYPE_FINISHED    CsgoMatchStatusType = 2
)

// Enum value maps for CsgoMatchStatusType.
var (
	CsgoMatchStatusType_name = map[int32]string{
		0: "CSGO_MATCH_STATUS_TYPE_UNSPECIFIED",
		1: "CSGO_MATCH_STATUS_TYPE_LIVE",
		2: "CSGO_MATCH_STATUS_TYPE_FINISHED",
	}
	CsgoMatchStatusType_value = map[string]int32{
		"CSGO_MATCH_STATUS_TYPE_UNSPECIFIED": 0,
		"CSGO_MATCH_STATUS_TYPE_LIVE":        1,
		"CSGO_MATCH_STATUS_TYPE_FINISHED":    2,
	}
)

func (x CsgoMatchStatusType) Enum() *CsgoMatchStatusType {
	p := new(CsgoMatchStatusType)
	*p = x
	return p
}

func (x CsgoMatchStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsgoMatchStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_csgo_proto_enumTypes[3].Descriptor()
}

func (CsgoMatchStatusType) Type() protoreflect.EnumType {
	return &file_bragi_csgo_proto_enumTypes[3]
}

func (x CsgoMatchStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsgoMatchStatusType.Descriptor instead.
func (CsgoMatchStatusType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{3}
}

type CsgoMatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn  string                    `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence  uint64                    `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload   *CsgoMatchMessage_Payload `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CsgoMatchMessage) Reset() {
	*x = CsgoMatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMatchMessage) ProtoMessage() {}

func (x *CsgoMatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMatchMessage.ProtoReflect.Descriptor instead.
func (*CsgoMatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{0}
}

func (x *CsgoMatchMessage) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *CsgoMatchMessage) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CsgoMatchMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CsgoMatchMessage) GetPayload() *CsgoMatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Apply updates on match_state property of cached match entity (MatchSnapshot). Each CsgoMatchUpdate is received wrapped
// in CsgoMatchMessage which carries properties "sequence", "timestamp". Replace cached properties "sequence" and "timestamp"
// in cached MatchSnapshot with values of "sequence", "timestamp" from CsgoMatchMessage after you successfully applied updates.
// One CsgoMatchUpdate contains at least one item in array "updates" and zero or more items in array "events".
type CsgoMatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Apply this update on match_state property in CsgoMatchSnapshot. These updates represents idempotent updates of whole
	// match state or updates of its nested fields. If any update is missed, client can recover whole snapshot (CsgoMatchSnapshot)
	// with given sequence number and then continue applying new incoming updates with sequence number higher than snapshot one.
	Updates []*CsgoMatchStatePartialUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	// Notifies about occurred situation in game. Those events are non-idempotent messages ordered according timestamp and
	// they are not supposed to be applied on cached match state. Those events represents a history of match. If any event
	// is missed there is no way how to recover missing events.
	Events []*CsgoEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *CsgoMatchUpdate) Reset() {
	*x = CsgoMatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMatchUpdate) ProtoMessage() {}

func (x *CsgoMatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMatchUpdate.ProtoReflect.Descriptor instead.
func (*CsgoMatchUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{1}
}

func (x *CsgoMatchUpdate) GetUpdates() []*CsgoMatchStatePartialUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *CsgoMatchUpdate) GetEvents() []*CsgoEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CsgoMatchStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*CsgoMatchStatePartialUpdate_Score
	//	*CsgoMatchStatePartialUpdate_CurrentMapState
	//	*CsgoMatchStatePartialUpdate_CurrentMapStatePartialUpdate
	Update isCsgoMatchStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *CsgoMatchStatePartialUpdate) Reset() {
	*x = CsgoMatchStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMatchStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMatchStatePartialUpdate) ProtoMessage() {}

func (x *CsgoMatchStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMatchStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CsgoMatchStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{2}
}

func (m *CsgoMatchStatePartialUpdate) GetUpdate() isCsgoMatchStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CsgoMatchStatePartialUpdate) GetScore() *CsgoMatchScoreState {
	if x, ok := x.GetUpdate().(*CsgoMatchStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *CsgoMatchStatePartialUpdate) GetCurrentMapState() *CsgoCurrentMapState {
	if x, ok := x.GetUpdate().(*CsgoMatchStatePartialUpdate_CurrentMapState); ok {
		return x.CurrentMapState
	}
	return nil
}

func (x *CsgoMatchStatePartialUpdate) GetCurrentMapStatePartialUpdate() *CsgoCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*CsgoMatchStatePartialUpdate_CurrentMapStatePartialUpdate); ok {
		return x.CurrentMapStatePartialUpdate
	}
	return nil
}

type isCsgoMatchStatePartialUpdate_Update interface {
	isCsgoMatchStatePartialUpdate_Update()
}

type CsgoMatchStatePartialUpdate_Score struct {
	// Replaces "score" property in CsgoMatchState.
	Score *CsgoMatchScoreState `protobuf:"bytes,1,opt,name=score,proto3,oneof"`
}

type CsgoMatchStatePartialUpdate_CurrentMapState struct {
	// Replaces "current_map_state" property in CsgoMatchState. To minimalize issues with incorrect updates application
	// on current_map_state, server sends CsgoMatchStatePartialUpdate with CsgoMapState in periodic time set by customer.
	CurrentMapState *CsgoCurrentMapState `protobuf:"bytes,2,opt,name=current_map_state,json=currentMapState,proto3,oneof"`
}

type CsgoMatchStatePartialUpdate_CurrentMapStatePartialUpdate struct {
	// Apply partial update on "current_map_state" property in CsgoMapState.
	CurrentMapStatePartialUpdate *CsgoCurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=current_map_state_partial_update,json=currentMapStatePartialUpdate,proto3,oneof"`
}

func (*CsgoMatchStatePartialUpdate_Score) isCsgoMatchStatePartialUpdate_Update() {}

func (*CsgoMatchStatePartialUpdate_CurrentMapState) isCsgoMatchStatePartialUpdate_Update() {}

func (*CsgoMatchStatePartialUpdate_CurrentMapStatePartialUpdate) isCsgoMatchStatePartialUpdate_Update() {
}

type CsgoMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn          string                  `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	MatchType         BestOfType              `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=bragi.BestOfType" json:"match_type,omitempty"`
	HomeTeam          *CsgoTeam               `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam          *CsgoTeam               `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Score             *CsgoMatchScoreState    `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	MatchStatus       CsgoMatchStatusType     `protobuf:"varint,6,opt,name=match_status,json=matchStatus,proto3,enum=bragi.CsgoMatchStatusType" json:"match_status,omitempty"`
	CurrentMapState   *CsgoCurrentMapState    `protobuf:"bytes,7,opt,name=current_map_state,json=currentMapState,proto3" json:"current_map_state,omitempty"`
	PreviousMapStates []*CsgoPreviousMapState `protobuf:"bytes,8,rep,name=previous_map_states,json=previousMapStates,proto3" json:"previous_map_states,omitempty"` //this property is updated only when whole CsgoMatchState update is received
}

func (x *CsgoMatchState) Reset() {
	*x = CsgoMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMatchState) ProtoMessage() {}

func (x *CsgoMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMatchState.ProtoReflect.Descriptor instead.
func (*CsgoMatchState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{3}
}

func (x *CsgoMatchState) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *CsgoMatchState) GetMatchType() BestOfType {
	if x != nil {
		return x.MatchType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *CsgoMatchState) GetHomeTeam() *CsgoTeam {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *CsgoMatchState) GetAwayTeam() *CsgoTeam {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *CsgoMatchState) GetScore() *CsgoMatchScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *CsgoMatchState) GetMatchStatus() CsgoMatchStatusType {
	if x != nil {
		return x.MatchStatus
	}
	return CsgoMatchStatusType_CSGO_MATCH_STATUS_TYPE_UNSPECIFIED
}

func (x *CsgoMatchState) GetCurrentMapState() *CsgoCurrentMapState {
	if x != nil {
		return x.CurrentMapState
	}
	return nil
}

func (x *CsgoMatchState) GetPreviousMapStates() []*CsgoPreviousMapState {
	if x != nil {
		return x.PreviousMapStates
	}
	return nil
}

type CsgoMatchScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *CsgoMatchScoreState) Reset() {
	*x = CsgoMatchScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMatchScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMatchScoreState) ProtoMessage() {}

func (x *CsgoMatchScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMatchScoreState.ProtoReflect.Descriptor instead.
func (*CsgoMatchScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{4}
}

func (x *CsgoMatchScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *CsgoMatchScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type CsgoTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn  string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	TeamName string `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
}

func (x *CsgoTeam) Reset() {
	*x = CsgoTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeam) ProtoMessage() {}

func (x *CsgoTeam) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeam.ProtoReflect.Descriptor instead.
func (*CsgoTeam) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{5}
}

func (x *CsgoTeam) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoTeam) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

type CsgoCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*CsgoCurrentMapStatePartialUpdate_Info
	//	*CsgoCurrentMapStatePartialUpdate_Score
	//	*CsgoCurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate
	//	*CsgoCurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate
	Update isCsgoCurrentMapStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *CsgoCurrentMapStatePartialUpdate) Reset() {
	*x = CsgoCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *CsgoCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CsgoCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{6}
}

func (m *CsgoCurrentMapStatePartialUpdate) GetUpdate() isCsgoCurrentMapStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CsgoCurrentMapStatePartialUpdate) GetInfo() *CsgoMapInfoState {
	if x, ok := x.GetUpdate().(*CsgoCurrentMapStatePartialUpdate_Info); ok {
		return x.Info
	}
	return nil
}

func (x *CsgoCurrentMapStatePartialUpdate) GetScore() *CsgoMapScoreState {
	if x, ok := x.GetUpdate().(*CsgoCurrentMapStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *CsgoCurrentMapStatePartialUpdate) GetCurrentRoundStatePartialUpdate() *CsgoCurrentRoundStatePartialUpdate {
	if x, ok := x.GetUpdate().(*CsgoCurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate); ok {
		return x.CurrentRoundStatePartialUpdate
	}
	return nil
}

func (x *CsgoCurrentMapStatePartialUpdate) GetTeamMapStatesPartialUpdate() *CsgoTeamMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*CsgoCurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate); ok {
		return x.TeamMapStatesPartialUpdate
	}
	return nil
}

type isCsgoCurrentMapStatePartialUpdate_Update interface {
	isCsgoCurrentMapStatePartialUpdate_Update()
}

type CsgoCurrentMapStatePartialUpdate_Info struct {
	// Replaces "info" property in CsgoMapState.
	Info *CsgoMapInfoState `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type CsgoCurrentMapStatePartialUpdate_Score struct {
	// Replaces "score" property in CsgoMapState.
	Score *CsgoMapScoreState `protobuf:"bytes,2,opt,name=score,proto3,oneof"`
}

type CsgoCurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate struct {
	// Apply partial update on "current_round_state" property in CsgoMapState.
	CurrentRoundStatePartialUpdate *CsgoCurrentRoundStatePartialUpdate `protobuf:"bytes,3,opt,name=current_round_state_partial_update,json=currentRoundStatePartialUpdate,proto3,oneof"`
}

type CsgoCurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate struct {
	// Apply partial update on value under given key in team_map_states map property in CsgoMapState.
	TeamMapStatesPartialUpdate *CsgoTeamMapStatePartialUpdate `protobuf:"bytes,4,opt,name=team_map_states_partial_update,json=teamMapStatesPartialUpdate,proto3,oneof"`
}

func (*CsgoCurrentMapStatePartialUpdate_Info) isCsgoCurrentMapStatePartialUpdate_Update() {}

func (*CsgoCurrentMapStatePartialUpdate_Score) isCsgoCurrentMapStatePartialUpdate_Update() {}

func (*CsgoCurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate) isCsgoCurrentMapStatePartialUpdate_Update() {
}

func (*CsgoCurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate) isCsgoCurrentMapStatePartialUpdate_Update() {
}

type CsgoCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder            uint32                       `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	Info                *CsgoMapInfoState            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Score               *CsgoMapScoreState           `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	CurrentRoundState   *CsgoCurrentRoundState       `protobuf:"bytes,4,opt,name=current_round_state,json=currentRoundState,proto3" json:"current_round_state,omitempty"`
	PreviousRoundStates []*CsgoPreviousRoundState    `protobuf:"bytes,5,rep,name=previous_round_states,json=previousRoundStates,proto3" json:"previous_round_states,omitempty"`                                                                       //this property is updated only when whole CsgoMapState update is received
	TeamMapStates       map[string]*CsgoTeamMapState `protobuf:"bytes,6,rep,name=team_map_states,json=teamMapStates,proto3" json:"team_map_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of team_urn
}

func (x *CsgoCurrentMapState) Reset() {
	*x = CsgoCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoCurrentMapState) ProtoMessage() {}

func (x *CsgoCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoCurrentMapState.ProtoReflect.Descriptor instead.
func (*CsgoCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{7}
}

func (x *CsgoCurrentMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *CsgoCurrentMapState) GetInfo() *CsgoMapInfoState {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CsgoCurrentMapState) GetScore() *CsgoMapScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *CsgoCurrentMapState) GetCurrentRoundState() *CsgoCurrentRoundState {
	if x != nil {
		return x.CurrentRoundState
	}
	return nil
}

func (x *CsgoCurrentMapState) GetPreviousRoundStates() []*CsgoPreviousRoundState {
	if x != nil {
		return x.PreviousRoundStates
	}
	return nil
}

func (x *CsgoCurrentMapState) GetTeamMapStates() map[string]*CsgoTeamMapState {
	if x != nil {
		return x.TeamMapStates
	}
	return nil
}

type CsgoPreviousMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder      uint32                       `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	Info          *CsgoMapInfoState            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Score         *CsgoMapScoreState           `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	RoundStates   []*CsgoPreviousRoundState    `protobuf:"bytes,4,rep,name=round_states,json=roundStates,proto3" json:"round_states,omitempty"`
	TeamMapStates map[string]*CsgoTeamMapState `protobuf:"bytes,5,rep,name=team_map_states,json=teamMapStates,proto3" json:"team_map_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CsgoPreviousMapState) Reset() {
	*x = CsgoPreviousMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPreviousMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPreviousMapState) ProtoMessage() {}

func (x *CsgoPreviousMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPreviousMapState.ProtoReflect.Descriptor instead.
func (*CsgoPreviousMapState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{8}
}

func (x *CsgoPreviousMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *CsgoPreviousMapState) GetInfo() *CsgoMapInfoState {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CsgoPreviousMapState) GetScore() *CsgoMapScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *CsgoPreviousMapState) GetRoundStates() []*CsgoPreviousRoundState {
	if x != nil {
		return x.RoundStates
	}
	return nil
}

func (x *CsgoPreviousMapState) GetTeamMapStates() map[string]*CsgoTeamMapState {
	if x != nil {
		return x.TeamMapStates
	}
	return nil
}

type CsgoMapInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CsgoMapName        string                 `protobuf:"bytes,1,opt,name=csgo_map_name,json=csgoMapName,proto3" json:"csgo_map_name,omitempty"`
	MaxRoundsDefault   uint32                 `protobuf:"varint,2,opt,name=max_rounds_default,json=maxRoundsDefault,proto3" json:"max_rounds_default,omitempty"`
	MaxRoundsOvertime  uint32                 `protobuf:"varint,3,opt,name=max_rounds_overtime,json=maxRoundsOvertime,proto3" json:"max_rounds_overtime,omitempty"`
	FreezeTimeDuration *durationpb.Duration   `protobuf:"bytes,4,opt,name=freeze_time_duration,json=freezeTimeDuration,proto3,oneof" json:"freeze_time_duration,omitempty"`
	RoundTimeDuration  *durationpb.Duration   `protobuf:"bytes,5,opt,name=round_time_duration,json=roundTimeDuration,proto3,oneof" json:"round_time_duration,omitempty"`
	BombTimeDuration   *durationpb.Duration   `protobuf:"bytes,6,opt,name=bomb_time_duration,json=bombTimeDuration,proto3,oneof" json:"bomb_time_duration,omitempty"`
	StartTime          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	MapEnded           bool                   `protobuf:"varint,9,opt,name=map_ended,json=mapEnded,proto3" json:"map_ended,omitempty"`
}

func (x *CsgoMapInfoState) Reset() {
	*x = CsgoMapInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMapInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMapInfoState) ProtoMessage() {}

func (x *CsgoMapInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMapInfoState.ProtoReflect.Descriptor instead.
func (*CsgoMapInfoState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{9}
}

func (x *CsgoMapInfoState) GetCsgoMapName() string {
	if x != nil {
		return x.CsgoMapName
	}
	return ""
}

func (x *CsgoMapInfoState) GetMaxRoundsDefault() uint32 {
	if x != nil {
		return x.MaxRoundsDefault
	}
	return 0
}

func (x *CsgoMapInfoState) GetMaxRoundsOvertime() uint32 {
	if x != nil {
		return x.MaxRoundsOvertime
	}
	return 0
}

func (x *CsgoMapInfoState) GetFreezeTimeDuration() *durationpb.Duration {
	if x != nil {
		return x.FreezeTimeDuration
	}
	return nil
}

func (x *CsgoMapInfoState) GetRoundTimeDuration() *durationpb.Duration {
	if x != nil {
		return x.RoundTimeDuration
	}
	return nil
}

func (x *CsgoMapInfoState) GetBombTimeDuration() *durationpb.Duration {
	if x != nil {
		return x.BombTimeDuration
	}
	return nil
}

func (x *CsgoMapInfoState) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CsgoMapInfoState) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CsgoMapInfoState) GetMapEnded() bool {
	if x != nil {
		return x.MapEnded
	}
	return false
}

type CsgoMapScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *CsgoMapScoreState) Reset() {
	*x = CsgoMapScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMapScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMapScoreState) ProtoMessage() {}

func (x *CsgoMapScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMapScoreState.ProtoReflect.Descriptor instead.
func (*CsgoMapScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{10}
}

func (x *CsgoMapScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *CsgoMapScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type CsgoCurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*CsgoCurrentRoundStatePartialUpdate_Info
	//	*CsgoCurrentRoundStatePartialUpdate_Score
	//	*CsgoCurrentRoundStatePartialUpdate_Time
	//	*CsgoCurrentRoundStatePartialUpdate_BombState
	//	*CsgoCurrentRoundStatePartialUpdate_TeamStatesPartialUpdate
	Update isCsgoCurrentRoundStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *CsgoCurrentRoundStatePartialUpdate) Reset() {
	*x = CsgoCurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoCurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoCurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *CsgoCurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoCurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CsgoCurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{11}
}

func (m *CsgoCurrentRoundStatePartialUpdate) GetUpdate() isCsgoCurrentRoundStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CsgoCurrentRoundStatePartialUpdate) GetInfo() *CsgoRoundInfoState {
	if x, ok := x.GetUpdate().(*CsgoCurrentRoundStatePartialUpdate_Info); ok {
		return x.Info
	}
	return nil
}

func (x *CsgoCurrentRoundStatePartialUpdate) GetScore() *CsgoRoundScoreState {
	if x, ok := x.GetUpdate().(*CsgoCurrentRoundStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *CsgoCurrentRoundStatePartialUpdate) GetTime() *CsgoRoundTimeState {
	if x, ok := x.GetUpdate().(*CsgoCurrentRoundStatePartialUpdate_Time); ok {
		return x.Time
	}
	return nil
}

func (x *CsgoCurrentRoundStatePartialUpdate) GetBombState() *CsgoBombState {
	if x, ok := x.GetUpdate().(*CsgoCurrentRoundStatePartialUpdate_BombState); ok {
		return x.BombState
	}
	return nil
}

func (x *CsgoCurrentRoundStatePartialUpdate) GetTeamStatesPartialUpdate() *CsgoTeamCurrentRoundStatePartialUpdate {
	if x, ok := x.GetUpdate().(*CsgoCurrentRoundStatePartialUpdate_TeamStatesPartialUpdate); ok {
		return x.TeamStatesPartialUpdate
	}
	return nil
}

type isCsgoCurrentRoundStatePartialUpdate_Update interface {
	isCsgoCurrentRoundStatePartialUpdate_Update()
}

type CsgoCurrentRoundStatePartialUpdate_Info struct {
	// Replaces "info" property in CsgoCurrentRoundState.
	Info *CsgoRoundInfoState `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type CsgoCurrentRoundStatePartialUpdate_Score struct {
	// Replaces "score" property in CsgoCurrentRoundState.
	Score *CsgoRoundScoreState `protobuf:"bytes,2,opt,name=score,proto3,oneof"`
}

type CsgoCurrentRoundStatePartialUpdate_Time struct {
	// Replaces "time" property in CsgoCurrentRoundState.
	Time *CsgoRoundTimeState `protobuf:"bytes,3,opt,name=time,proto3,oneof"`
}

type CsgoCurrentRoundStatePartialUpdate_BombState struct {
	// Replaces "bomb_state" property in CsgoCurrentRoundState.
	BombState *CsgoBombState `protobuf:"bytes,4,opt,name=bomb_state,json=bombState,proto3,oneof"`
}

type CsgoCurrentRoundStatePartialUpdate_TeamStatesPartialUpdate struct {
	// Apply partial update on value under given key in team_states map property in CsgoCurrentRoundState.
	TeamStatesPartialUpdate *CsgoTeamCurrentRoundStatePartialUpdate `protobuf:"bytes,5,opt,name=team_states_partial_update,json=teamStatesPartialUpdate,proto3,oneof"`
}

func (*CsgoCurrentRoundStatePartialUpdate_Info) isCsgoCurrentRoundStatePartialUpdate_Update() {}

func (*CsgoCurrentRoundStatePartialUpdate_Score) isCsgoCurrentRoundStatePartialUpdate_Update() {}

func (*CsgoCurrentRoundStatePartialUpdate_Time) isCsgoCurrentRoundStatePartialUpdate_Update() {}

func (*CsgoCurrentRoundStatePartialUpdate_BombState) isCsgoCurrentRoundStatePartialUpdate_Update() {}

func (*CsgoCurrentRoundStatePartialUpdate_TeamStatesPartialUpdate) isCsgoCurrentRoundStatePartialUpdate_Update() {
}

type CsgoCurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber uint32                                `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	Info        *CsgoRoundInfoState                   `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Score       *CsgoRoundScoreState                  `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Time        *CsgoRoundTimeState                   `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	BombState   *CsgoBombState                        `protobuf:"bytes,5,opt,name=bomb_state,json=bombState,proto3" json:"bomb_state,omitempty"`
	TeamStates  map[string]*CsgoTeamCurrentRoundState `protobuf:"bytes,6,rep,name=team_states,json=teamStates,proto3" json:"team_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of team_urn
}

func (x *CsgoCurrentRoundState) Reset() {
	*x = CsgoCurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoCurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoCurrentRoundState) ProtoMessage() {}

func (x *CsgoCurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoCurrentRoundState.ProtoReflect.Descriptor instead.
func (*CsgoCurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{12}
}

func (x *CsgoCurrentRoundState) GetRoundNumber() uint32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *CsgoCurrentRoundState) GetInfo() *CsgoRoundInfoState {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CsgoCurrentRoundState) GetScore() *CsgoRoundScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *CsgoCurrentRoundState) GetTime() *CsgoRoundTimeState {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CsgoCurrentRoundState) GetBombState() *CsgoBombState {
	if x != nil {
		return x.BombState
	}
	return nil
}

func (x *CsgoCurrentRoundState) GetTeamStates() map[string]*CsgoTeamCurrentRoundState {
	if x != nil {
		return x.TeamStates
	}
	return nil
}

type CsgoPreviousRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber uint32                                 `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	Info        *CsgoRoundInfoState                    `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Score       *CsgoRoundScoreState                   `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	TeamStates  map[string]*CsgoPreviousTeamRoundState `protobuf:"bytes,4,rep,name=team_states,json=teamStates,proto3" json:"team_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of team_urn
}

func (x *CsgoPreviousRoundState) Reset() {
	*x = CsgoPreviousRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPreviousRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPreviousRoundState) ProtoMessage() {}

func (x *CsgoPreviousRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPreviousRoundState.ProtoReflect.Descriptor instead.
func (*CsgoPreviousRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{13}
}

func (x *CsgoPreviousRoundState) GetRoundNumber() uint32 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *CsgoPreviousRoundState) GetInfo() *CsgoRoundInfoState {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CsgoPreviousRoundState) GetScore() *CsgoRoundScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *CsgoPreviousRoundState) GetTeamStates() map[string]*CsgoPreviousTeamRoundState {
	if x != nil {
		return x.TeamStates
	}
	return nil
}

type CsgoRoundInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundType      CsgoRoundStateType     `protobuf:"varint,1,opt,name=round_type,json=roundType,proto3,enum=bragi.CsgoRoundStateType" json:"round_type,omitempty"`
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	WinningTeamUrn *string                `protobuf:"bytes,4,opt,name=winning_team_urn,json=winningTeamUrn,proto3,oneof" json:"winning_team_urn,omitempty"`
	WinReason      *CsgoWinReason         `protobuf:"varint,5,opt,name=win_reason,json=winReason,proto3,enum=bragi.CsgoWinReason,oneof" json:"win_reason,omitempty"`
}

func (x *CsgoRoundInfoState) Reset() {
	*x = CsgoRoundInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundInfoState) ProtoMessage() {}

func (x *CsgoRoundInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundInfoState.ProtoReflect.Descriptor instead.
func (*CsgoRoundInfoState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{14}
}

func (x *CsgoRoundInfoState) GetRoundType() CsgoRoundStateType {
	if x != nil {
		return x.RoundType
	}
	return CsgoRoundStateType_CSGO_ROUND_STATE_TYPE_UNSPECIFIED
}

func (x *CsgoRoundInfoState) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CsgoRoundInfoState) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CsgoRoundInfoState) GetWinningTeamUrn() string {
	if x != nil && x.WinningTeamUrn != nil {
		return *x.WinningTeamUrn
	}
	return ""
}

func (x *CsgoRoundInfoState) GetWinReason() CsgoWinReason {
	if x != nil && x.WinReason != nil {
		return *x.WinReason
	}
	return CsgoWinReason_CSGO_WIN_REASON_UNSPECIFIED
}

type CsgoRoundScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *CsgoRoundScoreState) Reset() {
	*x = CsgoRoundScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundScoreState) ProtoMessage() {}

func (x *CsgoRoundScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundScoreState.ProtoReflect.Descriptor instead.
func (*CsgoRoundScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{15}
}

func (x *CsgoRoundScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *CsgoRoundScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type CsgoRoundTimeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRemaining *durationpb.Duration `protobuf:"bytes,1,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	MapTime       *durationpb.Duration `protobuf:"bytes,2,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
}

func (x *CsgoRoundTimeState) Reset() {
	*x = CsgoRoundTimeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundTimeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundTimeState) ProtoMessage() {}

func (x *CsgoRoundTimeState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundTimeState.ProtoReflect.Descriptor instead.
func (*CsgoRoundTimeState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{16}
}

func (x *CsgoRoundTimeState) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoRoundTimeState) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

type CsgoBombState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CsgoBombState_Carried
	//	*CsgoBombState_Dropped
	//	*CsgoBombState_Planting
	//	*CsgoBombState_Planted
	//	*CsgoBombState_Defusing
	//	*CsgoBombState_Defused
	Payload isCsgoBombState_Payload `protobuf_oneof:"payload"`
}

func (x *CsgoBombState) Reset() {
	*x = CsgoBombState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombState) ProtoMessage() {}

func (x *CsgoBombState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombState.ProtoReflect.Descriptor instead.
func (*CsgoBombState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{17}
}

func (m *CsgoBombState) GetPayload() isCsgoBombState_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CsgoBombState) GetCarried() *CsgoBombCarriedState {
	if x, ok := x.GetPayload().(*CsgoBombState_Carried); ok {
		return x.Carried
	}
	return nil
}

func (x *CsgoBombState) GetDropped() *CsgoBombDroppedState {
	if x, ok := x.GetPayload().(*CsgoBombState_Dropped); ok {
		return x.Dropped
	}
	return nil
}

func (x *CsgoBombState) GetPlanting() *CsgoBombPlantingState {
	if x, ok := x.GetPayload().(*CsgoBombState_Planting); ok {
		return x.Planting
	}
	return nil
}

func (x *CsgoBombState) GetPlanted() *CsgoBombPlantedState {
	if x, ok := x.GetPayload().(*CsgoBombState_Planted); ok {
		return x.Planted
	}
	return nil
}

func (x *CsgoBombState) GetDefusing() *CsgoBombDefusingState {
	if x, ok := x.GetPayload().(*CsgoBombState_Defusing); ok {
		return x.Defusing
	}
	return nil
}

func (x *CsgoBombState) GetDefused() *CsgoBombDefusedState {
	if x, ok := x.GetPayload().(*CsgoBombState_Defused); ok {
		return x.Defused
	}
	return nil
}

type isCsgoBombState_Payload interface {
	isCsgoBombState_Payload()
}

type CsgoBombState_Carried struct {
	Carried *CsgoBombCarriedState `protobuf:"bytes,1,opt,name=carried,proto3,oneof"`
}

type CsgoBombState_Dropped struct {
	Dropped *CsgoBombDroppedState `protobuf:"bytes,2,opt,name=dropped,proto3,oneof"`
}

type CsgoBombState_Planting struct {
	Planting *CsgoBombPlantingState `protobuf:"bytes,3,opt,name=planting,proto3,oneof"`
}

type CsgoBombState_Planted struct {
	Planted *CsgoBombPlantedState `protobuf:"bytes,4,opt,name=planted,proto3,oneof"`
}

type CsgoBombState_Defusing struct {
	Defusing *CsgoBombDefusingState `protobuf:"bytes,5,opt,name=defusing,proto3,oneof"`
}

type CsgoBombState_Defused struct {
	Defused *CsgoBombDefusedState `protobuf:"bytes,6,opt,name=defused,proto3,oneof"`
}

func (*CsgoBombState_Carried) isCsgoBombState_Payload() {}

func (*CsgoBombState_Dropped) isCsgoBombState_Payload() {}

func (*CsgoBombState_Planting) isCsgoBombState_Payload() {}

func (*CsgoBombState_Planted) isCsgoBombState_Payload() {}

func (*CsgoBombState_Defusing) isCsgoBombState_Payload() {}

func (*CsgoBombState_Defused) isCsgoBombState_Payload() {}

type CsgoBombCarriedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string        `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Position  *CsgoPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CsgoBombCarriedState) Reset() {
	*x = CsgoBombCarriedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombCarriedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombCarriedState) ProtoMessage() {}

func (x *CsgoBombCarriedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombCarriedState.ProtoReflect.Descriptor instead.
func (*CsgoBombCarriedState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{18}
}

func (x *CsgoBombCarriedState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoBombCarriedState) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type CsgoBombDroppedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DroppedByPlayerUrn string        `protobuf:"bytes,1,opt,name=dropped_by_player_urn,json=droppedByPlayerUrn,proto3" json:"dropped_by_player_urn,omitempty"`
	Position           *CsgoPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CsgoBombDroppedState) Reset() {
	*x = CsgoBombDroppedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombDroppedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombDroppedState) ProtoMessage() {}

func (x *CsgoBombDroppedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombDroppedState.ProtoReflect.Descriptor instead.
func (*CsgoBombDroppedState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{19}
}

func (x *CsgoBombDroppedState) GetDroppedByPlayerUrn() string {
	if x != nil {
		return x.DroppedByPlayerUrn
	}
	return ""
}

func (x *CsgoBombDroppedState) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type CsgoBombPlantingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string               `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Position  *CsgoPosition        `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Countdown *durationpb.Duration `protobuf:"bytes,3,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (x *CsgoBombPlantingState) Reset() {
	*x = CsgoBombPlantingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombPlantingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombPlantingState) ProtoMessage() {}

func (x *CsgoBombPlantingState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombPlantingState.ProtoReflect.Descriptor instead.
func (*CsgoBombPlantingState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{20}
}

func (x *CsgoBombPlantingState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoBombPlantingState) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoBombPlantingState) GetCountdown() *durationpb.Duration {
	if x != nil {
		return x.Countdown
	}
	return nil
}

type CsgoBombPlantedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantedByPlayerUrn string                 `protobuf:"bytes,1,opt,name=planted_by_player_urn,json=plantedByPlayerUrn,proto3" json:"planted_by_player_urn,omitempty"`
	Position           *CsgoPosition          `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	PlantedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=planted_at,json=plantedAt,proto3" json:"planted_at,omitempty"`
}

func (x *CsgoBombPlantedState) Reset() {
	*x = CsgoBombPlantedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombPlantedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombPlantedState) ProtoMessage() {}

func (x *CsgoBombPlantedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombPlantedState.ProtoReflect.Descriptor instead.
func (*CsgoBombPlantedState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{21}
}

func (x *CsgoBombPlantedState) GetPlantedByPlayerUrn() string {
	if x != nil {
		return x.PlantedByPlayerUrn
	}
	return ""
}

func (x *CsgoBombPlantedState) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoBombPlantedState) GetPlantedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PlantedAt
	}
	return nil
}

type CsgoBombDefusingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn       string                 `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Position        *CsgoPosition          `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Countdown       *durationpb.Duration   `protobuf:"bytes,3,opt,name=countdown,proto3" json:"countdown,omitempty"`
	DefuseStartedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=defuse_started_at,json=defuseStartedAt,proto3" json:"defuse_started_at,omitempty"`
}

func (x *CsgoBombDefusingState) Reset() {
	*x = CsgoBombDefusingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombDefusingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombDefusingState) ProtoMessage() {}

func (x *CsgoBombDefusingState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombDefusingState.ProtoReflect.Descriptor instead.
func (*CsgoBombDefusingState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{22}
}

func (x *CsgoBombDefusingState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoBombDefusingState) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoBombDefusingState) GetCountdown() *durationpb.Duration {
	if x != nil {
		return x.Countdown
	}
	return nil
}

func (x *CsgoBombDefusingState) GetDefuseStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DefuseStartedAt
	}
	return nil
}

type CsgoBombDefusedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefusedByPlayerUrn string                 `protobuf:"bytes,1,opt,name=defused_by_player_urn,json=defusedByPlayerUrn,proto3" json:"defused_by_player_urn,omitempty"`
	Position           *CsgoPosition          `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	DefusedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=defused_at,json=defusedAt,proto3" json:"defused_at,omitempty"`
}

func (x *CsgoBombDefusedState) Reset() {
	*x = CsgoBombDefusedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombDefusedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombDefusedState) ProtoMessage() {}

func (x *CsgoBombDefusedState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombDefusedState.ProtoReflect.Descriptor instead.
func (*CsgoBombDefusedState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{23}
}

func (x *CsgoBombDefusedState) GetDefusedByPlayerUrn() string {
	if x != nil {
		return x.DefusedByPlayerUrn
	}
	return ""
}

func (x *CsgoBombDefusedState) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoBombDefusedState) GetDefusedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DefusedAt
	}
	return nil
}

type CsgoTeamMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                 `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Payload *CsgoTeamMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CsgoTeamMapStatePartialUpdate) Reset() {
	*x = CsgoTeamMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamMapStatePartialUpdate) ProtoMessage() {}

func (x *CsgoTeamMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CsgoTeamMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{24}
}

func (x *CsgoTeamMapStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoTeamMapStatePartialUpdate) GetPayload() *CsgoTeamMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CsgoTeamMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn         string                         `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Side            CsgoSide                       `protobuf:"varint,2,opt,name=side,proto3,enum=bragi.CsgoSide" json:"side,omitempty"`
	PlayerMapStates map[string]*CsgoPlayerMapState `protobuf:"bytes,3,rep,name=player_map_states,json=playerMapStates,proto3" json:"player_map_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CsgoTeamMapState) Reset() {
	*x = CsgoTeamMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamMapState) ProtoMessage() {}

func (x *CsgoTeamMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamMapState.ProtoReflect.Descriptor instead.
func (*CsgoTeamMapState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{25}
}

func (x *CsgoTeamMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoTeamMapState) GetSide() CsgoSide {
	if x != nil {
		return x.Side
	}
	return CsgoSide_CSGO_SIDE_UNSPECIFIED
}

func (x *CsgoTeamMapState) GetPlayerMapStates() map[string]*CsgoPlayerMapState {
	if x != nil {
		return x.PlayerMapStates
	}
	return nil
}

type CsgoTeamCurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                          `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Payload *CsgoTeamCurrentRoundStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CsgoTeamCurrentRoundStatePartialUpdate) Reset() {
	*x = CsgoTeamCurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamCurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamCurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *CsgoTeamCurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamCurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CsgoTeamCurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{26}
}

func (x *CsgoTeamCurrentRoundStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoTeamCurrentRoundStatePartialUpdate) GetPayload() *CsgoTeamCurrentRoundStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CsgoTeamCurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn           string                                  `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	PlayerRoundStates map[string]*CsgoPlayerCurrentRoundState `protobuf:"bytes,2,rep,name=player_round_states,json=playerRoundStates,proto3" json:"player_round_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CsgoTeamCurrentRoundState) Reset() {
	*x = CsgoTeamCurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamCurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamCurrentRoundState) ProtoMessage() {}

func (x *CsgoTeamCurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamCurrentRoundState.ProtoReflect.Descriptor instead.
func (*CsgoTeamCurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{27}
}

func (x *CsgoTeamCurrentRoundState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoTeamCurrentRoundState) GetPlayerRoundStates() map[string]*CsgoPlayerCurrentRoundState {
	if x != nil {
		return x.PlayerRoundStates
	}
	return nil
}

type CsgoPreviousTeamRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                   `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Players map[string]*CsgoPlayerPreviousRoundState `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CsgoPreviousTeamRoundState) Reset() {
	*x = CsgoPreviousTeamRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPreviousTeamRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPreviousTeamRoundState) ProtoMessage() {}

func (x *CsgoPreviousTeamRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPreviousTeamRoundState.ProtoReflect.Descriptor instead.
func (*CsgoPreviousTeamRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{28}
}

func (x *CsgoPreviousTeamRoundState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoPreviousTeamRoundState) GetPlayers() map[string]*CsgoPlayerPreviousRoundState {
	if x != nil {
		return x.Players
	}
	return nil
}

type CsgoPlayerMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string                                   `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Payload   *CsgoPlayerMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CsgoPlayerMapStatePartialUpdate) Reset() {
	*x = CsgoPlayerMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerMapStatePartialUpdate) ProtoMessage() {}

func (x *CsgoPlayerMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CsgoPlayerMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{29}
}

func (x *CsgoPlayerMapStatePartialUpdate) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerMapStatePartialUpdate) GetPayload() *CsgoPlayerMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CsgoPlayerMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                        `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerName string                        `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Statistics *CsgoPlayerMapStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CsgoPlayerMapState) Reset() {
	*x = CsgoPlayerMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerMapState) ProtoMessage() {}

func (x *CsgoPlayerMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerMapState.ProtoReflect.Descriptor instead.
func (*CsgoPlayerMapState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{30}
}

func (x *CsgoPlayerMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerMapState) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CsgoPlayerMapState) GetStatistics() *CsgoPlayerMapStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CsgoPlayerMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Statistics *CsgoPlayerStatistics `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CsgoPlayerMapStatisticsState) Reset() {
	*x = CsgoPlayerMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerMapStatisticsState) ProtoMessage() {}

func (x *CsgoPlayerMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerMapStatisticsState.ProtoReflect.Descriptor instead.
func (*CsgoPlayerMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{31}
}

func (x *CsgoPlayerMapStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerMapStatisticsState) GetStatistics() *CsgoPlayerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CsgoPlayerCurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string                                            `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Payload   *CsgoPlayerCurrentRoundStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate) Reset() {
	*x = CsgoPlayerCurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerCurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerCurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*CsgoPlayerCurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{32}
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate) GetPayload() *CsgoPlayerCurrentRoundStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CsgoPlayerCurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                                 `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerName string                                 `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Statistics *CsgoPlayerCurrentRoundStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Items      *CsgoPlayerItemsState                  `protobuf:"bytes,4,opt,name=items,proto3" json:"items,omitempty"`
	Position   *CsgoPlayerPositionState               `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CsgoPlayerCurrentRoundState) Reset() {
	*x = CsgoPlayerCurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerCurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerCurrentRoundState) ProtoMessage() {}

func (x *CsgoPlayerCurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerCurrentRoundState.ProtoReflect.Descriptor instead.
func (*CsgoPlayerCurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{33}
}

func (x *CsgoPlayerCurrentRoundState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerCurrentRoundState) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CsgoPlayerCurrentRoundState) GetStatistics() *CsgoPlayerCurrentRoundStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *CsgoPlayerCurrentRoundState) GetItems() *CsgoPlayerItemsState {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CsgoPlayerCurrentRoundState) GetPosition() *CsgoPlayerPositionState {
	if x != nil {
		return x.Position
	}
	return nil
}

type CsgoPlayerCurrentRoundStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn       string                `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Alive           bool                  `protobuf:"varint,2,opt,name=alive,proto3" json:"alive,omitempty"`
	Active          bool                  `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Health          uint32                `protobuf:"varint,5,opt,name=health,proto3" json:"health,omitempty"`
	Armor           uint32                `protobuf:"varint,6,opt,name=armor,proto3" json:"armor,omitempty"`
	Balance         uint32                `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	PrimaryWeapon   string                `protobuf:"bytes,8,opt,name=primary_weapon,json=primaryWeapon,proto3" json:"primary_weapon,omitempty"`
	SecondaryWeapon string                `protobuf:"bytes,9,opt,name=secondary_weapon,json=secondaryWeapon,proto3" json:"secondary_weapon,omitempty"`
	Statistics      *CsgoPlayerStatistics `protobuf:"bytes,10,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CsgoPlayerCurrentRoundStatisticsState) Reset() {
	*x = CsgoPlayerCurrentRoundStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerCurrentRoundStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerCurrentRoundStatisticsState) ProtoMessage() {}

func (x *CsgoPlayerCurrentRoundStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerCurrentRoundStatisticsState.ProtoReflect.Descriptor instead.
func (*CsgoPlayerCurrentRoundStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{34}
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetHealth() uint32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetArmor() uint32 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetPrimaryWeapon() string {
	if x != nil {
		return x.PrimaryWeapon
	}
	return ""
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetSecondaryWeapon() string {
	if x != nil {
		return x.SecondaryWeapon
	}
	return ""
}

func (x *CsgoPlayerCurrentRoundStatisticsState) GetStatistics() *CsgoPlayerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CsgoPlayerItemsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn      string            `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	EquipmentValue uint32            `protobuf:"varint,2,opt,name=equipment_value,json=equipmentValue,proto3" json:"equipment_value,omitempty"`
	Items          []*CsgoPlayerItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CsgoPlayerItemsState) Reset() {
	*x = CsgoPlayerItemsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerItemsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerItemsState) ProtoMessage() {}

func (x *CsgoPlayerItemsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerItemsState.ProtoReflect.Descriptor instead.
func (*CsgoPlayerItemsState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{35}
}

func (x *CsgoPlayerItemsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerItemsState) GetEquipmentValue() uint32 {
	if x != nil {
		return x.EquipmentValue
	}
	return 0
}

func (x *CsgoPlayerItemsState) GetItems() []*CsgoPlayerItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CsgoPlayerPreviousRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerName string                `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Statistics *CsgoPlayerStatistics `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CsgoPlayerPreviousRoundState) Reset() {
	*x = CsgoPlayerPreviousRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerPreviousRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerPreviousRoundState) ProtoMessage() {}

func (x *CsgoPlayerPreviousRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerPreviousRoundState.ProtoReflect.Descriptor instead.
func (*CsgoPlayerPreviousRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{36}
}

func (x *CsgoPlayerPreviousRoundState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerPreviousRoundState) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CsgoPlayerPreviousRoundState) GetStatistics() *CsgoPlayerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CsgoPlayerPositionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string        `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Position  *CsgoPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CsgoPlayerPositionState) Reset() {
	*x = CsgoPlayerPositionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerPositionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerPositionState) ProtoMessage() {}

func (x *CsgoPlayerPositionState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerPositionState.ProtoReflect.Descriptor instead.
func (*CsgoPlayerPositionState) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{37}
}

func (x *CsgoPlayerPositionState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerPositionState) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type CsgoPlayerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn                 string  `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Kills                     uint32  `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
	FriendlyKills             uint32  `protobuf:"varint,3,opt,name=friendly_kills,json=friendlyKills,proto3" json:"friendly_kills,omitempty"`
	EnemyKills                uint32  `protobuf:"varint,4,opt,name=enemy_kills,json=enemyKills,proto3" json:"enemy_kills,omitempty"`
	SelfKills                 uint32  `protobuf:"varint,5,opt,name=self_kills,json=selfKills,proto3" json:"self_kills,omitempty"`
	Deaths                    uint32  `protobuf:"varint,6,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists                   uint32  `protobuf:"varint,7,opt,name=assists,proto3" json:"assists,omitempty"`
	Headshots                 uint32  `protobuf:"varint,8,opt,name=headshots,proto3" json:"headshots,omitempty"`
	FriendlyDamageDealtArmor  *uint32 `protobuf:"varint,9,opt,name=friendly_damage_dealt_armor,json=friendlyDamageDealtArmor,proto3,oneof" json:"friendly_damage_dealt_armor,omitempty"`
	FriendlyDamageDealtHealth *uint32 `protobuf:"varint,10,opt,name=friendly_damage_dealt_health,json=friendlyDamageDealtHealth,proto3,oneof" json:"friendly_damage_dealt_health,omitempty"`
	EnemyDamageDealtArmor     *uint32 `protobuf:"varint,11,opt,name=enemy_damage_dealt_armor,json=enemyDamageDealtArmor,proto3,oneof" json:"enemy_damage_dealt_armor,omitempty"`
	EnemyDamageDealtHealth    *uint32 `protobuf:"varint,12,opt,name=enemy_damage_dealt_health,json=enemyDamageDealtHealth,proto3,oneof" json:"enemy_damage_dealt_health,omitempty"`
	EnemyDamageDealtArmorRaw  *uint32 `protobuf:"varint,13,opt,name=enemy_damage_dealt_armor_raw,json=enemyDamageDealtArmorRaw,proto3,oneof" json:"enemy_damage_dealt_armor_raw,omitempty"`
	EnemyDamageDealtHealthRaw *uint32 `protobuf:"varint,14,opt,name=enemy_damage_dealt_health_raw,json=enemyDamageDealtHealthRaw,proto3,oneof" json:"enemy_damage_dealt_health_raw,omitempty"`
}

func (x *CsgoPlayerStatistics) Reset() {
	*x = CsgoPlayerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerStatistics) ProtoMessage() {}

func (x *CsgoPlayerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerStatistics.ProtoReflect.Descriptor instead.
func (*CsgoPlayerStatistics) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{38}
}

func (x *CsgoPlayerStatistics) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerStatistics) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetFriendlyKills() uint32 {
	if x != nil {
		return x.FriendlyKills
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetEnemyKills() uint32 {
	if x != nil {
		return x.EnemyKills
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetSelfKills() uint32 {
	if x != nil {
		return x.SelfKills
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetDeaths() uint32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetAssists() uint32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetHeadshots() uint32 {
	if x != nil {
		return x.Headshots
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetFriendlyDamageDealtArmor() uint32 {
	if x != nil && x.FriendlyDamageDealtArmor != nil {
		return *x.FriendlyDamageDealtArmor
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetFriendlyDamageDealtHealth() uint32 {
	if x != nil && x.FriendlyDamageDealtHealth != nil {
		return *x.FriendlyDamageDealtHealth
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetEnemyDamageDealtArmor() uint32 {
	if x != nil && x.EnemyDamageDealtArmor != nil {
		return *x.EnemyDamageDealtArmor
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetEnemyDamageDealtHealth() uint32 {
	if x != nil && x.EnemyDamageDealtHealth != nil {
		return *x.EnemyDamageDealtHealth
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetEnemyDamageDealtArmorRaw() uint32 {
	if x != nil && x.EnemyDamageDealtArmorRaw != nil {
		return *x.EnemyDamageDealtArmorRaw
	}
	return 0
}

func (x *CsgoPlayerStatistics) GetEnemyDamageDealtHealthRaw() uint32 {
	if x != nil && x.EnemyDamageDealtHealthRaw != nil {
		return *x.EnemyDamageDealtHealthRaw
	}
	return 0
}

type CsgoPlayerItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items          []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	EquipmentValue uint32   `protobuf:"varint,2,opt,name=equipment_value,json=equipmentValue,proto3" json:"equipment_value,omitempty"`
}

func (x *CsgoPlayerItem) Reset() {
	*x = CsgoPlayerItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerItem) ProtoMessage() {}

func (x *CsgoPlayerItem) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerItem.ProtoReflect.Descriptor instead.
func (*CsgoPlayerItem) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{39}
}

func (x *CsgoPlayerItem) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CsgoPlayerItem) GetEquipmentValue() uint32 {
	if x != nil {
		return x.EquipmentValue
	}
	return 0
}

type CsgoPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X     float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y     float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Angle float32 `protobuf:"fixed32,3,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (x *CsgoPosition) Reset() {
	*x = CsgoPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPosition) ProtoMessage() {}

func (x *CsgoPosition) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPosition.ProtoReflect.Descriptor instead.
func (*CsgoPosition) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{40}
}

func (x *CsgoPosition) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CsgoPosition) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CsgoPosition) GetAngle() float32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

type CsgoEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*CsgoEvent_BombDefuseStarted
	//	*CsgoEvent_BombDefused
	//	*CsgoEvent_BombExploded
	//	*CsgoEvent_BombPlanted
	//	*CsgoEvent_DamageDealt
	//	*CsgoEvent_FreezeTimeEnded
	//	*CsgoEvent_FreezeTimeStarted
	//	*CsgoEvent_ItemDrop
	//	*CsgoEvent_ItemPickUp
	//	*CsgoEvent_ItemPurchase
	//	*CsgoEvent_ItemThrow
	//	*CsgoEvent_Kill
	//	*CsgoEvent_Death
	//	*CsgoEvent_MapEnd
	//	*CsgoEvent_MapStart
	//	*CsgoEvent_RoundEnd
	//	*CsgoEvent_RoundPause
	//	*CsgoEvent_RoundResume
	//	*CsgoEvent_RoundRollback
	//	*CsgoEvent_RoundStart
	Event isCsgoEvent_Event `protobuf_oneof:"event"`
}

func (x *CsgoEvent) Reset() {
	*x = CsgoEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoEvent) ProtoMessage() {}

func (x *CsgoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoEvent.ProtoReflect.Descriptor instead.
func (*CsgoEvent) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{41}
}

func (m *CsgoEvent) GetEvent() isCsgoEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *CsgoEvent) GetBombDefuseStarted() *CsgoBombDefuseStarted {
	if x, ok := x.GetEvent().(*CsgoEvent_BombDefuseStarted); ok {
		return x.BombDefuseStarted
	}
	return nil
}

func (x *CsgoEvent) GetBombDefused() *CsgoBombDefused {
	if x, ok := x.GetEvent().(*CsgoEvent_BombDefused); ok {
		return x.BombDefused
	}
	return nil
}

func (x *CsgoEvent) GetBombExploded() *CsgoBombExploded {
	if x, ok := x.GetEvent().(*CsgoEvent_BombExploded); ok {
		return x.BombExploded
	}
	return nil
}

func (x *CsgoEvent) GetBombPlanted() *CsgoBombPlanted {
	if x, ok := x.GetEvent().(*CsgoEvent_BombPlanted); ok {
		return x.BombPlanted
	}
	return nil
}

func (x *CsgoEvent) GetDamageDealt() *CsgoDamageDealt {
	if x, ok := x.GetEvent().(*CsgoEvent_DamageDealt); ok {
		return x.DamageDealt
	}
	return nil
}

func (x *CsgoEvent) GetFreezeTimeEnded() *CsgoFreezeTimeEnded {
	if x, ok := x.GetEvent().(*CsgoEvent_FreezeTimeEnded); ok {
		return x.FreezeTimeEnded
	}
	return nil
}

func (x *CsgoEvent) GetFreezeTimeStarted() *CsgoFreezeTimeStarted {
	if x, ok := x.GetEvent().(*CsgoEvent_FreezeTimeStarted); ok {
		return x.FreezeTimeStarted
	}
	return nil
}

func (x *CsgoEvent) GetItemDrop() *CsgoItemDrop {
	if x, ok := x.GetEvent().(*CsgoEvent_ItemDrop); ok {
		return x.ItemDrop
	}
	return nil
}

func (x *CsgoEvent) GetItemPickUp() *CsgoItemPickUp {
	if x, ok := x.GetEvent().(*CsgoEvent_ItemPickUp); ok {
		return x.ItemPickUp
	}
	return nil
}

func (x *CsgoEvent) GetItemPurchase() *CsgoItemPurchase {
	if x, ok := x.GetEvent().(*CsgoEvent_ItemPurchase); ok {
		return x.ItemPurchase
	}
	return nil
}

func (x *CsgoEvent) GetItemThrow() *CsgoItemThrow {
	if x, ok := x.GetEvent().(*CsgoEvent_ItemThrow); ok {
		return x.ItemThrow
	}
	return nil
}

func (x *CsgoEvent) GetKill() *CsgoKill {
	if x, ok := x.GetEvent().(*CsgoEvent_Kill); ok {
		return x.Kill
	}
	return nil
}

func (x *CsgoEvent) GetDeath() *CsgoDeath {
	if x, ok := x.GetEvent().(*CsgoEvent_Death); ok {
		return x.Death
	}
	return nil
}

func (x *CsgoEvent) GetMapEnd() *CsgoMapEnd {
	if x, ok := x.GetEvent().(*CsgoEvent_MapEnd); ok {
		return x.MapEnd
	}
	return nil
}

func (x *CsgoEvent) GetMapStart() *CsgoMapStart {
	if x, ok := x.GetEvent().(*CsgoEvent_MapStart); ok {
		return x.MapStart
	}
	return nil
}

func (x *CsgoEvent) GetRoundEnd() *CsgoRoundEnd {
	if x, ok := x.GetEvent().(*CsgoEvent_RoundEnd); ok {
		return x.RoundEnd
	}
	return nil
}

func (x *CsgoEvent) GetRoundPause() *CsgoRoundPause {
	if x, ok := x.GetEvent().(*CsgoEvent_RoundPause); ok {
		return x.RoundPause
	}
	return nil
}

func (x *CsgoEvent) GetRoundResume() *CsgoRoundResume {
	if x, ok := x.GetEvent().(*CsgoEvent_RoundResume); ok {
		return x.RoundResume
	}
	return nil
}

func (x *CsgoEvent) GetRoundRollback() *CsgoRoundRollback {
	if x, ok := x.GetEvent().(*CsgoEvent_RoundRollback); ok {
		return x.RoundRollback
	}
	return nil
}

func (x *CsgoEvent) GetRoundStart() *CsgoRoundStart {
	if x, ok := x.GetEvent().(*CsgoEvent_RoundStart); ok {
		return x.RoundStart
	}
	return nil
}

type isCsgoEvent_Event interface {
	isCsgoEvent_Event()
}

type CsgoEvent_BombDefuseStarted struct {
	BombDefuseStarted *CsgoBombDefuseStarted `protobuf:"bytes,1,opt,name=bomb_defuse_started,json=bombDefuseStarted,proto3,oneof"`
}

type CsgoEvent_BombDefused struct {
	BombDefused *CsgoBombDefused `protobuf:"bytes,2,opt,name=bomb_defused,json=bombDefused,proto3,oneof"`
}

type CsgoEvent_BombExploded struct {
	BombExploded *CsgoBombExploded `protobuf:"bytes,3,opt,name=bomb_exploded,json=bombExploded,proto3,oneof"`
}

type CsgoEvent_BombPlanted struct {
	BombPlanted *CsgoBombPlanted `protobuf:"bytes,4,opt,name=bomb_planted,json=bombPlanted,proto3,oneof"`
}

type CsgoEvent_DamageDealt struct {
	DamageDealt *CsgoDamageDealt `protobuf:"bytes,5,opt,name=damage_dealt,json=damageDealt,proto3,oneof"`
}

type CsgoEvent_FreezeTimeEnded struct {
	FreezeTimeEnded *CsgoFreezeTimeEnded `protobuf:"bytes,6,opt,name=freeze_time_ended,json=freezeTimeEnded,proto3,oneof"`
}

type CsgoEvent_FreezeTimeStarted struct {
	FreezeTimeStarted *CsgoFreezeTimeStarted `protobuf:"bytes,7,opt,name=freeze_time_started,json=freezeTimeStarted,proto3,oneof"`
}

type CsgoEvent_ItemDrop struct {
	ItemDrop *CsgoItemDrop `protobuf:"bytes,8,opt,name=item_drop,json=itemDrop,proto3,oneof"`
}

type CsgoEvent_ItemPickUp struct {
	ItemPickUp *CsgoItemPickUp `protobuf:"bytes,9,opt,name=item_pick_up,json=itemPickUp,proto3,oneof"`
}

type CsgoEvent_ItemPurchase struct {
	ItemPurchase *CsgoItemPurchase `protobuf:"bytes,10,opt,name=item_purchase,json=itemPurchase,proto3,oneof"`
}

type CsgoEvent_ItemThrow struct {
	ItemThrow *CsgoItemThrow `protobuf:"bytes,11,opt,name=item_throw,json=itemThrow,proto3,oneof"`
}

type CsgoEvent_Kill struct {
	Kill *CsgoKill `protobuf:"bytes,12,opt,name=kill,proto3,oneof"`
}

type CsgoEvent_Death struct {
	Death *CsgoDeath `protobuf:"bytes,13,opt,name=death,proto3,oneof"`
}

type CsgoEvent_MapEnd struct {
	MapEnd *CsgoMapEnd `protobuf:"bytes,14,opt,name=map_end,json=mapEnd,proto3,oneof"`
}

type CsgoEvent_MapStart struct {
	MapStart *CsgoMapStart `protobuf:"bytes,15,opt,name=map_start,json=mapStart,proto3,oneof"`
}

type CsgoEvent_RoundEnd struct {
	RoundEnd *CsgoRoundEnd `protobuf:"bytes,16,opt,name=round_end,json=roundEnd,proto3,oneof"`
}

type CsgoEvent_RoundPause struct {
	RoundPause *CsgoRoundPause `protobuf:"bytes,17,opt,name=round_pause,json=roundPause,proto3,oneof"`
}

type CsgoEvent_RoundResume struct {
	RoundResume *CsgoRoundResume `protobuf:"bytes,18,opt,name=round_resume,json=roundResume,proto3,oneof"`
}

type CsgoEvent_RoundRollback struct {
	RoundRollback *CsgoRoundRollback `protobuf:"bytes,19,opt,name=round_rollback,json=roundRollback,proto3,oneof"`
}

type CsgoEvent_RoundStart struct {
	RoundStart *CsgoRoundStart `protobuf:"bytes,20,opt,name=round_start,json=roundStart,proto3,oneof"`
}

func (*CsgoEvent_BombDefuseStarted) isCsgoEvent_Event() {}

func (*CsgoEvent_BombDefused) isCsgoEvent_Event() {}

func (*CsgoEvent_BombExploded) isCsgoEvent_Event() {}

func (*CsgoEvent_BombPlanted) isCsgoEvent_Event() {}

func (*CsgoEvent_DamageDealt) isCsgoEvent_Event() {}

func (*CsgoEvent_FreezeTimeEnded) isCsgoEvent_Event() {}

func (*CsgoEvent_FreezeTimeStarted) isCsgoEvent_Event() {}

func (*CsgoEvent_ItemDrop) isCsgoEvent_Event() {}

func (*CsgoEvent_ItemPickUp) isCsgoEvent_Event() {}

func (*CsgoEvent_ItemPurchase) isCsgoEvent_Event() {}

func (*CsgoEvent_ItemThrow) isCsgoEvent_Event() {}

func (*CsgoEvent_Kill) isCsgoEvent_Event() {}

func (*CsgoEvent_Death) isCsgoEvent_Event() {}

func (*CsgoEvent_MapEnd) isCsgoEvent_Event() {}

func (*CsgoEvent_MapStart) isCsgoEvent_Event() {}

func (*CsgoEvent_RoundEnd) isCsgoEvent_Event() {}

func (*CsgoEvent_RoundPause) isCsgoEvent_Event() {}

func (*CsgoEvent_RoundResume) isCsgoEvent_Event() {}

func (*CsgoEvent_RoundRollback) isCsgoEvent_Event() {}

func (*CsgoEvent_RoundStart) isCsgoEvent_Event() {}

type CsgoPlayerBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn   string `protobuf:"bytes,2,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Balance   uint32 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *CsgoPlayerBalance) Reset() {
	*x = CsgoPlayerBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerBalance) ProtoMessage() {}

func (x *CsgoPlayerBalance) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerBalance.ProtoReflect.Descriptor instead.
func (*CsgoPlayerBalance) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{42}
}

func (x *CsgoPlayerBalance) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerBalance) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoPlayerBalance) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type CsgoPlayerItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string            `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn   string            `protobuf:"bytes,2,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Items     []*CsgoPlayerItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CsgoPlayerItems) Reset() {
	*x = CsgoPlayerItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerItems) ProtoMessage() {}

func (x *CsgoPlayerItems) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerItems.ProtoReflect.Descriptor instead.
func (*CsgoPlayerItems) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{43}
}

func (x *CsgoPlayerItems) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoPlayerItems) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoPlayerItems) GetItems() []*CsgoPlayerItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CsgoBombDefuseStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
}

func (x *CsgoBombDefuseStarted) Reset() {
	*x = CsgoBombDefuseStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombDefuseStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombDefuseStarted) ProtoMessage() {}

func (x *CsgoBombDefuseStarted) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombDefuseStarted.ProtoReflect.Descriptor instead.
func (*CsgoBombDefuseStarted) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{44}
}

func (x *CsgoBombDefuseStarted) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoBombDefuseStarted) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoBombDefuseStarted) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoBombDefuseStarted) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoBombDefuseStarted) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

type CsgoBombDefused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Balance            uint32               `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *CsgoBombDefused) Reset() {
	*x = CsgoBombDefused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombDefused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombDefused) ProtoMessage() {}

func (x *CsgoBombDefused) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombDefused.ProtoReflect.Descriptor instead.
func (*CsgoBombDefused) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{45}
}

func (x *CsgoBombDefused) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoBombDefused) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoBombDefused) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoBombDefused) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoBombDefused) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoBombDefused) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type CsgoBombExploded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	TeamUrn            string               `protobuf:"bytes,4,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
}

func (x *CsgoBombExploded) Reset() {
	*x = CsgoBombExploded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombExploded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombExploded) ProtoMessage() {}

func (x *CsgoBombExploded) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombExploded.ProtoReflect.Descriptor instead.
func (*CsgoBombExploded) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{46}
}

func (x *CsgoBombExploded) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoBombExploded) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoBombExploded) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoBombExploded) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

type CsgoBombPlanted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Balance            uint32               `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *CsgoBombPlanted) Reset() {
	*x = CsgoBombPlanted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoBombPlanted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoBombPlanted) ProtoMessage() {}

func (x *CsgoBombPlanted) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoBombPlanted.ProtoReflect.Descriptor instead.
func (*CsgoBombPlanted) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{47}
}

func (x *CsgoBombPlanted) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoBombPlanted) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoBombPlanted) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoBombPlanted) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoBombPlanted) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoBombPlanted) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type CsgoDamageDealt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	Position           *CsgoPosition        `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	KillerUrn          string               `protobuf:"bytes,5,opt,name=killer_urn,json=killerUrn,proto3" json:"killer_urn,omitempty"`
	KillerTeamUrn      string               `protobuf:"bytes,6,opt,name=killer_team_urn,json=killerTeamUrn,proto3" json:"killer_team_urn,omitempty"`
	VictimUrn          string               `protobuf:"bytes,7,opt,name=victim_urn,json=victimUrn,proto3" json:"victim_urn,omitempty"`
	VictimTeamUrn      string               `protobuf:"bytes,8,opt,name=victim_team_urn,json=victimTeamUrn,proto3" json:"victim_team_urn,omitempty"`
	Weapon             string               `protobuf:"bytes,9,opt,name=weapon,proto3" json:"weapon,omitempty"`
	Hitgroup           string               `protobuf:"bytes,10,opt,name=hitgroup,proto3" json:"hitgroup,omitempty"`
	HealthDeducted     uint32               `protobuf:"varint,11,opt,name=health_deducted,json=healthDeducted,proto3" json:"health_deducted,omitempty"`
	HealthRemaining    uint32               `protobuf:"varint,12,opt,name=health_remaining,json=healthRemaining,proto3" json:"health_remaining,omitempty"`
	ArmorDeducted      uint32               `protobuf:"varint,13,opt,name=armor_deducted,json=armorDeducted,proto3" json:"armor_deducted,omitempty"`
	ArmorRemaining     uint32               `protobuf:"varint,14,opt,name=armor_remaining,json=armorRemaining,proto3" json:"armor_remaining,omitempty"`
	TargetPosition     *CsgoPosition        `protobuf:"bytes,15,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`
}

func (x *CsgoDamageDealt) Reset() {
	*x = CsgoDamageDealt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoDamageDealt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoDamageDealt) ProtoMessage() {}

func (x *CsgoDamageDealt) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoDamageDealt.ProtoReflect.Descriptor instead.
func (*CsgoDamageDealt) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{48}
}

func (x *CsgoDamageDealt) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoDamageDealt) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoDamageDealt) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoDamageDealt) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoDamageDealt) GetKillerUrn() string {
	if x != nil {
		return x.KillerUrn
	}
	return ""
}

func (x *CsgoDamageDealt) GetKillerTeamUrn() string {
	if x != nil {
		return x.KillerTeamUrn
	}
	return ""
}

func (x *CsgoDamageDealt) GetVictimUrn() string {
	if x != nil {
		return x.VictimUrn
	}
	return ""
}

func (x *CsgoDamageDealt) GetVictimTeamUrn() string {
	if x != nil {
		return x.VictimTeamUrn
	}
	return ""
}

func (x *CsgoDamageDealt) GetWeapon() string {
	if x != nil {
		return x.Weapon
	}
	return ""
}

func (x *CsgoDamageDealt) GetHitgroup() string {
	if x != nil {
		return x.Hitgroup
	}
	return ""
}

func (x *CsgoDamageDealt) GetHealthDeducted() uint32 {
	if x != nil {
		return x.HealthDeducted
	}
	return 0
}

func (x *CsgoDamageDealt) GetHealthRemaining() uint32 {
	if x != nil {
		return x.HealthRemaining
	}
	return 0
}

func (x *CsgoDamageDealt) GetArmorDeducted() uint32 {
	if x != nil {
		return x.ArmorDeducted
	}
	return 0
}

func (x *CsgoDamageDealt) GetArmorRemaining() uint32 {
	if x != nil {
		return x.ArmorRemaining
	}
	return 0
}

func (x *CsgoDamageDealt) GetTargetPosition() *CsgoPosition {
	if x != nil {
		return x.TargetPosition
	}
	return nil
}

type CsgoFreezeTimeEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration          `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration          `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32                        `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerBalances     map[string]*CsgoPlayerBalance `protobuf:"bytes,4,rep,name=player_balances,json=playerBalances,proto3" json:"player_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          // keys are type of player_urn
	PlayerInventories  map[string]*CsgoPlayerItems   `protobuf:"bytes,5,rep,name=player_inventories,json=playerInventories,proto3" json:"player_inventories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CsgoFreezeTimeEnded) Reset() {
	*x = CsgoFreezeTimeEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoFreezeTimeEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoFreezeTimeEnded) ProtoMessage() {}

func (x *CsgoFreezeTimeEnded) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoFreezeTimeEnded.ProtoReflect.Descriptor instead.
func (*CsgoFreezeTimeEnded) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{49}
}

func (x *CsgoFreezeTimeEnded) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoFreezeTimeEnded) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoFreezeTimeEnded) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoFreezeTimeEnded) GetPlayerBalances() map[string]*CsgoPlayerBalance {
	if x != nil {
		return x.PlayerBalances
	}
	return nil
}

func (x *CsgoFreezeTimeEnded) GetPlayerInventories() map[string]*CsgoPlayerItems {
	if x != nil {
		return x.PlayerInventories
	}
	return nil
}

type CsgoFreezeTimeStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration          `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration          `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32                        `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerBalances     map[string]*CsgoPlayerBalance `protobuf:"bytes,4,rep,name=player_balances,json=playerBalances,proto3" json:"player_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                        // keys are type of player_urn
	TeamsRoundInfo     map[string]CsgoSide           `protobuf:"bytes,5,rep,name=teams_round_info,json=teamsRoundInfo,proto3" json:"teams_round_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=bragi.CsgoSide"` // keys are type of team_urn
}

func (x *CsgoFreezeTimeStarted) Reset() {
	*x = CsgoFreezeTimeStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoFreezeTimeStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoFreezeTimeStarted) ProtoMessage() {}

func (x *CsgoFreezeTimeStarted) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoFreezeTimeStarted.ProtoReflect.Descriptor instead.
func (*CsgoFreezeTimeStarted) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{50}
}

func (x *CsgoFreezeTimeStarted) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoFreezeTimeStarted) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoFreezeTimeStarted) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoFreezeTimeStarted) GetPlayerBalances() map[string]*CsgoPlayerBalance {
	if x != nil {
		return x.PlayerBalances
	}
	return nil
}

func (x *CsgoFreezeTimeStarted) GetTeamsRoundInfo() map[string]CsgoSide {
	if x != nil {
		return x.TeamsRoundInfo
	}
	return nil
}

type CsgoItemDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	Position           *CsgoPosition        `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,5,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,6,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Item               string               `protobuf:"bytes,7,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CsgoItemDrop) Reset() {
	*x = CsgoItemDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoItemDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoItemDrop) ProtoMessage() {}

func (x *CsgoItemDrop) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoItemDrop.ProtoReflect.Descriptor instead.
func (*CsgoItemDrop) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{51}
}

func (x *CsgoItemDrop) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoItemDrop) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoItemDrop) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoItemDrop) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoItemDrop) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoItemDrop) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoItemDrop) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type CsgoItemPickUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
}

func (x *CsgoItemPickUp) Reset() {
	*x = CsgoItemPickUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoItemPickUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoItemPickUp) ProtoMessage() {}

func (x *CsgoItemPickUp) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoItemPickUp.ProtoReflect.Descriptor instead.
func (*CsgoItemPickUp) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{52}
}

func (x *CsgoItemPickUp) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoItemPickUp) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoItemPickUp) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoItemPickUp) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoItemPickUp) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

type CsgoItemPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,4,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,5,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Item               string               `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"`
	Balance            uint32               `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	EquipmentValue     uint32               `protobuf:"varint,8,opt,name=equipment_value,json=equipmentValue,proto3" json:"equipment_value,omitempty"`
}

func (x *CsgoItemPurchase) Reset() {
	*x = CsgoItemPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoItemPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoItemPurchase) ProtoMessage() {}

func (x *CsgoItemPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoItemPurchase.ProtoReflect.Descriptor instead.
func (*CsgoItemPurchase) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{53}
}

func (x *CsgoItemPurchase) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoItemPurchase) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoItemPurchase) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoItemPurchase) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoItemPurchase) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoItemPurchase) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *CsgoItemPurchase) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CsgoItemPurchase) GetEquipmentValue() uint32 {
	if x != nil {
		return x.EquipmentValue
	}
	return 0
}

type CsgoItemThrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	Position           *CsgoPosition        `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,5,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,6,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Item               string               `protobuf:"bytes,7,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CsgoItemThrow) Reset() {
	*x = CsgoItemThrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoItemThrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoItemThrow) ProtoMessage() {}

func (x *CsgoItemThrow) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoItemThrow.ProtoReflect.Descriptor instead.
func (*CsgoItemThrow) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{54}
}

func (x *CsgoItemThrow) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoItemThrow) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoItemThrow) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoItemThrow) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoItemThrow) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoItemThrow) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoItemThrow) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type CsgoKill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	Position           *CsgoPosition        `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	KillerUrn          string               `protobuf:"bytes,5,opt,name=killer_urn,json=killerUrn,proto3" json:"killer_urn,omitempty"`
	KillerTeamUrn      string               `protobuf:"bytes,6,opt,name=killer_team_urn,json=killerTeamUrn,proto3" json:"killer_team_urn,omitempty"`
	VictimUrn          string               `protobuf:"bytes,7,opt,name=victim_urn,json=victimUrn,proto3" json:"victim_urn,omitempty"`
	VictimTeamUrn      string               `protobuf:"bytes,8,opt,name=victim_team_urn,json=victimTeamUrn,proto3" json:"victim_team_urn,omitempty"`
	Weapon             string               `protobuf:"bytes,9,opt,name=weapon,proto3" json:"weapon,omitempty"`
	Headshot           bool                 `protobuf:"varint,10,opt,name=headshot,proto3" json:"headshot,omitempty"`
	Penetrated         bool                 `protobuf:"varint,11,opt,name=penetrated,proto3" json:"penetrated,omitempty"`
	Assistants         []string             `protobuf:"bytes,12,rep,name=assistants,proto3" json:"assistants,omitempty"` // array of player_urns
	Balance            uint32               `protobuf:"varint,13,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *CsgoKill) Reset() {
	*x = CsgoKill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoKill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoKill) ProtoMessage() {}

func (x *CsgoKill) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoKill.ProtoReflect.Descriptor instead.
func (*CsgoKill) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{55}
}

func (x *CsgoKill) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoKill) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoKill) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoKill) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoKill) GetKillerUrn() string {
	if x != nil {
		return x.KillerUrn
	}
	return ""
}

func (x *CsgoKill) GetKillerTeamUrn() string {
	if x != nil {
		return x.KillerTeamUrn
	}
	return ""
}

func (x *CsgoKill) GetVictimUrn() string {
	if x != nil {
		return x.VictimUrn
	}
	return ""
}

func (x *CsgoKill) GetVictimTeamUrn() string {
	if x != nil {
		return x.VictimTeamUrn
	}
	return ""
}

func (x *CsgoKill) GetWeapon() string {
	if x != nil {
		return x.Weapon
	}
	return ""
}

func (x *CsgoKill) GetHeadshot() bool {
	if x != nil {
		return x.Headshot
	}
	return false
}

func (x *CsgoKill) GetPenetrated() bool {
	if x != nil {
		return x.Penetrated
	}
	return false
}

func (x *CsgoKill) GetAssistants() []string {
	if x != nil {
		return x.Assistants
	}
	return nil
}

func (x *CsgoKill) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type CsgoDeath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	Position           *CsgoPosition        `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	PlayerUrn          string               `protobuf:"bytes,5,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	TeamUrn            string               `protobuf:"bytes,6,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	TotalDeaths        uint32               `protobuf:"varint,7,opt,name=total_deaths,json=totalDeaths,proto3" json:"total_deaths,omitempty"`
	RespawnTime        *durationpb.Duration `protobuf:"bytes,8,opt,name=respawn_time,json=respawnTime,proto3" json:"respawn_time,omitempty"`
	Suicide            bool                 `protobuf:"varint,9,opt,name=suicide,proto3" json:"suicide,omitempty"`
}

func (x *CsgoDeath) Reset() {
	*x = CsgoDeath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoDeath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoDeath) ProtoMessage() {}

func (x *CsgoDeath) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoDeath.ProtoReflect.Descriptor instead.
func (*CsgoDeath) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{56}
}

func (x *CsgoDeath) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoDeath) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoDeath) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoDeath) GetPosition() *CsgoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CsgoDeath) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *CsgoDeath) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *CsgoDeath) GetTotalDeaths() uint32 {
	if x != nil {
		return x.TotalDeaths
	}
	return 0
}

func (x *CsgoDeath) GetRespawnTime() *durationpb.Duration {
	if x != nil {
		return x.RespawnTime
	}
	return nil
}

func (x *CsgoDeath) GetSuicide() bool {
	if x != nil {
		return x.Suicide
	}
	return false
}

type CsgoMapEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	CsgoMapName        string               `protobuf:"bytes,4,opt,name=csgo_map_name,json=csgoMapName,proto3" json:"csgo_map_name,omitempty"`
	WinningTeamUrn     string               `protobuf:"bytes,5,opt,name=winning_team_urn,json=winningTeamUrn,proto3" json:"winning_team_urn,omitempty"`
}

func (x *CsgoMapEnd) Reset() {
	*x = CsgoMapEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMapEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMapEnd) ProtoMessage() {}

func (x *CsgoMapEnd) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMapEnd.ProtoReflect.Descriptor instead.
func (*CsgoMapEnd) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{57}
}

func (x *CsgoMapEnd) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoMapEnd) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoMapEnd) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoMapEnd) GetCsgoMapName() string {
	if x != nil {
		return x.CsgoMapName
	}
	return ""
}

func (x *CsgoMapEnd) GetWinningTeamUrn() string {
	if x != nil {
		return x.WinningTeamUrn
	}
	return ""
}

type CsgoMapStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime     *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	CsgoMapName string               `protobuf:"bytes,2,opt,name=csgo_map_name,json=csgoMapName,proto3" json:"csgo_map_name,omitempty"`
}

func (x *CsgoMapStart) Reset() {
	*x = CsgoMapStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMapStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMapStart) ProtoMessage() {}

func (x *CsgoMapStart) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMapStart.ProtoReflect.Descriptor instead.
func (*CsgoMapStart) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{58}
}

func (x *CsgoMapStart) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoMapStart) GetCsgoMapName() string {
	if x != nil {
		return x.CsgoMapName
	}
	return ""
}

type CsgoRoundEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration          `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration          `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32                        `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
	WinningTeamUrn     string                        `protobuf:"bytes,4,opt,name=winning_team_urn,json=winningTeamUrn,proto3" json:"winning_team_urn,omitempty"`
	WinReason          CsgoWinReason                 `protobuf:"varint,5,opt,name=win_reason,json=winReason,proto3,enum=bragi.CsgoWinReason" json:"win_reason,omitempty"`
	PlayerBalances     map[string]*CsgoPlayerBalance `protobuf:"bytes,6,rep,name=player_balances,json=playerBalances,proto3" json:"player_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          // keys are type of player_urn
	PlayerInventories  map[string]*CsgoPlayerItems   `protobuf:"bytes,7,rep,name=player_inventories,json=playerInventories,proto3" json:"player_inventories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys are type of player_urn
}

func (x *CsgoRoundEnd) Reset() {
	*x = CsgoRoundEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundEnd) ProtoMessage() {}

func (x *CsgoRoundEnd) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundEnd.ProtoReflect.Descriptor instead.
func (*CsgoRoundEnd) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{59}
}

func (x *CsgoRoundEnd) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoRoundEnd) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoRoundEnd) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

func (x *CsgoRoundEnd) GetWinningTeamUrn() string {
	if x != nil {
		return x.WinningTeamUrn
	}
	return ""
}

func (x *CsgoRoundEnd) GetWinReason() CsgoWinReason {
	if x != nil {
		return x.WinReason
	}
	return CsgoWinReason_CSGO_WIN_REASON_UNSPECIFIED
}

func (x *CsgoRoundEnd) GetPlayerBalances() map[string]*CsgoPlayerBalance {
	if x != nil {
		return x.PlayerBalances
	}
	return nil
}

func (x *CsgoRoundEnd) GetPlayerInventories() map[string]*CsgoPlayerItems {
	if x != nil {
		return x.PlayerInventories
	}
	return nil
}

type CsgoRoundPause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
}

func (x *CsgoRoundPause) Reset() {
	*x = CsgoRoundPause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundPause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundPause) ProtoMessage() {}

func (x *CsgoRoundPause) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundPause.ProtoReflect.Descriptor instead.
func (*CsgoRoundPause) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{60}
}

func (x *CsgoRoundPause) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoRoundPause) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoRoundPause) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

type CsgoRoundResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
}

func (x *CsgoRoundResume) Reset() {
	*x = CsgoRoundResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundResume) ProtoMessage() {}

func (x *CsgoRoundResume) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundResume.ProtoReflect.Descriptor instead.
func (*CsgoRoundResume) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{61}
}

func (x *CsgoRoundResume) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoRoundResume) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoRoundResume) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

type CsgoRoundRollback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRoundNumber uint32 `protobuf:"varint,1,opt,name=next_round_number,json=nextRoundNumber,proto3" json:"next_round_number,omitempty"`
}

func (x *CsgoRoundRollback) Reset() {
	*x = CsgoRoundRollback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundRollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundRollback) ProtoMessage() {}

func (x *CsgoRoundRollback) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundRollback.ProtoReflect.Descriptor instead.
func (*CsgoRoundRollback) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{62}
}

func (x *CsgoRoundRollback) GetNextRoundNumber() uint32 {
	if x != nil {
		return x.NextRoundNumber
	}
	return 0
}

type CsgoRoundStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTime            *durationpb.Duration `protobuf:"bytes,1,opt,name=map_time,json=mapTime,proto3" json:"map_time,omitempty"`
	TimeRemaining      *durationpb.Duration `protobuf:"bytes,2,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	CurrentRoundNumber uint32               `protobuf:"varint,3,opt,name=current_round_number,json=currentRoundNumber,proto3" json:"current_round_number,omitempty"`
}

func (x *CsgoRoundStart) Reset() {
	*x = CsgoRoundStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundStart) ProtoMessage() {}

func (x *CsgoRoundStart) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundStart.ProtoReflect.Descriptor instead.
func (*CsgoRoundStart) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{63}
}

func (x *CsgoRoundStart) GetMapTime() *durationpb.Duration {
	if x != nil {
		return x.MapTime
	}
	return nil
}

func (x *CsgoRoundStart) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

func (x *CsgoRoundStart) GetCurrentRoundNumber() uint32 {
	if x != nil {
		return x.CurrentRoundNumber
	}
	return 0
}

type CsgoMatchMessage_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CsgoMatchMessage_Payload_MatchState
	//	*CsgoMatchMessage_Payload_Update
	Payload isCsgoMatchMessage_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CsgoMatchMessage_Payload) Reset() {
	*x = CsgoMatchMessage_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMatchMessage_Payload) ProtoMessage() {}

func (x *CsgoMatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*CsgoMatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{0, 0}
}

func (m *CsgoMatchMessage_Payload) GetPayload() isCsgoMatchMessage_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CsgoMatchMessage_Payload) GetMatchState() *CsgoMatchState {
	if x, ok := x.GetPayload().(*CsgoMatchMessage_Payload_MatchState); ok {
		return x.MatchState
	}
	return nil
}

func (x *CsgoMatchMessage_Payload) GetUpdate() *CsgoMatchUpdate {
	if x, ok := x.GetPayload().(*CsgoMatchMessage_Payload_Update); ok {
		return x.Update
	}
	return nil
}

type isCsgoMatchMessage_Payload_Payload interface {
	isCsgoMatchMessage_Payload_Payload()
}

type CsgoMatchMessage_Payload_MatchState struct {
	// Replace match_state property in MatchSnapshot.
	MatchState *CsgoMatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3,oneof"`
}

type CsgoMatchMessage_Payload_Update struct {
	// Particular updates which are applied on property match_state in MatchState.
	Update *CsgoMatchUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*CsgoMatchMessage_Payload_MatchState) isCsgoMatchMessage_Payload_Payload() {}

func (*CsgoMatchMessage_Payload_Update) isCsgoMatchMessage_Payload_Payload() {}

type CsgoTeamMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CsgoTeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate
	Payload isCsgoTeamMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CsgoTeamMapStatePartialUpdate_Payload) Reset() {
	*x = CsgoTeamMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *CsgoTeamMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CsgoTeamMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{24, 0}
}

func (m *CsgoTeamMapStatePartialUpdate_Payload) GetPayload() isCsgoTeamMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CsgoTeamMapStatePartialUpdate_Payload) GetPlayerMapStatesPartialUpdate() *CsgoPlayerMapStatePartialUpdate {
	if x, ok := x.GetPayload().(*CsgoTeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate); ok {
		return x.PlayerMapStatesPartialUpdate
	}
	return nil
}

type isCsgoTeamMapStatePartialUpdate_Payload_Payload interface {
	isCsgoTeamMapStatePartialUpdate_Payload_Payload()
}

type CsgoTeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate struct {
	// Apply partial update on value under given key in player_map_states map property in CsgoTeamMapState.
	PlayerMapStatesPartialUpdate *CsgoPlayerMapStatePartialUpdate `protobuf:"bytes,1,opt,name=player_map_states_partial_update,json=playerMapStatesPartialUpdate,proto3,oneof"`
}

func (*CsgoTeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate) isCsgoTeamMapStatePartialUpdate_Payload_Payload() {
}

type CsgoTeamCurrentRoundStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CsgoTeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate
	Payload isCsgoTeamCurrentRoundStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CsgoTeamCurrentRoundStatePartialUpdate_Payload) Reset() {
	*x = CsgoTeamCurrentRoundStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamCurrentRoundStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamCurrentRoundStatePartialUpdate_Payload) ProtoMessage() {}

func (x *CsgoTeamCurrentRoundStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamCurrentRoundStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CsgoTeamCurrentRoundStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{26, 0}
}

func (m *CsgoTeamCurrentRoundStatePartialUpdate_Payload) GetPayload() isCsgoTeamCurrentRoundStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CsgoTeamCurrentRoundStatePartialUpdate_Payload) GetPlayerRoundStatesPartialUpdate() *CsgoPlayerCurrentRoundStatePartialUpdate {
	if x, ok := x.GetPayload().(*CsgoTeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate); ok {
		return x.PlayerRoundStatesPartialUpdate
	}
	return nil
}

type isCsgoTeamCurrentRoundStatePartialUpdate_Payload_Payload interface {
	isCsgoTeamCurrentRoundStatePartialUpdate_Payload_Payload()
}

type CsgoTeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate struct {
	// Apply partial update on value under given key in player_round_states map property in CsgoTeamCurrentRoundState.
	PlayerRoundStatesPartialUpdate *CsgoPlayerCurrentRoundStatePartialUpdate `protobuf:"bytes,1,opt,name=player_round_states_partial_update,json=playerRoundStatesPartialUpdate,proto3,oneof"`
}

func (*CsgoTeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate) isCsgoTeamCurrentRoundStatePartialUpdate_Payload_Payload() {
}

type CsgoPlayerMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CsgoPlayerMapStatePartialUpdate_Payload_Statistics
	Payload isCsgoPlayerMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CsgoPlayerMapStatePartialUpdate_Payload) Reset() {
	*x = CsgoPlayerMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *CsgoPlayerMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CsgoPlayerMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{29, 0}
}

func (m *CsgoPlayerMapStatePartialUpdate_Payload) GetPayload() isCsgoPlayerMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CsgoPlayerMapStatePartialUpdate_Payload) GetStatistics() *CsgoPlayerMapStatisticsState {
	if x, ok := x.GetPayload().(*CsgoPlayerMapStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

type isCsgoPlayerMapStatePartialUpdate_Payload_Payload interface {
	isCsgoPlayerMapStatePartialUpdate_Payload_Payload()
}

type CsgoPlayerMapStatePartialUpdate_Payload_Statistics struct {
	// Apply partial update on value under given key in 'statistics' map property in CsgoPlayerMapState.
	Statistics *CsgoPlayerMapStatisticsState `protobuf:"bytes,1,opt,name=statistics,proto3,oneof"`
}

func (*CsgoPlayerMapStatePartialUpdate_Payload_Statistics) isCsgoPlayerMapStatePartialUpdate_Payload_Payload() {
}

type CsgoPlayerCurrentRoundStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Statistics
	//	*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Items
	//	*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Position
	Payload isCsgoPlayerCurrentRoundStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate_Payload) Reset() {
	*x = CsgoPlayerCurrentRoundStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_csgo_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerCurrentRoundStatePartialUpdate_Payload) ProtoMessage() {}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_csgo_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerCurrentRoundStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*CsgoPlayerCurrentRoundStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_csgo_proto_rawDescGZIP(), []int{32, 0}
}

func (m *CsgoPlayerCurrentRoundStatePartialUpdate_Payload) GetPayload() isCsgoPlayerCurrentRoundStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate_Payload) GetStatistics() *CsgoPlayerCurrentRoundStatisticsState {
	if x, ok := x.GetPayload().(*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate_Payload) GetItems() *CsgoPlayerItemsState {
	if x, ok := x.GetPayload().(*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Items); ok {
		return x.Items
	}
	return nil
}

func (x *CsgoPlayerCurrentRoundStatePartialUpdate_Payload) GetPosition() *CsgoPlayerPositionState {
	if x, ok := x.GetPayload().(*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Position); ok {
		return x.Position
	}
	return nil
}

type isCsgoPlayerCurrentRoundStatePartialUpdate_Payload_Payload interface {
	isCsgoPlayerCurrentRoundStatePartialUpdate_Payload_Payload()
}

type CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Statistics struct {
	// Replaces "statistics" property in CsgoPlayerCurrentRoundState.
	Statistics *CsgoPlayerCurrentRoundStatisticsState `protobuf:"bytes,1,opt,name=statistics,proto3,oneof"`
}

type CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Items struct {
	// Replaces "items" property in CsgoPlayerCurrentRoundState.
	Items *CsgoPlayerItemsState `protobuf:"bytes,2,opt,name=items,proto3,oneof"`
}

type CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Position struct {
	// Replaces "position" property in CsgoPlayerCurrentRoundState.
	Position *CsgoPlayerPositionState `protobuf:"bytes,3,opt,name=position,proto3,oneof"`
}

func (*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Statistics) isCsgoPlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Items) isCsgoPlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Position) isCsgoPlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

var File_bragi_csgo_proto protoreflect.FileDescriptor

var file_bragi_csgo_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x62, 0x72, 0x61, 0x67, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3,
	0x02, 0x0a, 0x10, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x80, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x79, 0x0a, 0x0f, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x98, 0x02, 0x0a, 0x1b, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc1, 0x03, 0x0a, 0x0e, 0x43,
	0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x77,
	0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08,
	0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x53,
	0x0a, 0x13, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x20, 0x43, 0x73, 0x67, 0x6f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x77, 0x0a,
	0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x1e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xe2, 0x03, 0x0a,
	0x13, 0x43, 0x73, 0x67, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4c,
	0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x15,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x85, 0x03, 0x0a, 0x14, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x59,
	0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x05, 0x0a, 0x10, 0x43, 0x73,
	0x67, 0x6f, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x73, 0x67, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x12, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x10, 0x62, 0x6f, 0x6d,
	0x62, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62,
	0x6f, 0x6d, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x11, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0xe9, 0x02, 0x0a, 0x22, 0x43, 0x73, 0x67, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f,
	0x6d, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x1a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x74, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xaf, 0x03, 0x0a,
	0x15, 0x43, 0x73, 0x67, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x6f, 0x6d,
	0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d,
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x5f, 0x0a,
	0x0f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce,
	0x02, 0x0a, 0x16, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x60, 0x0a,
	0x0f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xdf, 0x02, 0x0a, 0x12, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x77, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x48, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75,
	0x72, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x43, 0x73, 0x67, 0x6f, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x0d, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f,
	0x6d, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f,
	0x6d, 0x62, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x08, 0x64, 0x65, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d,
	0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x65, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x66,
	0x0a, 0x14, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x14, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f,
	0x6d, 0x62, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72,
	0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f,
	0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72,
	0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe8, 0x01,
	0x0a, 0x15, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x43, 0x73, 0x67,
	0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x8b, 0x02, 0x0a, 0x1d, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x46, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x86, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x70, 0x0a, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8b,
	0x02, 0x0a, 0x10, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x23,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x5d, 0x0a,
	0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x02, 0x0a,
	0x26, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6e, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x93, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x7d, 0x0a, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x19, 0x43, 0x73,
	0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6e, 0x12, 0x67, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x16, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x1a, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12,
	0x48, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x5f, 0x0a, 0x0c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x1f, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x48, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x5b, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0x7a, 0x0a, 0x1c, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12,
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xf6, 0x02, 0x0a,
	0x28, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xd7, 0x01, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x1b, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcb, 0x02, 0x0a, 0x25, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0x8b, 0x01, 0x0a, 0x14, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9b,
	0x01, 0x0a, 0x1c, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x69, 0x0a, 0x17,
	0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x06, 0x0a, 0x14, 0x43, 0x73, 0x67, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1b,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x18, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x1c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x19, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x15, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x41, 0x72, 0x6d, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x16, 0x65, 0x6e, 0x65, 0x6d, 0x79,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x18, 0x65, 0x6e,
	0x65, 0x6d, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x41, 0x72,
	0x6d, 0x6f, 0x72, 0x52, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x65, 0x6e, 0x65,
	0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x05, 0x52, 0x19, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x61, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x61, 0x77, 0x88, 0x01, 0x01,
	0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72,
	0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x22,
	0x4f, 0x0a, 0x0e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x40, 0x0a, 0x0c, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x22, 0xb6, 0x09, 0x0a, 0x09, 0x43, 0x73, 0x67, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x4e, 0x0a, 0x13, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x62,
	0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x0d, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0c, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x4e, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x69,
	0x63, 0x6b, 0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x63, 0x6b,
	0x55, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70,
	0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x28,
	0x0a, 0x05, 0x64, 0x65, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x05, 0x64, 0x65, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x6d, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x38,
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x11, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x78, 0x0a, 0x0f, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72,
	0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xfb,
	0x01, 0x0a, 0x15, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x22, 0x8f, 0x02, 0x0a,
	0x0f, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x44, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd7,
	0x01, 0x0a, 0x10, 0x43, 0x73, 0x67, 0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x43, 0x73, 0x67,
	0x6f, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08,
	0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x90, 0x05, 0x0a, 0x0f, 0x43,
	0x73, 0x67, 0x6f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x55, 0x72, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d,
	0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x69, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x69, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x3c, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x04,
	0x0a, 0x13, 0x43, 0x73, 0x67, 0x6f, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x13, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x04, 0x0a, 0x15, 0x43, 0x73, 0x67, 0x6f, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x5b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a,
	0x13, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb7, 0x02, 0x0a, 0x0c, 0x43, 0x73, 0x67, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x72,
	0x6f, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xf4, 0x01, 0x0a, 0x0e,
	0x43, 0x73, 0x67, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6e, 0x22, 0xcd, 0x02, 0x0a, 0x10, 0x43, 0x73, 0x67, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x43, 0x73, 0x67, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x68, 0x72, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x81, 0x04,
	0x0a, 0x08, 0x43, 0x73, 0x67, 0x6f, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x65,
	0x72, 0x55, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x54, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x6e, 0x65, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x6e,
	0x65, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x9b, 0x03, 0x0a, 0x09, 0x43, 0x73, 0x67, 0x6f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x61,
	0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x69, 0x63, 0x69, 0x64, 0x65, 0x22,
	0x84, 0x02, 0x0a, 0x0a, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x73, 0x67, 0x6f,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x22, 0x68, 0x0a, 0x0c, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x73, 0x67, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xff, 0x04, 0x0a, 0x0c, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e,
	0x64, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x77,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x09, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x12,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xbb, 0x01, 0x0a, 0x0f, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3f, 0x0a,
	0x11, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xba,
	0x01, 0x0a, 0x0e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x6d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0x61, 0x0a, 0x08, 0x43,
	0x73, 0x67, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x53, 0x47, 0x4f, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49, 0x53,
	0x54, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x2a, 0x88,
	0x02, 0x0a, 0x0d, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49, 0x53,
	0x54, 0x53, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x53,
	0x47, 0x4f, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x53, 0x47, 0x4f, 0x5f,
	0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xcc, 0x01, 0x0a, 0x12, 0x43, 0x73,
	0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x53, 0x47, 0x4f, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x55, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x43,
	0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x13, 0x43, 0x73, 0x67,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x22, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x53, 0x47, 0x4f,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x53, 0x47,
	0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x42, 0x21,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x5a, 0x0e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bragi_csgo_proto_rawDescOnce sync.Once
	file_bragi_csgo_proto_rawDescData = file_bragi_csgo_proto_rawDesc
)

func file_bragi_csgo_proto_rawDescGZIP() []byte {
	file_bragi_csgo_proto_rawDescOnce.Do(func() {
		file_bragi_csgo_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_csgo_proto_rawDescData)
	})
	return file_bragi_csgo_proto_rawDescData
}

var file_bragi_csgo_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bragi_csgo_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_bragi_csgo_proto_goTypes = []interface{}{
	(CsgoSide)(0),                                    // 0: bragi.CsgoSide
	(CsgoWinReason)(0),                               // 1: bragi.CsgoWinReason
	(CsgoRoundStateType)(0),                          // 2: bragi.CsgoRoundStateType
	(CsgoMatchStatusType)(0),                         // 3: bragi.CsgoMatchStatusType
	(*CsgoMatchMessage)(nil),                         // 4: bragi.CsgoMatchMessage
	(*CsgoMatchUpdate)(nil),                          // 5: bragi.CsgoMatchUpdate
	(*CsgoMatchStatePartialUpdate)(nil),              // 6: bragi.CsgoMatchStatePartialUpdate
	(*CsgoMatchState)(nil),                           // 7: bragi.CsgoMatchState
	(*CsgoMatchScoreState)(nil),                      // 8: bragi.CsgoMatchScoreState
	(*CsgoTeam)(nil),                                 // 9: bragi.CsgoTeam
	(*CsgoCurrentMapStatePartialUpdate)(nil),         // 10: bragi.CsgoCurrentMapStatePartialUpdate
	(*CsgoCurrentMapState)(nil),                      // 11: bragi.CsgoCurrentMapState
	(*CsgoPreviousMapState)(nil),                     // 12: bragi.CsgoPreviousMapState
	(*CsgoMapInfoState)(nil),                         // 13: bragi.CsgoMapInfoState
	(*CsgoMapScoreState)(nil),                        // 14: bragi.CsgoMapScoreState
	(*CsgoCurrentRoundStatePartialUpdate)(nil),       // 15: bragi.CsgoCurrentRoundStatePartialUpdate
	(*CsgoCurrentRoundState)(nil),                    // 16: bragi.CsgoCurrentRoundState
	(*CsgoPreviousRoundState)(nil),                   // 17: bragi.CsgoPreviousRoundState
	(*CsgoRoundInfoState)(nil),                       // 18: bragi.CsgoRoundInfoState
	(*CsgoRoundScoreState)(nil),                      // 19: bragi.CsgoRoundScoreState
	(*CsgoRoundTimeState)(nil),                       // 20: bragi.CsgoRoundTimeState
	(*CsgoBombState)(nil),                            // 21: bragi.CsgoBombState
	(*CsgoBombCarriedState)(nil),                     // 22: bragi.CsgoBombCarriedState
	(*CsgoBombDroppedState)(nil),                     // 23: bragi.CsgoBombDroppedState
	(*CsgoBombPlantingState)(nil),                    // 24: bragi.CsgoBombPlantingState
	(*CsgoBombPlantedState)(nil),                     // 25: bragi.CsgoBombPlantedState
	(*CsgoBombDefusingState)(nil),                    // 26: bragi.CsgoBombDefusingState
	(*CsgoBombDefusedState)(nil),                     // 27: bragi.CsgoBombDefusedState
	(*CsgoTeamMapStatePartialUpdate)(nil),            // 28: bragi.CsgoTeamMapStatePartialUpdate
	(*CsgoTeamMapState)(nil),                         // 29: bragi.CsgoTeamMapState
	(*CsgoTeamCurrentRoundStatePartialUpdate)(nil),   // 30: bragi.CsgoTeamCurrentRoundStatePartialUpdate
	(*CsgoTeamCurrentRoundState)(nil),                // 31: bragi.CsgoTeamCurrentRoundState
	(*CsgoPreviousTeamRoundState)(nil),               // 32: bragi.CsgoPreviousTeamRoundState
	(*CsgoPlayerMapStatePartialUpdate)(nil),          // 33: bragi.CsgoPlayerMapStatePartialUpdate
	(*CsgoPlayerMapState)(nil),                       // 34: bragi.CsgoPlayerMapState
	(*CsgoPlayerMapStatisticsState)(nil),             // 35: bragi.CsgoPlayerMapStatisticsState
	(*CsgoPlayerCurrentRoundStatePartialUpdate)(nil), // 36: bragi.CsgoPlayerCurrentRoundStatePartialUpdate
	(*CsgoPlayerCurrentRoundState)(nil),              // 37: bragi.CsgoPlayerCurrentRoundState
	(*CsgoPlayerCurrentRoundStatisticsState)(nil),    // 38: bragi.CsgoPlayerCurrentRoundStatisticsState
	(*CsgoPlayerItemsState)(nil),                     // 39: bragi.CsgoPlayerItemsState
	(*CsgoPlayerPreviousRoundState)(nil),             // 40: bragi.CsgoPlayerPreviousRoundState
	(*CsgoPlayerPositionState)(nil),                  // 41: bragi.CsgoPlayerPositionState
	(*CsgoPlayerStatistics)(nil),                     // 42: bragi.CsgoPlayerStatistics
	(*CsgoPlayerItem)(nil),                           // 43: bragi.CsgoPlayerItem
	(*CsgoPosition)(nil),                             // 44: bragi.CsgoPosition
	(*CsgoEvent)(nil),                                // 45: bragi.CsgoEvent
	(*CsgoPlayerBalance)(nil),                        // 46: bragi.CsgoPlayerBalance
	(*CsgoPlayerItems)(nil),                          // 47: bragi.CsgoPlayerItems
	(*CsgoBombDefuseStarted)(nil),                    // 48: bragi.CsgoBombDefuseStarted
	(*CsgoBombDefused)(nil),                          // 49: bragi.CsgoBombDefused
	(*CsgoBombExploded)(nil),                         // 50: bragi.CsgoBombExploded
	(*CsgoBombPlanted)(nil),                          // 51: bragi.CsgoBombPlanted
	(*CsgoDamageDealt)(nil),                          // 52: bragi.CsgoDamageDealt
	(*CsgoFreezeTimeEnded)(nil),                      // 53: bragi.CsgoFreezeTimeEnded
	(*CsgoFreezeTimeStarted)(nil),                    // 54: bragi.CsgoFreezeTimeStarted
	(*CsgoItemDrop)(nil),                             // 55: bragi.CsgoItemDrop
	(*CsgoItemPickUp)(nil),                           // 56: bragi.CsgoItemPickUp
	(*CsgoItemPurchase)(nil),                         // 57: bragi.CsgoItemPurchase
	(*CsgoItemThrow)(nil),                            // 58: bragi.CsgoItemThrow
	(*CsgoKill)(nil),                                 // 59: bragi.CsgoKill
	(*CsgoDeath)(nil),                                // 60: bragi.CsgoDeath
	(*CsgoMapEnd)(nil),                               // 61: bragi.CsgoMapEnd
	(*CsgoMapStart)(nil),                             // 62: bragi.CsgoMapStart
	(*CsgoRoundEnd)(nil),                             // 63: bragi.CsgoRoundEnd
	(*CsgoRoundPause)(nil),                           // 64: bragi.CsgoRoundPause
	(*CsgoRoundResume)(nil),                          // 65: bragi.CsgoRoundResume
	(*CsgoRoundRollback)(nil),                        // 66: bragi.CsgoRoundRollback
	(*CsgoRoundStart)(nil),                           // 67: bragi.CsgoRoundStart
	(*CsgoMatchMessage_Payload)(nil),                 // 68: bragi.CsgoMatchMessage.Payload
	nil,                                              // 69: bragi.CsgoCurrentMapState.TeamMapStatesEntry
	nil,                                              // 70: bragi.CsgoPreviousMapState.TeamMapStatesEntry
	nil,                                              // 71: bragi.CsgoCurrentRoundState.TeamStatesEntry
	nil,                                              // 72: bragi.CsgoPreviousRoundState.TeamStatesEntry
	(*CsgoTeamMapStatePartialUpdate_Payload)(nil),    // 73: bragi.CsgoTeamMapStatePartialUpdate.Payload
	nil, // 74: bragi.CsgoTeamMapState.PlayerMapStatesEntry
	(*CsgoTeamCurrentRoundStatePartialUpdate_Payload)(nil), // 75: bragi.CsgoTeamCurrentRoundStatePartialUpdate.Payload
	nil, // 76: bragi.CsgoTeamCurrentRoundState.PlayerRoundStatesEntry
	nil, // 77: bragi.CsgoPreviousTeamRoundState.PlayersEntry
	(*CsgoPlayerMapStatePartialUpdate_Payload)(nil),          // 78: bragi.CsgoPlayerMapStatePartialUpdate.Payload
	(*CsgoPlayerCurrentRoundStatePartialUpdate_Payload)(nil), // 79: bragi.CsgoPlayerCurrentRoundStatePartialUpdate.Payload
	nil,                           // 80: bragi.CsgoFreezeTimeEnded.PlayerBalancesEntry
	nil,                           // 81: bragi.CsgoFreezeTimeEnded.PlayerInventoriesEntry
	nil,                           // 82: bragi.CsgoFreezeTimeStarted.PlayerBalancesEntry
	nil,                           // 83: bragi.CsgoFreezeTimeStarted.TeamsRoundInfoEntry
	nil,                           // 84: bragi.CsgoRoundEnd.PlayerBalancesEntry
	nil,                           // 85: bragi.CsgoRoundEnd.PlayerInventoriesEntry
	(*timestamppb.Timestamp)(nil), // 86: google.protobuf.Timestamp
	(BestOfType)(0),               // 87: bragi.BestOfType
	(*durationpb.Duration)(nil),   // 88: google.protobuf.Duration
}
var file_bragi_csgo_proto_depIdxs = []int32{
	86,  // 0: bragi.CsgoMatchMessage.timestamp:type_name -> google.protobuf.Timestamp
	68,  // 1: bragi.CsgoMatchMessage.payload:type_name -> bragi.CsgoMatchMessage.Payload
	6,   // 2: bragi.CsgoMatchUpdate.updates:type_name -> bragi.CsgoMatchStatePartialUpdate
	45,  // 3: bragi.CsgoMatchUpdate.events:type_name -> bragi.CsgoEvent
	8,   // 4: bragi.CsgoMatchStatePartialUpdate.score:type_name -> bragi.CsgoMatchScoreState
	11,  // 5: bragi.CsgoMatchStatePartialUpdate.current_map_state:type_name -> bragi.CsgoCurrentMapState
	10,  // 6: bragi.CsgoMatchStatePartialUpdate.current_map_state_partial_update:type_name -> bragi.CsgoCurrentMapStatePartialUpdate
	87,  // 7: bragi.CsgoMatchState.match_type:type_name -> bragi.BestOfType
	9,   // 8: bragi.CsgoMatchState.home_team:type_name -> bragi.CsgoTeam
	9,   // 9: bragi.CsgoMatchState.away_team:type_name -> bragi.CsgoTeam
	8,   // 10: bragi.CsgoMatchState.score:type_name -> bragi.CsgoMatchScoreState
	3,   // 11: bragi.CsgoMatchState.match_status:type_name -> bragi.CsgoMatchStatusType
	11,  // 12: bragi.CsgoMatchState.current_map_state:type_name -> bragi.CsgoCurrentMapState
	12,  // 13: bragi.CsgoMatchState.previous_map_states:type_name -> bragi.CsgoPreviousMapState
	13,  // 14: bragi.CsgoCurrentMapStatePartialUpdate.info:type_name -> bragi.CsgoMapInfoState
	14,  // 15: bragi.CsgoCurrentMapStatePartialUpdate.score:type_name -> bragi.CsgoMapScoreState
	15,  // 16: bragi.CsgoCurrentMapStatePartialUpdate.current_round_state_partial_update:type_name -> bragi.CsgoCurrentRoundStatePartialUpdate
	28,  // 17: bragi.CsgoCurrentMapStatePartialUpdate.team_map_states_partial_update:type_name -> bragi.CsgoTeamMapStatePartialUpdate
	13,  // 18: bragi.CsgoCurrentMapState.info:type_name -> bragi.CsgoMapInfoState
	14,  // 19: bragi.CsgoCurrentMapState.score:type_name -> bragi.CsgoMapScoreState
	16,  // 20: bragi.CsgoCurrentMapState.current_round_state:type_name -> bragi.CsgoCurrentRoundState
	17,  // 21: bragi.CsgoCurrentMapState.previous_round_states:type_name -> bragi.CsgoPreviousRoundState
	69,  // 22: bragi.CsgoCurrentMapState.team_map_states:type_name -> bragi.CsgoCurrentMapState.TeamMapStatesEntry
	13,  // 23: bragi.CsgoPreviousMapState.info:type_name -> bragi.CsgoMapInfoState
	14,  // 24: bragi.CsgoPreviousMapState.score:type_name -> bragi.CsgoMapScoreState
	17,  // 25: bragi.CsgoPreviousMapState.round_states:type_name -> bragi.CsgoPreviousRoundState
	70,  // 26: bragi.CsgoPreviousMapState.team_map_states:type_name -> bragi.CsgoPreviousMapState.TeamMapStatesEntry
	88,  // 27: bragi.CsgoMapInfoState.freeze_time_duration:type_name -> google.protobuf.Duration
	88,  // 28: bragi.CsgoMapInfoState.round_time_duration:type_name -> google.protobuf.Duration
	88,  // 29: bragi.CsgoMapInfoState.bomb_time_duration:type_name -> google.protobuf.Duration
	86,  // 30: bragi.CsgoMapInfoState.start_time:type_name -> google.protobuf.Timestamp
	86,  // 31: bragi.CsgoMapInfoState.end_time:type_name -> google.protobuf.Timestamp
	18,  // 32: bragi.CsgoCurrentRoundStatePartialUpdate.info:type_name -> bragi.CsgoRoundInfoState
	19,  // 33: bragi.CsgoCurrentRoundStatePartialUpdate.score:type_name -> bragi.CsgoRoundScoreState
	20,  // 34: bragi.CsgoCurrentRoundStatePartialUpdate.time:type_name -> bragi.CsgoRoundTimeState
	21,  // 35: bragi.CsgoCurrentRoundStatePartialUpdate.bomb_state:type_name -> bragi.CsgoBombState
	30,  // 36: bragi.CsgoCurrentRoundStatePartialUpdate.team_states_partial_update:type_name -> bragi.CsgoTeamCurrentRoundStatePartialUpdate
	18,  // 37: bragi.CsgoCurrentRoundState.info:type_name -> bragi.CsgoRoundInfoState
	19,  // 38: bragi.CsgoCurrentRoundState.score:type_name -> bragi.CsgoRoundScoreState
	20,  // 39: bragi.CsgoCurrentRoundState.time:type_name -> bragi.CsgoRoundTimeState
	21,  // 40: bragi.CsgoCurrentRoundState.bomb_state:type_name -> bragi.CsgoBombState
	71,  // 41: bragi.CsgoCurrentRoundState.team_states:type_name -> bragi.CsgoCurrentRoundState.TeamStatesEntry
	18,  // 42: bragi.CsgoPreviousRoundState.info:type_name -> bragi.CsgoRoundInfoState
	19,  // 43: bragi.CsgoPreviousRoundState.score:type_name -> bragi.CsgoRoundScoreState
	72,  // 44: bragi.CsgoPreviousRoundState.team_states:type_name -> bragi.CsgoPreviousRoundState.TeamStatesEntry
	2,   // 45: bragi.CsgoRoundInfoState.round_type:type_name -> bragi.CsgoRoundStateType
	86,  // 46: bragi.CsgoRoundInfoState.start_time:type_name -> google.protobuf.Timestamp
	86,  // 47: bragi.CsgoRoundInfoState.end_time:type_name -> google.protobuf.Timestamp
	1,   // 48: bragi.CsgoRoundInfoState.win_reason:type_name -> bragi.CsgoWinReason
	88,  // 49: bragi.CsgoRoundTimeState.time_remaining:type_name -> google.protobuf.Duration
	88,  // 50: bragi.CsgoRoundTimeState.map_time:type_name -> google.protobuf.Duration
	22,  // 51: bragi.CsgoBombState.carried:type_name -> bragi.CsgoBombCarriedState
	23,  // 52: bragi.CsgoBombState.dropped:type_name -> bragi.CsgoBombDroppedState
	24,  // 53: bragi.CsgoBombState.planting:type_name -> bragi.CsgoBombPlantingState
	25,  // 54: bragi.CsgoBombState.planted:type_name -> bragi.CsgoBombPlantedState
	26,  // 55: bragi.CsgoBombState.defusing:type_name -> bragi.CsgoBombDefusingState
	27,  // 56: bragi.CsgoBombState.defused:type_name -> bragi.CsgoBombDefusedState
	44,  // 57: bragi.CsgoBombCarriedState.position:type_name -> bragi.CsgoPosition
	44,  // 58: bragi.CsgoBombDroppedState.position:type_name -> bragi.CsgoPosition
	44,  // 59: bragi.CsgoBombPlantingState.position:type_name -> bragi.CsgoPosition
	88,  // 60: bragi.CsgoBombPlantingState.countdown:type_name -> google.protobuf.Duration
	44,  // 61: bragi.CsgoBombPlantedState.position:type_name -> bragi.CsgoPosition
	86,  // 62: bragi.CsgoBombPlantedState.planted_at:type_name -> google.protobuf.Timestamp
	44,  // 63: bragi.CsgoBombDefusingState.position:type_name -> bragi.CsgoPosition
	88,  // 64: bragi.CsgoBombDefusingState.countdown:type_name -> google.protobuf.Duration
	86,  // 65: bragi.CsgoBombDefusingState.defuse_started_at:type_name -> google.protobuf.Timestamp
	44,  // 66: bragi.CsgoBombDefusedState.position:type_name -> bragi.CsgoPosition
	86,  // 67: bragi.CsgoBombDefusedState.defused_at:type_name -> google.protobuf.Timestamp
	73,  // 68: bragi.CsgoTeamMapStatePartialUpdate.payload:type_name -> bragi.CsgoTeamMapStatePartialUpdate.Payload
	0,   // 69: bragi.CsgoTeamMapState.side:type_name -> bragi.CsgoSide
	74,  // 70: bragi.CsgoTeamMapState.player_map_states:type_name -> bragi.CsgoTeamMapState.PlayerMapStatesEntry
	75,  // 71: bragi.CsgoTeamCurrentRoundStatePartialUpdate.payload:type_name -> bragi.CsgoTeamCurrentRoundStatePartialUpdate.Payload
	76,  // 72: bragi.CsgoTeamCurrentRoundState.player_round_states:type_name -> bragi.CsgoTeamCurrentRoundState.PlayerRoundStatesEntry
	77,  // 73: bragi.CsgoPreviousTeamRoundState.players:type_name -> bragi.CsgoPreviousTeamRoundState.PlayersEntry
	78,  // 74: bragi.CsgoPlayerMapStatePartialUpdate.payload:type_name -> bragi.CsgoPlayerMapStatePartialUpdate.Payload
	35,  // 75: bragi.CsgoPlayerMapState.statistics:type_name -> bragi.CsgoPlayerMapStatisticsState
	42,  // 76: bragi.CsgoPlayerMapStatisticsState.statistics:type_name -> bragi.CsgoPlayerStatistics
	79,  // 77: bragi.CsgoPlayerCurrentRoundStatePartialUpdate.payload:type_name -> bragi.CsgoPlayerCurrentRoundStatePartialUpdate.Payload
	38,  // 78: bragi.CsgoPlayerCurrentRoundState.statistics:type_name -> bragi.CsgoPlayerCurrentRoundStatisticsState
	39,  // 79: bragi.CsgoPlayerCurrentRoundState.items:type_name -> bragi.CsgoPlayerItemsState
	41,  // 80: bragi.CsgoPlayerCurrentRoundState.position:type_name -> bragi.CsgoPlayerPositionState
	42,  // 81: bragi.CsgoPlayerCurrentRoundStatisticsState.statistics:type_name -> bragi.CsgoPlayerStatistics
	43,  // 82: bragi.CsgoPlayerItemsState.items:type_name -> bragi.CsgoPlayerItem
	42,  // 83: bragi.CsgoPlayerPreviousRoundState.statistics:type_name -> bragi.CsgoPlayerStatistics
	44,  // 84: bragi.CsgoPlayerPositionState.position:type_name -> bragi.CsgoPosition
	48,  // 85: bragi.CsgoEvent.bomb_defuse_started:type_name -> bragi.CsgoBombDefuseStarted
	49,  // 86: bragi.CsgoEvent.bomb_defused:type_name -> bragi.CsgoBombDefused
	50,  // 87: bragi.CsgoEvent.bomb_exploded:type_name -> bragi.CsgoBombExploded
	51,  // 88: bragi.CsgoEvent.bomb_planted:type_name -> bragi.CsgoBombPlanted
	52,  // 89: bragi.CsgoEvent.damage_dealt:type_name -> bragi.CsgoDamageDealt
	53,  // 90: bragi.CsgoEvent.freeze_time_ended:type_name -> bragi.CsgoFreezeTimeEnded
	54,  // 91: bragi.CsgoEvent.freeze_time_started:type_name -> bragi.CsgoFreezeTimeStarted
	55,  // 92: bragi.CsgoEvent.item_drop:type_name -> bragi.CsgoItemDrop
	56,  // 93: bragi.CsgoEvent.item_pick_up:type_name -> bragi.CsgoItemPickUp
	57,  // 94: bragi.CsgoEvent.item_purchase:type_name -> bragi.CsgoItemPurchase
	58,  // 95: bragi.CsgoEvent.item_throw:type_name -> bragi.CsgoItemThrow
	59,  // 96: bragi.CsgoEvent.kill:type_name -> bragi.CsgoKill
	60,  // 97: bragi.CsgoEvent.death:type_name -> bragi.CsgoDeath
	61,  // 98: bragi.CsgoEvent.map_end:type_name -> bragi.CsgoMapEnd
	62,  // 99: bragi.CsgoEvent.map_start:type_name -> bragi.CsgoMapStart
	63,  // 100: bragi.CsgoEvent.round_end:type_name -> bragi.CsgoRoundEnd
	64,  // 101: bragi.CsgoEvent.round_pause:type_name -> bragi.CsgoRoundPause
	65,  // 102: bragi.CsgoEvent.round_resume:type_name -> bragi.CsgoRoundResume
	66,  // 103: bragi.CsgoEvent.round_rollback:type_name -> bragi.CsgoRoundRollback
	67,  // 104: bragi.CsgoEvent.round_start:type_name -> bragi.CsgoRoundStart
	43,  // 105: bragi.CsgoPlayerItems.items:type_name -> bragi.CsgoPlayerItem
	88,  // 106: bragi.CsgoBombDefuseStarted.map_time:type_name -> google.protobuf.Duration
	88,  // 107: bragi.CsgoBombDefuseStarted.time_remaining:type_name -> google.protobuf.Duration
	88,  // 108: bragi.CsgoBombDefused.map_time:type_name -> google.protobuf.Duration
	88,  // 109: bragi.CsgoBombDefused.time_remaining:type_name -> google.protobuf.Duration
	88,  // 110: bragi.CsgoBombExploded.map_time:type_name -> google.protobuf.Duration
	88,  // 111: bragi.CsgoBombExploded.time_remaining:type_name -> google.protobuf.Duration
	88,  // 112: bragi.CsgoBombPlanted.map_time:type_name -> google.protobuf.Duration
	88,  // 113: bragi.CsgoBombPlanted.time_remaining:type_name -> google.protobuf.Duration
	88,  // 114: bragi.CsgoDamageDealt.map_time:type_name -> google.protobuf.Duration
	88,  // 115: bragi.CsgoDamageDealt.time_remaining:type_name -> google.protobuf.Duration
	44,  // 116: bragi.CsgoDamageDealt.position:type_name -> bragi.CsgoPosition
	44,  // 117: bragi.CsgoDamageDealt.target_position:type_name -> bragi.CsgoPosition
	88,  // 118: bragi.CsgoFreezeTimeEnded.map_time:type_name -> google.protobuf.Duration
	88,  // 119: bragi.CsgoFreezeTimeEnded.time_remaining:type_name -> google.protobuf.Duration
	80,  // 120: bragi.CsgoFreezeTimeEnded.player_balances:type_name -> bragi.CsgoFreezeTimeEnded.PlayerBalancesEntry
	81,  // 121: bragi.CsgoFreezeTimeEnded.player_inventories:type_name -> bragi.CsgoFreezeTimeEnded.PlayerInventoriesEntry
	88,  // 122: bragi.CsgoFreezeTimeStarted.map_time:type_name -> google.protobuf.Duration
	88,  // 123: bragi.CsgoFreezeTimeStarted.time_remaining:type_name -> google.protobuf.Duration
	82,  // 124: bragi.CsgoFreezeTimeStarted.player_balances:type_name -> bragi.CsgoFreezeTimeStarted.PlayerBalancesEntry
	83,  // 125: bragi.CsgoFreezeTimeStarted.teams_round_info:type_name -> bragi.CsgoFreezeTimeStarted.TeamsRoundInfoEntry
	88,  // 126: bragi.CsgoItemDrop.map_time:type_name -> google.protobuf.Duration
	88,  // 127: bragi.CsgoItemDrop.time_remaining:type_name -> google.protobuf.Duration
	44,  // 128: bragi.CsgoItemDrop.position:type_name -> bragi.CsgoPosition
	88,  // 129: bragi.CsgoItemPickUp.map_time:type_name -> google.protobuf.Duration
	88,  // 130: bragi.CsgoItemPickUp.time_remaining:type_name -> google.protobuf.Duration
	88,  // 131: bragi.CsgoItemPurchase.map_time:type_name -> google.protobuf.Duration
	88,  // 132: bragi.CsgoItemPurchase.time_remaining:type_name -> google.protobuf.Duration
	88,  // 133: bragi.CsgoItemThrow.map_time:type_name -> google.protobuf.Duration
	88,  // 134: bragi.CsgoItemThrow.time_remaining:type_name -> google.protobuf.Duration
	44,  // 135: bragi.CsgoItemThrow.position:type_name -> bragi.CsgoPosition
	88,  // 136: bragi.CsgoKill.map_time:type_name -> google.protobuf.Duration
	88,  // 137: bragi.CsgoKill.time_remaining:type_name -> google.protobuf.Duration
	44,  // 138: bragi.CsgoKill.position:type_name -> bragi.CsgoPosition
	88,  // 139: bragi.CsgoDeath.map_time:type_name -> google.protobuf.Duration
	88,  // 140: bragi.CsgoDeath.time_remaining:type_name -> google.protobuf.Duration
	44,  // 141: bragi.CsgoDeath.position:type_name -> bragi.CsgoPosition
	88,  // 142: bragi.CsgoDeath.respawn_time:type_name -> google.protobuf.Duration
	88,  // 143: bragi.CsgoMapEnd.map_time:type_name -> google.protobuf.Duration
	88,  // 144: bragi.CsgoMapEnd.time_remaining:type_name -> google.protobuf.Duration
	88,  // 145: bragi.CsgoMapStart.map_time:type_name -> google.protobuf.Duration
	88,  // 146: bragi.CsgoRoundEnd.map_time:type_name -> google.protobuf.Duration
	88,  // 147: bragi.CsgoRoundEnd.time_remaining:type_name -> google.protobuf.Duration
	1,   // 148: bragi.CsgoRoundEnd.win_reason:type_name -> bragi.CsgoWinReason
	84,  // 149: bragi.CsgoRoundEnd.player_balances:type_name -> bragi.CsgoRoundEnd.PlayerBalancesEntry
	85,  // 150: bragi.CsgoRoundEnd.player_inventories:type_name -> bragi.CsgoRoundEnd.PlayerInventoriesEntry
	88,  // 151: bragi.CsgoRoundPause.map_time:type_name -> google.protobuf.Duration
	88,  // 152: bragi.CsgoRoundPause.time_remaining:type_name -> google.protobuf.Duration
	88,  // 153: bragi.CsgoRoundResume.map_time:type_name -> google.protobuf.Duration
	88,  // 154: bragi.CsgoRoundResume.time_remaining:type_name -> google.protobuf.Duration
	88,  // 155: bragi.CsgoRoundStart.map_time:type_name -> google.protobuf.Duration
	88,  // 156: bragi.CsgoRoundStart.time_remaining:type_name -> google.protobuf.Duration
	7,   // 157: bragi.CsgoMatchMessage.Payload.match_state:type_name -> bragi.CsgoMatchState
	5,   // 158: bragi.CsgoMatchMessage.Payload.update:type_name -> bragi.CsgoMatchUpdate
	29,  // 159: bragi.CsgoCurrentMapState.TeamMapStatesEntry.value:type_name -> bragi.CsgoTeamMapState
	29,  // 160: bragi.CsgoPreviousMapState.TeamMapStatesEntry.value:type_name -> bragi.CsgoTeamMapState
	31,  // 161: bragi.CsgoCurrentRoundState.TeamStatesEntry.value:type_name -> bragi.CsgoTeamCurrentRoundState
	32,  // 162: bragi.CsgoPreviousRoundState.TeamStatesEntry.value:type_name -> bragi.CsgoPreviousTeamRoundState
	33,  // 163: bragi.CsgoTeamMapStatePartialUpdate.Payload.player_map_states_partial_update:type_name -> bragi.CsgoPlayerMapStatePartialUpdate
	34,  // 164: bragi.CsgoTeamMapState.PlayerMapStatesEntry.value:type_name -> bragi.CsgoPlayerMapState
	36,  // 165: bragi.CsgoTeamCurrentRoundStatePartialUpdate.Payload.player_round_states_partial_update:type_name -> bragi.CsgoPlayerCurrentRoundStatePartialUpdate
	37,  // 166: bragi.CsgoTeamCurrentRoundState.PlayerRoundStatesEntry.value:type_name -> bragi.CsgoPlayerCurrentRoundState
	40,  // 167: bragi.CsgoPreviousTeamRoundState.PlayersEntry.value:type_name -> bragi.CsgoPlayerPreviousRoundState
	35,  // 168: bragi.CsgoPlayerMapStatePartialUpdate.Payload.statistics:type_name -> bragi.CsgoPlayerMapStatisticsState
	38,  // 169: bragi.CsgoPlayerCurrentRoundStatePartialUpdate.Payload.statistics:type_name -> bragi.CsgoPlayerCurrentRoundStatisticsState
	39,  // 170: bragi.CsgoPlayerCurrentRoundStatePartialUpdate.Payload.items:type_name -> bragi.CsgoPlayerItemsState
	41,  // 171: bragi.CsgoPlayerCurrentRoundStatePartialUpdate.Payload.position:type_name -> bragi.CsgoPlayerPositionState
	46,  // 172: bragi.CsgoFreezeTimeEnded.PlayerBalancesEntry.value:type_name -> bragi.CsgoPlayerBalance
	47,  // 173: bragi.CsgoFreezeTimeEnded.PlayerInventoriesEntry.value:type_name -> bragi.CsgoPlayerItems
	46,  // 174: bragi.CsgoFreezeTimeStarted.PlayerBalancesEntry.value:type_name -> bragi.CsgoPlayerBalance
	0,   // 175: bragi.CsgoFreezeTimeStarted.TeamsRoundInfoEntry.value:type_name -> bragi.CsgoSide
	46,  // 176: bragi.CsgoRoundEnd.PlayerBalancesEntry.value:type_name -> bragi.CsgoPlayerBalance
	47,  // 177: bragi.CsgoRoundEnd.PlayerInventoriesEntry.value:type_name -> bragi.CsgoPlayerItems
	178, // [178:178] is the sub-list for method output_type
	178, // [178:178] is the sub-list for method input_type
	178, // [178:178] is the sub-list for extension type_name
	178, // [178:178] is the sub-list for extension extendee
	0,   // [0:178] is the sub-list for field type_name
}

func init() { file_bragi_csgo_proto_init() }
func file_bragi_csgo_proto_init() {
	if File_bragi_csgo_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_csgo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMatchStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMatchScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPreviousMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMapInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMapScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoCurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoCurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPreviousRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundTimeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombCarriedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombDroppedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombPlantingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombPlantedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombDefusingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombDefusedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamCurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamCurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPreviousTeamRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerCurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerCurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerCurrentRoundStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerItemsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerPreviousRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerPositionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombDefuseStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombDefused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombExploded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoBombPlanted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoDamageDealt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoFreezeTimeEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoFreezeTimeStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoItemDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoItemPickUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoItemPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoItemThrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoKill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoDeath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMapEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMapStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundPause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundRollback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMatchMessage_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamCurrentRoundStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_csgo_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerCurrentRoundStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_csgo_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CsgoMatchStatePartialUpdate_Score)(nil),
		(*CsgoMatchStatePartialUpdate_CurrentMapState)(nil),
		(*CsgoMatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil),
	}
	file_bragi_csgo_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CsgoCurrentMapStatePartialUpdate_Info)(nil),
		(*CsgoCurrentMapStatePartialUpdate_Score)(nil),
		(*CsgoCurrentMapStatePartialUpdate_CurrentRoundStatePartialUpdate)(nil),
		(*CsgoCurrentMapStatePartialUpdate_TeamMapStatesPartialUpdate)(nil),
	}
	file_bragi_csgo_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_bragi_csgo_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*CsgoCurrentRoundStatePartialUpdate_Info)(nil),
		(*CsgoCurrentRoundStatePartialUpdate_Score)(nil),
		(*CsgoCurrentRoundStatePartialUpdate_Time)(nil),
		(*CsgoCurrentRoundStatePartialUpdate_BombState)(nil),
		(*CsgoCurrentRoundStatePartialUpdate_TeamStatesPartialUpdate)(nil),
	}
	file_bragi_csgo_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_bragi_csgo_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*CsgoBombState_Carried)(nil),
		(*CsgoBombState_Dropped)(nil),
		(*CsgoBombState_Planting)(nil),
		(*CsgoBombState_Planted)(nil),
		(*CsgoBombState_Defusing)(nil),
		(*CsgoBombState_Defused)(nil),
	}
	file_bragi_csgo_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_bragi_csgo_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*CsgoEvent_BombDefuseStarted)(nil),
		(*CsgoEvent_BombDefused)(nil),
		(*CsgoEvent_BombExploded)(nil),
		(*CsgoEvent_BombPlanted)(nil),
		(*CsgoEvent_DamageDealt)(nil),
		(*CsgoEvent_FreezeTimeEnded)(nil),
		(*CsgoEvent_FreezeTimeStarted)(nil),
		(*CsgoEvent_ItemDrop)(nil),
		(*CsgoEvent_ItemPickUp)(nil),
		(*CsgoEvent_ItemPurchase)(nil),
		(*CsgoEvent_ItemThrow)(nil),
		(*CsgoEvent_Kill)(nil),
		(*CsgoEvent_Death)(nil),
		(*CsgoEvent_MapEnd)(nil),
		(*CsgoEvent_MapStart)(nil),
		(*CsgoEvent_RoundEnd)(nil),
		(*CsgoEvent_RoundPause)(nil),
		(*CsgoEvent_RoundResume)(nil),
		(*CsgoEvent_RoundRollback)(nil),
		(*CsgoEvent_RoundStart)(nil),
	}
	file_bragi_csgo_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*CsgoMatchMessage_Payload_MatchState)(nil),
		(*CsgoMatchMessage_Payload_Update)(nil),
	}
	file_bragi_csgo_proto_msgTypes[69].OneofWrappers = []interface{}{
		(*CsgoTeamMapStatePartialUpdate_Payload_PlayerMapStatesPartialUpdate)(nil),
	}
	file_bragi_csgo_proto_msgTypes[71].OneofWrappers = []interface{}{
		(*CsgoTeamCurrentRoundStatePartialUpdate_Payload_PlayerRoundStatesPartialUpdate)(nil),
	}
	file_bragi_csgo_proto_msgTypes[74].OneofWrappers = []interface{}{
		(*CsgoPlayerMapStatePartialUpdate_Payload_Statistics)(nil),
	}
	file_bragi_csgo_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Statistics)(nil),
		(*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Items)(nil),
		(*CsgoPlayerCurrentRoundStatePartialUpdate_Payload_Position)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_csgo_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_csgo_proto_goTypes,
		DependencyIndexes: file_bragi_csgo_proto_depIdxs,
		EnumInfos:         file_bragi_csgo_proto_enumTypes,
		MessageInfos:      file_bragi_csgo_proto_msgTypes,
	}.Build()
	File_bragi_csgo_proto = out.File
	file_bragi_csgo_proto_rawDesc = nil
	file_bragi_csgo_proto_goTypes = nil
	file_bragi_csgo_proto_depIdxs = nil
}
