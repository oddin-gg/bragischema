// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: bragi/data_stream/data_feed.proto

package data_stream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControlAnnouncement_ControlAnnouncementType int32

const (
	ControlAnnouncement_CONTROL_ANNOUNCEMENT_TYPE_UNSPECIFIED ControlAnnouncement_ControlAnnouncementType = 0
)

// Enum value maps for ControlAnnouncement_ControlAnnouncementType.
var (
	ControlAnnouncement_ControlAnnouncementType_name = map[int32]string{
		0: "CONTROL_ANNOUNCEMENT_TYPE_UNSPECIFIED",
	}
	ControlAnnouncement_ControlAnnouncementType_value = map[string]int32{
		"CONTROL_ANNOUNCEMENT_TYPE_UNSPECIFIED": 0,
	}
)

func (x ControlAnnouncement_ControlAnnouncementType) Enum() *ControlAnnouncement_ControlAnnouncementType {
	p := new(ControlAnnouncement_ControlAnnouncementType)
	*p = x
	return p
}

func (x ControlAnnouncement_ControlAnnouncementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlAnnouncement_ControlAnnouncementType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_data_stream_data_feed_proto_enumTypes[0].Descriptor()
}

func (ControlAnnouncement_ControlAnnouncementType) Type() protoreflect.EnumType {
	return &file_bragi_data_stream_data_feed_proto_enumTypes[0]
}

func (x ControlAnnouncement_ControlAnnouncementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlAnnouncement_ControlAnnouncementType.Descriptor instead.
func (ControlAnnouncement_ControlAnnouncementType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{7, 0}
}

type ControlErrorAnnouncement_ControlErrorAnnouncementType int32

const (
	ControlErrorAnnouncement_CONTROL_ERROR_ANNOUNCEMENT_TYPE_UNSPECIFIED ControlErrorAnnouncement_ControlErrorAnnouncementType = 0
)

// Enum value maps for ControlErrorAnnouncement_ControlErrorAnnouncementType.
var (
	ControlErrorAnnouncement_ControlErrorAnnouncementType_name = map[int32]string{
		0: "CONTROL_ERROR_ANNOUNCEMENT_TYPE_UNSPECIFIED",
	}
	ControlErrorAnnouncement_ControlErrorAnnouncementType_value = map[string]int32{
		"CONTROL_ERROR_ANNOUNCEMENT_TYPE_UNSPECIFIED": 0,
	}
)

func (x ControlErrorAnnouncement_ControlErrorAnnouncementType) Enum() *ControlErrorAnnouncement_ControlErrorAnnouncementType {
	p := new(ControlErrorAnnouncement_ControlErrorAnnouncementType)
	*p = x
	return p
}

func (x ControlErrorAnnouncement_ControlErrorAnnouncementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlErrorAnnouncement_ControlErrorAnnouncementType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_data_stream_data_feed_proto_enumTypes[1].Descriptor()
}

func (ControlErrorAnnouncement_ControlErrorAnnouncementType) Type() protoreflect.EnumType {
	return &file_bragi_data_stream_data_feed_proto_enumTypes[1]
}

func (x ControlErrorAnnouncement_ControlErrorAnnouncementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlErrorAnnouncement_ControlErrorAnnouncementType.Descriptor instead.
func (ControlErrorAnnouncement_ControlErrorAnnouncementType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{8, 0}
}

type LiveDataFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represent timestamp since matches states should be received. If value is null then currently played matches are
	// received. If "after" property is defined, then matches which were updated after the "after" timestamp are received.
	After *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=after,proto3,oneof" json:"after,omitempty"`
}

func (x *LiveDataFeedRequest) Reset() {
	*x = LiveDataFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDataFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDataFeedRequest) ProtoMessage() {}

func (x *LiveDataFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDataFeedRequest.ProtoReflect.Descriptor instead.
func (*LiveDataFeedRequest) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{0}
}

func (x *LiveDataFeedRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

type LiveDataFeedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*LiveDataFeedMessage_Keepalive
	//	*LiveDataFeedMessage_Match
	Message isLiveDataFeedMessage_Message `protobuf_oneof:"message"`
}

func (x *LiveDataFeedMessage) Reset() {
	*x = LiveDataFeedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveDataFeedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveDataFeedMessage) ProtoMessage() {}

func (x *LiveDataFeedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveDataFeedMessage.ProtoReflect.Descriptor instead.
func (*LiveDataFeedMessage) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{1}
}

func (m *LiveDataFeedMessage) GetMessage() isLiveDataFeedMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *LiveDataFeedMessage) GetKeepalive() *KeepAlive {
	if x, ok := x.GetMessage().(*LiveDataFeedMessage_Keepalive); ok {
		return x.Keepalive
	}
	return nil
}

func (x *LiveDataFeedMessage) GetMatch() *MatchMessage {
	if x, ok := x.GetMessage().(*LiveDataFeedMessage_Match); ok {
		return x.Match
	}
	return nil
}

type isLiveDataFeedMessage_Message interface {
	isLiveDataFeedMessage_Message()
}

type LiveDataFeedMessage_Keepalive struct {
	Keepalive *KeepAlive `protobuf:"bytes,1,opt,name=keepalive,proto3,oneof"`
}

type LiveDataFeedMessage_Match struct {
	Match *MatchMessage `protobuf:"bytes,2,opt,name=match,proto3,oneof"`
}

func (*LiveDataFeedMessage_Keepalive) isLiveDataFeedMessage_Message() {}

func (*LiveDataFeedMessage_Match) isLiveDataFeedMessage_Message() {}

// Heartbeat message which is sent periodically.
type KeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *KeepAlive) Reset() {
	*x = KeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAlive) ProtoMessage() {}

func (x *KeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAlive.ProtoReflect.Descriptor instead.
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{2}
}

func (x *KeepAlive) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// At the beginning, when the stream is established, an initial MatchMessage with a MatchSnapshot payload is sent (just only once
// during the stream lifecycle, to recover MatchSnapshot you need to reconnect to server). Cache this MatchSnapshot into memory.
// Then only AnnouncementUpdate or game update (eg. CsgoMatchMessage) can be received. Those updates are supposed to be applied
// on cached MatchSnapshot. If AnnouncementUpdate is received then append its "payload" property value to the array of "announcements"
// in cached MatchSnapshot. If update (e.g. CsgoMatchMessage) payload is received then apply this update on "match_state"
// property in cached MatchSnapshot. For both update cases do not forget also to update "sequence" and "timestamp" properties
// in the cached MatchSnapshot with the values from the received MatchMessage.
type MatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *MatchMessage_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MatchMessage) Reset() {
	*x = MatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMessage) ProtoMessage() {}

func (x *MatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMessage.ProtoReflect.Descriptor instead.
func (*MatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{3}
}

func (x *MatchMessage) GetPayload() *MatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Represent whole set of data about particular match. This entity is received only at the beginning of stream. Cache MatchSnapshot
// in memory and then update it with received updates. If AnnouncementUpdate is received then append its payload to property
// announcements. If game update is received (e.g. CsgoMatchMessage) then apply this update on property match_state.
// For both update cases do not forget also to update "sequence" and "timestamp" properties with corresponding values from MatchMessage.
type MatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn      string                        `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence      uint64                        `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp     *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Announcements []*Announcement               `protobuf:"bytes,4,rep,name=announcements,proto3" json:"announcements,omitempty"`
	MatchState    *MatchSnapshot_GameMatchState `protobuf:"bytes,5,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
}

func (x *MatchSnapshot) Reset() {
	*x = MatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshot) ProtoMessage() {}

func (x *MatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshot.ProtoReflect.Descriptor instead.
func (*MatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{4}
}

func (x *MatchSnapshot) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *MatchSnapshot) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *MatchSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MatchSnapshot) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *MatchSnapshot) GetMatchState() *MatchSnapshot_GameMatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

// Append announcement's payload to property announcements array in MatchSnapshot. Each AnnouncementUpdate carries
// properties "sequence", "timestamp". Replace cached properties "sequence" and "timestamp" in cached
// MatchSnapshot with values of "sequence", "timestamp" from AnnouncementUpdate after you successfully applied updates.
type AnnouncementUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn  string                 `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence  uint64                 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload   *Announcement          `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *AnnouncementUpdate) Reset() {
	*x = AnnouncementUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnouncementUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnouncementUpdate) ProtoMessage() {}

func (x *AnnouncementUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnouncementUpdate.ProtoReflect.Descriptor instead.
func (*AnnouncementUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{5}
}

func (x *AnnouncementUpdate) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *AnnouncementUpdate) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AnnouncementUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AnnouncementUpdate) GetPayload() *Announcement {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Announcement informs consumer about operational situation during match lifetime. Eg. match was postponed,there
// is a server issue etc.
type Announcement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Payload   *Announcement_Payload  `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Announcement) Reset() {
	*x = Announcement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Announcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Announcement) ProtoMessage() {}

func (x *Announcement) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Announcement.ProtoReflect.Descriptor instead.
func (*Announcement) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{6}
}

func (x *Announcement) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Announcement) GetPayload() *Announcement_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ControlAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ControlAnnouncement_ControlAnnouncementType `protobuf:"varint,1,opt,name=type,proto3,enum=bragi.data_stream.ControlAnnouncement_ControlAnnouncementType" json:"type,omitempty"`
	Message *string                                     `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *ControlAnnouncement) Reset() {
	*x = ControlAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlAnnouncement) ProtoMessage() {}

func (x *ControlAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlAnnouncement.ProtoReflect.Descriptor instead.
func (*ControlAnnouncement) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{7}
}

func (x *ControlAnnouncement) GetType() ControlAnnouncement_ControlAnnouncementType {
	if x != nil {
		return x.Type
	}
	return ControlAnnouncement_CONTROL_ANNOUNCEMENT_TYPE_UNSPECIFIED
}

func (x *ControlAnnouncement) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type ControlErrorAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ControlErrorAnnouncement_ControlErrorAnnouncementType `protobuf:"varint,1,opt,name=type,proto3,enum=bragi.data_stream.ControlErrorAnnouncement_ControlErrorAnnouncementType" json:"type,omitempty"`
	Message *string                                               `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *ControlErrorAnnouncement) Reset() {
	*x = ControlErrorAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlErrorAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlErrorAnnouncement) ProtoMessage() {}

func (x *ControlErrorAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlErrorAnnouncement.ProtoReflect.Descriptor instead.
func (*ControlErrorAnnouncement) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{8}
}

func (x *ControlErrorAnnouncement) GetType() ControlErrorAnnouncement_ControlErrorAnnouncementType {
	if x != nil {
		return x.Type
	}
	return ControlErrorAnnouncement_CONTROL_ERROR_ANNOUNCEMENT_TYPE_UNSPECIFIED
}

func (x *ControlErrorAnnouncement) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type MatchMessage_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*MatchMessage_Payload_Snapshot
	//	*MatchMessage_Payload_Announcement
	//	*MatchMessage_Payload_Csgo
	Payload isMatchMessage_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *MatchMessage_Payload) Reset() {
	*x = MatchMessage_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMessage_Payload) ProtoMessage() {}

func (x *MatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*MatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{3, 0}
}

func (m *MatchMessage_Payload) GetPayload() isMatchMessage_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *MatchMessage_Payload) GetSnapshot() *MatchSnapshot {
	if x, ok := x.GetPayload().(*MatchMessage_Payload_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *MatchMessage_Payload) GetAnnouncement() *AnnouncementUpdate {
	if x, ok := x.GetPayload().(*MatchMessage_Payload_Announcement); ok {
		return x.Announcement
	}
	return nil
}

func (x *MatchMessage_Payload) GetCsgo() *CsgoMatchMessage {
	if x, ok := x.GetPayload().(*MatchMessage_Payload_Csgo); ok {
		return x.Csgo
	}
	return nil
}

type isMatchMessage_Payload_Payload interface {
	isMatchMessage_Payload_Payload()
}

type MatchMessage_Payload_Snapshot struct {
	// Cache whole entity in client memory.
	Snapshot *MatchSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type MatchMessage_Payload_Announcement struct {
	// Append announcement's payload to property announcements array in MatchSnapshot.
	Announcement *AnnouncementUpdate `protobuf:"bytes,2,opt,name=announcement,proto3,oneof"`
}

type MatchMessage_Payload_Csgo struct {
	// Message which wraps updates which should be applied on "match_state" property in MatchSnapshot.
	Csgo *CsgoMatchMessage `protobuf:"bytes,3,opt,name=csgo,proto3,oneof"`
}

func (*MatchMessage_Payload_Snapshot) isMatchMessage_Payload_Payload() {}

func (*MatchMessage_Payload_Announcement) isMatchMessage_Payload_Payload() {}

func (*MatchMessage_Payload_Csgo) isMatchMessage_Payload_Payload() {}

type MatchSnapshot_GameMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to State:
	//	*MatchSnapshot_GameMatchState_Csgo
	State isMatchSnapshot_GameMatchState_State `protobuf_oneof:"state"`
}

func (x *MatchSnapshot_GameMatchState) Reset() {
	*x = MatchSnapshot_GameMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshot_GameMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshot_GameMatchState) ProtoMessage() {}

func (x *MatchSnapshot_GameMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshot_GameMatchState.ProtoReflect.Descriptor instead.
func (*MatchSnapshot_GameMatchState) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{4, 0}
}

func (m *MatchSnapshot_GameMatchState) GetState() isMatchSnapshot_GameMatchState_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *MatchSnapshot_GameMatchState) GetCsgo() *CsgoMatchState {
	if x, ok := x.GetState().(*MatchSnapshot_GameMatchState_Csgo); ok {
		return x.Csgo
	}
	return nil
}

type isMatchSnapshot_GameMatchState_State interface {
	isMatchSnapshot_GameMatchState_State()
}

type MatchSnapshot_GameMatchState_Csgo struct {
	Csgo *CsgoMatchState `protobuf:"bytes,1,opt,name=csgo,proto3,oneof"` // LolMatchState lol = 2;
}

func (*MatchSnapshot_GameMatchState_Csgo) isMatchSnapshot_GameMatchState_State() {}

type Announcement_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Announcement_Payload_Control
	//	*Announcement_Payload_Error
	Payload isAnnouncement_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *Announcement_Payload) Reset() {
	*x = Announcement_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_data_stream_data_feed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Announcement_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Announcement_Payload) ProtoMessage() {}

func (x *Announcement_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_data_stream_data_feed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Announcement_Payload.ProtoReflect.Descriptor instead.
func (*Announcement_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_data_stream_data_feed_proto_rawDescGZIP(), []int{6, 0}
}

func (m *Announcement_Payload) GetPayload() isAnnouncement_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Announcement_Payload) GetControl() *ControlAnnouncement {
	if x, ok := x.GetPayload().(*Announcement_Payload_Control); ok {
		return x.Control
	}
	return nil
}

func (x *Announcement_Payload) GetError() *ControlErrorAnnouncement {
	if x, ok := x.GetPayload().(*Announcement_Payload_Error); ok {
		return x.Error
	}
	return nil
}

type isAnnouncement_Payload_Payload interface {
	isAnnouncement_Payload_Payload()
}

type Announcement_Payload_Control struct {
	Control *ControlAnnouncement `protobuf:"bytes,1,opt,name=control,proto3,oneof"`
}

type Announcement_Payload_Error struct {
	Error *ControlErrorAnnouncement `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*Announcement_Payload_Control) isAnnouncement_Payload_Payload() {}

func (*Announcement_Payload_Error) isAnnouncement_Payload_Payload() {}

var File_bragi_data_stream_data_feed_proto protoreflect.FileDescriptor

var file_bragi_data_stream_data_feed_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x73, 0x67, 0x6f, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x56, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x45, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb0, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xdc, 0x01, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x73, 0x67, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x73, 0x67, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x45, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x52, 0x0a, 0x0e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x63,
	0x73, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x73, 0x67, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc2, 0x01,
	0x0a, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x9d, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x43, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xda, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0x44, 0x0a, 0x17,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf4,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0x4f, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e,
	0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x39, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64,
	0x69, 0x6e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5a, 0x1a, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bragi_data_stream_data_feed_proto_rawDescOnce sync.Once
	file_bragi_data_stream_data_feed_proto_rawDescData = file_bragi_data_stream_data_feed_proto_rawDesc
)

func file_bragi_data_stream_data_feed_proto_rawDescGZIP() []byte {
	file_bragi_data_stream_data_feed_proto_rawDescOnce.Do(func() {
		file_bragi_data_stream_data_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_data_stream_data_feed_proto_rawDescData)
	})
	return file_bragi_data_stream_data_feed_proto_rawDescData
}

var file_bragi_data_stream_data_feed_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bragi_data_stream_data_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_bragi_data_stream_data_feed_proto_goTypes = []interface{}{
	(ControlAnnouncement_ControlAnnouncementType)(0),           // 0: bragi.data_stream.ControlAnnouncement.ControlAnnouncementType
	(ControlErrorAnnouncement_ControlErrorAnnouncementType)(0), // 1: bragi.data_stream.ControlErrorAnnouncement.ControlErrorAnnouncementType
	(*LiveDataFeedRequest)(nil),                                // 2: bragi.data_stream.LiveDataFeedRequest
	(*LiveDataFeedMessage)(nil),                                // 3: bragi.data_stream.LiveDataFeedMessage
	(*KeepAlive)(nil),                                          // 4: bragi.data_stream.KeepAlive
	(*MatchMessage)(nil),                                       // 5: bragi.data_stream.MatchMessage
	(*MatchSnapshot)(nil),                                      // 6: bragi.data_stream.MatchSnapshot
	(*AnnouncementUpdate)(nil),                                 // 7: bragi.data_stream.AnnouncementUpdate
	(*Announcement)(nil),                                       // 8: bragi.data_stream.Announcement
	(*ControlAnnouncement)(nil),                                // 9: bragi.data_stream.ControlAnnouncement
	(*ControlErrorAnnouncement)(nil),                           // 10: bragi.data_stream.ControlErrorAnnouncement
	(*MatchMessage_Payload)(nil),                               // 11: bragi.data_stream.MatchMessage.Payload
	(*MatchSnapshot_GameMatchState)(nil),                       // 12: bragi.data_stream.MatchSnapshot.GameMatchState
	(*Announcement_Payload)(nil),                               // 13: bragi.data_stream.Announcement.Payload
	(*timestamppb.Timestamp)(nil),                              // 14: google.protobuf.Timestamp
	(*CsgoMatchMessage)(nil),                                   // 15: bragi.data_stream.CsgoMatchMessage
	(*CsgoMatchState)(nil),                                     // 16: bragi.data_stream.CsgoMatchState
}
var file_bragi_data_stream_data_feed_proto_depIdxs = []int32{
	14, // 0: bragi.data_stream.LiveDataFeedRequest.after:type_name -> google.protobuf.Timestamp
	4,  // 1: bragi.data_stream.LiveDataFeedMessage.keepalive:type_name -> bragi.data_stream.KeepAlive
	5,  // 2: bragi.data_stream.LiveDataFeedMessage.match:type_name -> bragi.data_stream.MatchMessage
	14, // 3: bragi.data_stream.KeepAlive.timestamp:type_name -> google.protobuf.Timestamp
	11, // 4: bragi.data_stream.MatchMessage.payload:type_name -> bragi.data_stream.MatchMessage.Payload
	14, // 5: bragi.data_stream.MatchSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 6: bragi.data_stream.MatchSnapshot.announcements:type_name -> bragi.data_stream.Announcement
	12, // 7: bragi.data_stream.MatchSnapshot.match_state:type_name -> bragi.data_stream.MatchSnapshot.GameMatchState
	14, // 8: bragi.data_stream.AnnouncementUpdate.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 9: bragi.data_stream.AnnouncementUpdate.payload:type_name -> bragi.data_stream.Announcement
	14, // 10: bragi.data_stream.Announcement.created_at:type_name -> google.protobuf.Timestamp
	13, // 11: bragi.data_stream.Announcement.payload:type_name -> bragi.data_stream.Announcement.Payload
	0,  // 12: bragi.data_stream.ControlAnnouncement.type:type_name -> bragi.data_stream.ControlAnnouncement.ControlAnnouncementType
	1,  // 13: bragi.data_stream.ControlErrorAnnouncement.type:type_name -> bragi.data_stream.ControlErrorAnnouncement.ControlErrorAnnouncementType
	6,  // 14: bragi.data_stream.MatchMessage.Payload.snapshot:type_name -> bragi.data_stream.MatchSnapshot
	7,  // 15: bragi.data_stream.MatchMessage.Payload.announcement:type_name -> bragi.data_stream.AnnouncementUpdate
	15, // 16: bragi.data_stream.MatchMessage.Payload.csgo:type_name -> bragi.data_stream.CsgoMatchMessage
	16, // 17: bragi.data_stream.MatchSnapshot.GameMatchState.csgo:type_name -> bragi.data_stream.CsgoMatchState
	9,  // 18: bragi.data_stream.Announcement.Payload.control:type_name -> bragi.data_stream.ControlAnnouncement
	10, // 19: bragi.data_stream.Announcement.Payload.error:type_name -> bragi.data_stream.ControlErrorAnnouncement
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_bragi_data_stream_data_feed_proto_init() }
func file_bragi_data_stream_data_feed_proto_init() {
	if File_bragi_data_stream_data_feed_proto != nil {
		return
	}
	file_bragi_data_stream_csgo_data_feed_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_data_stream_data_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDataFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveDataFeedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnouncementUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Announcement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlErrorAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMessage_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshot_GameMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_data_stream_data_feed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Announcement_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_data_stream_data_feed_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_bragi_data_stream_data_feed_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*LiveDataFeedMessage_Keepalive)(nil),
		(*LiveDataFeedMessage_Match)(nil),
	}
	file_bragi_data_stream_data_feed_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_bragi_data_stream_data_feed_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_bragi_data_stream_data_feed_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*MatchMessage_Payload_Snapshot)(nil),
		(*MatchMessage_Payload_Announcement)(nil),
		(*MatchMessage_Payload_Csgo)(nil),
	}
	file_bragi_data_stream_data_feed_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*MatchSnapshot_GameMatchState_Csgo)(nil),
	}
	file_bragi_data_stream_data_feed_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Announcement_Payload_Control)(nil),
		(*Announcement_Payload_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_data_stream_data_feed_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_data_stream_data_feed_proto_goTypes,
		DependencyIndexes: file_bragi_data_stream_data_feed_proto_depIdxs,
		EnumInfos:         file_bragi_data_stream_data_feed_proto_enumTypes,
		MessageInfos:      file_bragi_data_stream_data_feed_proto_msgTypes,
	}.Build()
	File_bragi_data_stream_data_feed_proto = out.File
	file_bragi_data_stream_data_feed_proto_rawDesc = nil
	file_bragi_data_stream_data_feed_proto_goTypes = nil
	file_bragi_data_stream_data_feed_proto_depIdxs = nil
}
