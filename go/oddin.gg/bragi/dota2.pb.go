// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: bragi/dota2.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Dota2Faction int32

const (
	Dota2Faction_DOTA2_FACTION_UNSPECIFIED Dota2Faction = 0
	Dota2Faction_DOTA2_FACTION_RADIANT     Dota2Faction = 1
	Dota2Faction_DOTA2_FACTION_DIRE        Dota2Faction = 2
)

// Enum value maps for Dota2Faction.
var (
	Dota2Faction_name = map[int32]string{
		0: "DOTA2_FACTION_UNSPECIFIED",
		1: "DOTA2_FACTION_RADIANT",
		2: "DOTA2_FACTION_DIRE",
	}
	Dota2Faction_value = map[string]int32{
		"DOTA2_FACTION_UNSPECIFIED": 0,
		"DOTA2_FACTION_RADIANT":     1,
		"DOTA2_FACTION_DIRE":        2,
	}
)

func (x Dota2Faction) Enum() *Dota2Faction {
	p := new(Dota2Faction)
	*p = x
	return p
}

func (x Dota2Faction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dota2Faction) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_dota2_proto_enumTypes[0].Descriptor()
}

func (Dota2Faction) Type() protoreflect.EnumType {
	return &file_bragi_dota2_proto_enumTypes[0]
}

func (x Dota2Faction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dota2Faction.Descriptor instead.
func (Dota2Faction) EnumDescriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{0}
}

type Dota2Lane int32

const (
	Dota2Lane_DOTA2_LANE_UNSPECIFIED Dota2Lane = 0
	Dota2Lane_DOTA2_LANE_TOP         Dota2Lane = 1
	Dota2Lane_DOTA2_LANE_MID         Dota2Lane = 2
	Dota2Lane_DOTA2_LANE_BOT         Dota2Lane = 3
)

// Enum value maps for Dota2Lane.
var (
	Dota2Lane_name = map[int32]string{
		0: "DOTA2_LANE_UNSPECIFIED",
		1: "DOTA2_LANE_TOP",
		2: "DOTA2_LANE_MID",
		3: "DOTA2_LANE_BOT",
	}
	Dota2Lane_value = map[string]int32{
		"DOTA2_LANE_UNSPECIFIED": 0,
		"DOTA2_LANE_TOP":         1,
		"DOTA2_LANE_MID":         2,
		"DOTA2_LANE_BOT":         3,
	}
)

func (x Dota2Lane) Enum() *Dota2Lane {
	p := new(Dota2Lane)
	*p = x
	return p
}

func (x Dota2Lane) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dota2Lane) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_dota2_proto_enumTypes[1].Descriptor()
}

func (Dota2Lane) Type() protoreflect.EnumType {
	return &file_bragi_dota2_proto_enumTypes[1]
}

func (x Dota2Lane) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dota2Lane.Descriptor instead.
func (Dota2Lane) EnumDescriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{1}
}

type Dota2TowerTier int32

const (
	Dota2TowerTier_DOTA2_TOWER_TIER_UNSPECIFIED Dota2TowerTier = 0
	Dota2TowerTier_DOTA2_TOWER_TIER_1           Dota2TowerTier = 1
	Dota2TowerTier_DOTA2_TOWER_TIER_2           Dota2TowerTier = 2
	Dota2TowerTier_DOTA2_TOWER_TIER_3           Dota2TowerTier = 3
	Dota2TowerTier_DOTA2_TOWER_TIER_4           Dota2TowerTier = 4
)

// Enum value maps for Dota2TowerTier.
var (
	Dota2TowerTier_name = map[int32]string{
		0: "DOTA2_TOWER_TIER_UNSPECIFIED",
		1: "DOTA2_TOWER_TIER_1",
		2: "DOTA2_TOWER_TIER_2",
		3: "DOTA2_TOWER_TIER_3",
		4: "DOTA2_TOWER_TIER_4",
	}
	Dota2TowerTier_value = map[string]int32{
		"DOTA2_TOWER_TIER_UNSPECIFIED": 0,
		"DOTA2_TOWER_TIER_1":           1,
		"DOTA2_TOWER_TIER_2":           2,
		"DOTA2_TOWER_TIER_3":           3,
		"DOTA2_TOWER_TIER_4":           4,
	}
)

func (x Dota2TowerTier) Enum() *Dota2TowerTier {
	p := new(Dota2TowerTier)
	*p = x
	return p
}

func (x Dota2TowerTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dota2TowerTier) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_dota2_proto_enumTypes[2].Descriptor()
}

func (Dota2TowerTier) Type() protoreflect.EnumType {
	return &file_bragi_dota2_proto_enumTypes[2]
}

func (x Dota2TowerTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dota2TowerTier.Descriptor instead.
func (Dota2TowerTier) EnumDescriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{2}
}

type Dota2BarrackType int32

const (
	Dota2BarrackType_DOTA2_BARRACK_TYPE_UNSPECIFIED Dota2BarrackType = 0
	Dota2BarrackType_DOTA2_BARRACK_TYPE_RANGED      Dota2BarrackType = 1
	Dota2BarrackType_DOTA2_BARRACK_TYPE_MELEE       Dota2BarrackType = 2
)

// Enum value maps for Dota2BarrackType.
var (
	Dota2BarrackType_name = map[int32]string{
		0: "DOTA2_BARRACK_TYPE_UNSPECIFIED",
		1: "DOTA2_BARRACK_TYPE_RANGED",
		2: "DOTA2_BARRACK_TYPE_MELEE",
	}
	Dota2BarrackType_value = map[string]int32{
		"DOTA2_BARRACK_TYPE_UNSPECIFIED": 0,
		"DOTA2_BARRACK_TYPE_RANGED":      1,
		"DOTA2_BARRACK_TYPE_MELEE":       2,
	}
)

func (x Dota2BarrackType) Enum() *Dota2BarrackType {
	p := new(Dota2BarrackType)
	*p = x
	return p
}

func (x Dota2BarrackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dota2BarrackType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_dota2_proto_enumTypes[3].Descriptor()
}

func (Dota2BarrackType) Type() protoreflect.EnumType {
	return &file_bragi_dota2_proto_enumTypes[3]
}

func (x Dota2BarrackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dota2BarrackType.Descriptor instead.
func (Dota2BarrackType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{3}
}

type Dota2MatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn   string                     `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence   uint64                     `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp  *timestamppb.Timestamp     `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataStatus DataStatus                 `protobuf:"varint,5,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	Payload    *Dota2MatchMessage_Payload `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Dota2MatchMessage) Reset() {
	*x = Dota2MatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchMessage) ProtoMessage() {}

func (x *Dota2MatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchMessage.ProtoReflect.Descriptor instead.
func (*Dota2MatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{0}
}

func (x *Dota2MatchMessage) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *Dota2MatchMessage) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Dota2MatchMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Dota2MatchMessage) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *Dota2MatchMessage) GetPayload() *Dota2MatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Dota2MatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn      string                 `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence      uint64                 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataStatus    DataStatus             `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	Announcements []*Announcement        `protobuf:"bytes,6,rep,name=announcements,proto3" json:"announcements,omitempty"`
	MatchState    *Dota2MatchState       `protobuf:"bytes,7,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
}

func (x *Dota2MatchSnapshot) Reset() {
	*x = Dota2MatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchSnapshot) ProtoMessage() {}

func (x *Dota2MatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchSnapshot.ProtoReflect.Descriptor instead.
func (*Dota2MatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{1}
}

func (x *Dota2MatchSnapshot) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *Dota2MatchSnapshot) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Dota2MatchSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Dota2MatchSnapshot) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *Dota2MatchSnapshot) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *Dota2MatchSnapshot) GetMatchState() *Dota2MatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

type Dota2MatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *Dota2MatchUpdate_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Dota2MatchUpdate) Reset() {
	*x = Dota2MatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchUpdate) ProtoMessage() {}

func (x *Dota2MatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchUpdate.ProtoReflect.Descriptor instead.
func (*Dota2MatchUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{2}
}

func (x *Dota2MatchUpdate) GetPayload() *Dota2MatchUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Dota2MatchStatePartialUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*Dota2MatchStatePartialUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *Dota2MatchStatePartialUpdates) Reset() {
	*x = Dota2MatchStatePartialUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchStatePartialUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchStatePartialUpdates) ProtoMessage() {}

func (x *Dota2MatchStatePartialUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchStatePartialUpdates.ProtoReflect.Descriptor instead.
func (*Dota2MatchStatePartialUpdates) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{3}
}

func (x *Dota2MatchStatePartialUpdates) GetUpdates() []*Dota2MatchStatePartialUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type Dota2MatchStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*Dota2MatchStatePartialUpdate_Score
	//	*Dota2MatchStatePartialUpdate_CurrentMapState
	//	*Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate
	Update isDota2MatchStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *Dota2MatchStatePartialUpdate) Reset() {
	*x = Dota2MatchStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchStatePartialUpdate) ProtoMessage() {}

func (x *Dota2MatchStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*Dota2MatchStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{4}
}

func (m *Dota2MatchStatePartialUpdate) GetUpdate() isDota2MatchStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *Dota2MatchStatePartialUpdate) GetScore() *Dota2MatchScoreState {
	if x, ok := x.GetUpdate().(*Dota2MatchStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *Dota2MatchStatePartialUpdate) GetCurrentMapState() *Dota2CurrentMapState {
	if x, ok := x.GetUpdate().(*Dota2MatchStatePartialUpdate_CurrentMapState); ok {
		return x.CurrentMapState
	}
	return nil
}

func (x *Dota2MatchStatePartialUpdate) GetCurrentMapStatePartialUpdate() *Dota2CurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate); ok {
		return x.CurrentMapStatePartialUpdate
	}
	return nil
}

type isDota2MatchStatePartialUpdate_Update interface {
	isDota2MatchStatePartialUpdate_Update()
}

type Dota2MatchStatePartialUpdate_Score struct {
	// Replaces "score" property in Dota2MatchState.
	Score *Dota2MatchScoreState `protobuf:"bytes,1,opt,name=score,proto3,oneof"`
}

type Dota2MatchStatePartialUpdate_CurrentMapState struct {
	// Replaces "current_map_state" property in Dota2MatchState. To minimalize issues with incorrect updates application
	// on current_map_state, server sends Dota2MatchStatePartialUpdate with Dota2MapState in periodic time set by customer.
	CurrentMapState *Dota2CurrentMapState `protobuf:"bytes,2,opt,name=current_map_state,json=currentMapState,proto3,oneof"`
}

type Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate struct {
	// Apply partial update on "current_map_state" property in Dota2MapState.
	CurrentMapStatePartialUpdate *Dota2CurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=current_map_state_partial_update,json=currentMapStatePartialUpdate,proto3,oneof"`
}

func (*Dota2MatchStatePartialUpdate_Score) isDota2MatchStatePartialUpdate_Update() {}

func (*Dota2MatchStatePartialUpdate_CurrentMapState) isDota2MatchStatePartialUpdate_Update() {}

func (*Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate) isDota2MatchStatePartialUpdate_Update() {
}

type Dota2MatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn     string                   `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	MatchType    BestOfType               `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=bragi.BestOfType" json:"match_type,omitempty"`
	HomeTeam     *Team                    `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam     *Team                    `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Score        *Dota2MatchScoreState    `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	MatchStatus  MatchStatusType          `protobuf:"varint,6,opt,name=match_status,json=matchStatus,proto3,enum=bragi.MatchStatusType" json:"match_status,omitempty"`
	CurrentMap   *Dota2CurrentMapState    `protobuf:"bytes,7,opt,name=current_map,json=currentMap,proto3" json:"current_map,omitempty"`
	PreviousMaps []*Dota2PreviousMapState `protobuf:"bytes,8,rep,name=previous_maps,json=previousMaps,proto3" json:"previous_maps,omitempty"`
}

func (x *Dota2MatchState) Reset() {
	*x = Dota2MatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchState) ProtoMessage() {}

func (x *Dota2MatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchState.ProtoReflect.Descriptor instead.
func (*Dota2MatchState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{5}
}

func (x *Dota2MatchState) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *Dota2MatchState) GetMatchType() BestOfType {
	if x != nil {
		return x.MatchType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *Dota2MatchState) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *Dota2MatchState) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *Dota2MatchState) GetScore() *Dota2MatchScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *Dota2MatchState) GetMatchStatus() MatchStatusType {
	if x != nil {
		return x.MatchStatus
	}
	return MatchStatusType_MATCH_STATUS_TYPE_UNSPECIFIED
}

func (x *Dota2MatchState) GetCurrentMap() *Dota2CurrentMapState {
	if x != nil {
		return x.CurrentMap
	}
	return nil
}

func (x *Dota2MatchState) GetPreviousMaps() []*Dota2PreviousMapState {
	if x != nil {
		return x.PreviousMaps
	}
	return nil
}

type Dota2MatchScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *Dota2MatchScoreState) Reset() {
	*x = Dota2MatchScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchScoreState) ProtoMessage() {}

func (x *Dota2MatchScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchScoreState.ProtoReflect.Descriptor instead.
func (*Dota2MatchScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{6}
}

func (x *Dota2MatchScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *Dota2MatchScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type Dota2CurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*Dota2CurrentMapStatePartialUpdate_GameTime
	//	*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState
	//	*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate
	//	*Dota2CurrentMapStatePartialUpdate_Towers
	//	*Dota2CurrentMapStatePartialUpdate_Barracks
	Update isDota2CurrentMapStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *Dota2CurrentMapStatePartialUpdate) Reset() {
	*x = Dota2CurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2CurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2CurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *Dota2CurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2CurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*Dota2CurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{7}
}

func (m *Dota2CurrentMapStatePartialUpdate) GetUpdate() isDota2CurrentMapStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *Dota2CurrentMapStatePartialUpdate) GetGameTime() *Dota2CurrentMapTimeState {
	if x, ok := x.GetUpdate().(*Dota2CurrentMapStatePartialUpdate_GameTime); ok {
		return x.GameTime
	}
	return nil
}

func (x *Dota2CurrentMapStatePartialUpdate) GetTeamCurrentMapState() *Dota2TeamCurrentMapState {
	if x, ok := x.GetUpdate().(*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState); ok {
		return x.TeamCurrentMapState
	}
	return nil
}

func (x *Dota2CurrentMapStatePartialUpdate) GetTeamCurrentMapPartialUpdate() *Dota2TeamCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate); ok {
		return x.TeamCurrentMapPartialUpdate
	}
	return nil
}

func (x *Dota2CurrentMapStatePartialUpdate) GetTowers() *Dota2Towers {
	if x, ok := x.GetUpdate().(*Dota2CurrentMapStatePartialUpdate_Towers); ok {
		return x.Towers
	}
	return nil
}

func (x *Dota2CurrentMapStatePartialUpdate) GetBarracks() *Dota2Barracks {
	if x, ok := x.GetUpdate().(*Dota2CurrentMapStatePartialUpdate_Barracks); ok {
		return x.Barracks
	}
	return nil
}

type isDota2CurrentMapStatePartialUpdate_Update interface {
	isDota2CurrentMapStatePartialUpdate_Update()
}

type Dota2CurrentMapStatePartialUpdate_GameTime struct {
	// Replaces "game_time" property in Dota2CurrentMapTimeState.
	GameTime *Dota2CurrentMapTimeState `protobuf:"bytes,1,opt,name=game_time,json=gameTime,proto3,oneof"`
}

type Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState struct {
	// Replaces whole value under given key in players map property in Dota2TeamCurrentMapState.
	TeamCurrentMapState *Dota2TeamCurrentMapState `protobuf:"bytes,2,opt,name=team_current_map_state,json=teamCurrentMapState,proto3,oneof"`
}

type Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate struct {
	// Apply partial update on value under given key in teams map property in Dota2CurrentMapState.
	TeamCurrentMapPartialUpdate *Dota2TeamCurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=team_current_map_partial_update,json=teamCurrentMapPartialUpdate,proto3,oneof"`
}

type Dota2CurrentMapStatePartialUpdate_Towers struct {
	// Replaces "towers" property in Dota2Towers.
	Towers *Dota2Towers `protobuf:"bytes,4,opt,name=towers,proto3,oneof"`
}

type Dota2CurrentMapStatePartialUpdate_Barracks struct {
	// Replaces "barracks" property in Dota2Barracks.
	Barracks *Dota2Barracks `protobuf:"bytes,5,opt,name=barracks,proto3,oneof"`
}

func (*Dota2CurrentMapStatePartialUpdate_GameTime) isDota2CurrentMapStatePartialUpdate_Update() {}

func (*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState) isDota2CurrentMapStatePartialUpdate_Update() {
}

func (*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) isDota2CurrentMapStatePartialUpdate_Update() {
}

func (*Dota2CurrentMapStatePartialUpdate_Towers) isDota2CurrentMapStatePartialUpdate_Update() {}

func (*Dota2CurrentMapStatePartialUpdate_Barracks) isDota2CurrentMapStatePartialUpdate_Update() {}

type Dota2CurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder  uint32                               `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	MapPaused bool                                 `protobuf:"varint,2,opt,name=map_paused,json=mapPaused,proto3" json:"map_paused,omitempty"`
	GameTime  *Dota2CurrentMapTimeState            `protobuf:"bytes,3,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	Teams     map[string]*Dota2TeamCurrentMapState `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Towers    *Dota2Towers                         `protobuf:"bytes,5,opt,name=towers,proto3" json:"towers,omitempty"`
	Barracks  *Dota2Barracks                       `protobuf:"bytes,6,opt,name=barracks,proto3" json:"barracks,omitempty"`
}

func (x *Dota2CurrentMapState) Reset() {
	*x = Dota2CurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2CurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2CurrentMapState) ProtoMessage() {}

func (x *Dota2CurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2CurrentMapState.ProtoReflect.Descriptor instead.
func (*Dota2CurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{8}
}

func (x *Dota2CurrentMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *Dota2CurrentMapState) GetMapPaused() bool {
	if x != nil {
		return x.MapPaused
	}
	return false
}

func (x *Dota2CurrentMapState) GetGameTime() *Dota2CurrentMapTimeState {
	if x != nil {
		return x.GameTime
	}
	return nil
}

func (x *Dota2CurrentMapState) GetTeams() map[string]*Dota2TeamCurrentMapState {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Dota2CurrentMapState) GetTowers() *Dota2Towers {
	if x != nil {
		return x.Towers
	}
	return nil
}

func (x *Dota2CurrentMapState) GetBarracks() *Dota2Barracks {
	if x != nil {
		return x.Barracks
	}
	return nil
}

type Dota2CurrentMapTimeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime *durationpb.Duration `protobuf:"bytes,1,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
}

func (x *Dota2CurrentMapTimeState) Reset() {
	*x = Dota2CurrentMapTimeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2CurrentMapTimeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2CurrentMapTimeState) ProtoMessage() {}

func (x *Dota2CurrentMapTimeState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2CurrentMapTimeState.ProtoReflect.Descriptor instead.
func (*Dota2CurrentMapTimeState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{9}
}

func (x *Dota2CurrentMapTimeState) GetGameTime() *durationpb.Duration {
	if x != nil {
		return x.GameTime
	}
	return nil
}

type Dota2PreviousMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder uint32                                `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	Teams    map[string]*Dota2TeamPreviousMapState `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Dota2PreviousMapState) Reset() {
	*x = Dota2PreviousMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PreviousMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PreviousMapState) ProtoMessage() {}

func (x *Dota2PreviousMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PreviousMapState.ProtoReflect.Descriptor instead.
func (*Dota2PreviousMapState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{10}
}

func (x *Dota2PreviousMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *Dota2PreviousMapState) GetTeams() map[string]*Dota2TeamPreviousMapState {
	if x != nil {
		return x.Teams
	}
	return nil
}

type Dota2TeamCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                         `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Payload *Dota2TeamCurrentMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Dota2TeamCurrentMapStatePartialUpdate) Reset() {
	*x = Dota2TeamCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2TeamCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2TeamCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *Dota2TeamCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2TeamCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*Dota2TeamCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{11}
}

func (x *Dota2TeamCurrentMapStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *Dota2TeamCurrentMapStatePartialUpdate) GetPayload() *Dota2TeamCurrentMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Dota2TeamCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn    string                                 `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Faction    Dota2Faction                           `protobuf:"varint,2,opt,name=faction,proto3,enum=bragi.Dota2Faction" json:"faction,omitempty"`
	Statistics *Dota2TeamCurrentMapStatisticsState    `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Won        *bool                                  `protobuf:"varint,4,opt,name=won,proto3,oneof" json:"won,omitempty"`
	Players    map[string]*Dota2PlayerCurrentMapState `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Dota2TeamCurrentMapState) Reset() {
	*x = Dota2TeamCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2TeamCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2TeamCurrentMapState) ProtoMessage() {}

func (x *Dota2TeamCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2TeamCurrentMapState.ProtoReflect.Descriptor instead.
func (*Dota2TeamCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{12}
}

func (x *Dota2TeamCurrentMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *Dota2TeamCurrentMapState) GetFaction() Dota2Faction {
	if x != nil {
		return x.Faction
	}
	return Dota2Faction_DOTA2_FACTION_UNSPECIFIED
}

func (x *Dota2TeamCurrentMapState) GetStatistics() *Dota2TeamCurrentMapStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Dota2TeamCurrentMapState) GetWon() bool {
	if x != nil && x.Won != nil {
		return *x.Won
	}
	return false
}

func (x *Dota2TeamCurrentMapState) GetPlayers() map[string]*Dota2PlayerCurrentMapState {
	if x != nil {
		return x.Players
	}
	return nil
}

type Dota2TeamCurrentMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn  string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Barracks uint32 `protobuf:"varint,2,opt,name=barracks,proto3" json:"barracks,omitempty"`
	Kills    uint32 `protobuf:"varint,3,opt,name=kills,proto3" json:"kills,omitempty"`
	NetWorth uint32 `protobuf:"varint,4,opt,name=net_worth,json=netWorth,proto3" json:"net_worth,omitempty"`
	Roshans  uint32 `protobuf:"varint,5,opt,name=roshans,proto3" json:"roshans,omitempty"`
	Towers   uint32 `protobuf:"varint,6,opt,name=towers,proto3" json:"towers,omitempty"`
}

func (x *Dota2TeamCurrentMapStatisticsState) Reset() {
	*x = Dota2TeamCurrentMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2TeamCurrentMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2TeamCurrentMapStatisticsState) ProtoMessage() {}

func (x *Dota2TeamCurrentMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2TeamCurrentMapStatisticsState.ProtoReflect.Descriptor instead.
func (*Dota2TeamCurrentMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{13}
}

func (x *Dota2TeamCurrentMapStatisticsState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *Dota2TeamCurrentMapStatisticsState) GetBarracks() uint32 {
	if x != nil {
		return x.Barracks
	}
	return 0
}

func (x *Dota2TeamCurrentMapStatisticsState) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *Dota2TeamCurrentMapStatisticsState) GetNetWorth() uint32 {
	if x != nil {
		return x.NetWorth
	}
	return 0
}

func (x *Dota2TeamCurrentMapStatisticsState) GetRoshans() uint32 {
	if x != nil {
		return x.Roshans
	}
	return 0
}

func (x *Dota2TeamCurrentMapStatisticsState) GetTowers() uint32 {
	if x != nil {
		return x.Towers
	}
	return 0
}

type Dota2PlayerCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string                                           `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Payload   *Dota2PlayerCurrentMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate) Reset() {
	*x = Dota2PlayerCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PlayerCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *Dota2PlayerCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PlayerCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*Dota2PlayerCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{14}
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate) GetPayload() *Dota2PlayerCurrentMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Dota2PlayerCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn     string                                `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerInfo    *Dota2PlayerInfoState                 `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Timers        *Dota2PlayerCurrentMapTimersState     `protobuf:"bytes,3,opt,name=timers,proto3" json:"timers,omitempty"`
	Statistics    *Dota2PlayerStatisticsState           `protobuf:"bytes,4,opt,name=statistics,proto3" json:"statistics,omitempty"`
	MapStatistics *Dota2PlayerCurrentMapStatisticsState `protobuf:"bytes,5,opt,name=map_statistics,json=mapStatistics,proto3" json:"map_statistics,omitempty"`
	Position      *Dota2Position                        `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Dota2PlayerCurrentMapState) Reset() {
	*x = Dota2PlayerCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PlayerCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PlayerCurrentMapState) ProtoMessage() {}

func (x *Dota2PlayerCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PlayerCurrentMapState.ProtoReflect.Descriptor instead.
func (*Dota2PlayerCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{15}
}

func (x *Dota2PlayerCurrentMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *Dota2PlayerCurrentMapState) GetPlayerInfo() *Dota2PlayerInfoState {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *Dota2PlayerCurrentMapState) GetTimers() *Dota2PlayerCurrentMapTimersState {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *Dota2PlayerCurrentMapState) GetStatistics() *Dota2PlayerStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Dota2PlayerCurrentMapState) GetMapStatistics() *Dota2PlayerCurrentMapStatisticsState {
	if x != nil {
		return x.MapStatistics
	}
	return nil
}

func (x *Dota2PlayerCurrentMapState) GetPosition() *Dota2Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type Dota2PlayerCurrentMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn   string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Alive       bool   `protobuf:"varint,2,opt,name=alive,proto3" json:"alive,omitempty"`
	Health      uint32 `protobuf:"varint,3,opt,name=health,proto3" json:"health,omitempty"`
	MaxHealth   uint32 `protobuf:"varint,4,opt,name=max_health,json=maxHealth,proto3" json:"max_health,omitempty"`
	CurrentGold uint32 `protobuf:"varint,5,opt,name=current_gold,json=currentGold,proto3" json:"current_gold,omitempty"`
	// Players gold plus sum of buy values of items in inventory/courier.
	NetWorth uint32 `protobuf:"varint,6,opt,name=net_worth,json=netWorth,proto3" json:"net_worth,omitempty"`
	// How much gold you need to spend to use buyback.
	BuybackCost uint32 `protobuf:"varint,7,opt,name=buyback_cost,json=buybackCost,proto3" json:"buyback_cost,omitempty"`
	HasBuyback  bool   `protobuf:"varint,8,opt,name=has_buyback,json=hasBuyback,proto3" json:"has_buyback,omitempty"`
	HasAegis    bool   `protobuf:"varint,9,opt,name=has_aegis,json=hasAegis,proto3" json:"has_aegis,omitempty"`
	Mana        uint32 `protobuf:"varint,10,opt,name=mana,proto3" json:"mana,omitempty"`
	MaxMana     uint32 `protobuf:"varint,11,opt,name=max_mana,json=maxMana,proto3" json:"max_mana,omitempty"`
}

func (x *Dota2PlayerCurrentMapStatisticsState) Reset() {
	*x = Dota2PlayerCurrentMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PlayerCurrentMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PlayerCurrentMapStatisticsState) ProtoMessage() {}

func (x *Dota2PlayerCurrentMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PlayerCurrentMapStatisticsState.ProtoReflect.Descriptor instead.
func (*Dota2PlayerCurrentMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{16}
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetHealth() uint32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetMaxHealth() uint32 {
	if x != nil {
		return x.MaxHealth
	}
	return 0
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetCurrentGold() uint32 {
	if x != nil {
		return x.CurrentGold
	}
	return 0
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetNetWorth() uint32 {
	if x != nil {
		return x.NetWorth
	}
	return 0
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetBuybackCost() uint32 {
	if x != nil {
		return x.BuybackCost
	}
	return 0
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetHasBuyback() bool {
	if x != nil {
		return x.HasBuyback
	}
	return false
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetHasAegis() bool {
	if x != nil {
		return x.HasAegis
	}
	return false
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetMana() uint32 {
	if x != nil {
		return x.Mana
	}
	return 0
}

func (x *Dota2PlayerCurrentMapStatisticsState) GetMaxMana() uint32 {
	if x != nil {
		return x.MaxMana
	}
	return 0
}

type Dota2PlayerCurrentMapTimersState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn       string               `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	RespawnTimer    *durationpb.Duration `protobuf:"bytes,2,opt,name=respawn_timer,json=respawnTimer,proto3,oneof" json:"respawn_timer,omitempty"`
	BuybackCooldown *durationpb.Duration `protobuf:"bytes,3,opt,name=buyback_cooldown,json=buybackCooldown,proto3" json:"buyback_cooldown,omitempty"`
}

func (x *Dota2PlayerCurrentMapTimersState) Reset() {
	*x = Dota2PlayerCurrentMapTimersState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PlayerCurrentMapTimersState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PlayerCurrentMapTimersState) ProtoMessage() {}

func (x *Dota2PlayerCurrentMapTimersState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PlayerCurrentMapTimersState.ProtoReflect.Descriptor instead.
func (*Dota2PlayerCurrentMapTimersState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{17}
}

func (x *Dota2PlayerCurrentMapTimersState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *Dota2PlayerCurrentMapTimersState) GetRespawnTimer() *durationpb.Duration {
	if x != nil {
		return x.RespawnTimer
	}
	return nil
}

func (x *Dota2PlayerCurrentMapTimersState) GetBuybackCooldown() *durationpb.Duration {
	if x != nil {
		return x.BuybackCooldown
	}
	return nil
}

type Dota2TeamPreviousMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn  string                                  `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Faction  Dota2Faction                            `protobuf:"varint,2,opt,name=faction,proto3,enum=bragi.Dota2Faction" json:"faction,omitempty"`
	Barracks uint32                                  `protobuf:"varint,3,opt,name=barracks,proto3" json:"barracks,omitempty"`
	Kills    uint32                                  `protobuf:"varint,4,opt,name=kills,proto3" json:"kills,omitempty"`
	NetWorth uint32                                  `protobuf:"varint,5,opt,name=net_worth,json=netWorth,proto3" json:"net_worth,omitempty"`
	Roshans  uint32                                  `protobuf:"varint,6,opt,name=roshans,proto3" json:"roshans,omitempty"`
	Towers   uint32                                  `protobuf:"varint,7,opt,name=towers,proto3" json:"towers,omitempty"`
	Won      *bool                                   `protobuf:"varint,8,opt,name=won,proto3,oneof" json:"won,omitempty"`
	Players  map[string]*Dota2PlayerPreviousMapState `protobuf:"bytes,9,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Dota2TeamPreviousMapState) Reset() {
	*x = Dota2TeamPreviousMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2TeamPreviousMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2TeamPreviousMapState) ProtoMessage() {}

func (x *Dota2TeamPreviousMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2TeamPreviousMapState.ProtoReflect.Descriptor instead.
func (*Dota2TeamPreviousMapState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{18}
}

func (x *Dota2TeamPreviousMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *Dota2TeamPreviousMapState) GetFaction() Dota2Faction {
	if x != nil {
		return x.Faction
	}
	return Dota2Faction_DOTA2_FACTION_UNSPECIFIED
}

func (x *Dota2TeamPreviousMapState) GetBarracks() uint32 {
	if x != nil {
		return x.Barracks
	}
	return 0
}

func (x *Dota2TeamPreviousMapState) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *Dota2TeamPreviousMapState) GetNetWorth() uint32 {
	if x != nil {
		return x.NetWorth
	}
	return 0
}

func (x *Dota2TeamPreviousMapState) GetRoshans() uint32 {
	if x != nil {
		return x.Roshans
	}
	return 0
}

func (x *Dota2TeamPreviousMapState) GetTowers() uint32 {
	if x != nil {
		return x.Towers
	}
	return 0
}

func (x *Dota2TeamPreviousMapState) GetWon() bool {
	if x != nil && x.Won != nil {
		return *x.Won
	}
	return false
}

func (x *Dota2TeamPreviousMapState) GetPlayers() map[string]*Dota2PlayerPreviousMapState {
	if x != nil {
		return x.Players
	}
	return nil
}

type Dota2PlayerPreviousMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                      `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerInfo *Dota2PlayerInfoState       `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Statistics *Dota2PlayerStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *Dota2PlayerPreviousMapState) Reset() {
	*x = Dota2PlayerPreviousMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PlayerPreviousMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PlayerPreviousMapState) ProtoMessage() {}

func (x *Dota2PlayerPreviousMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PlayerPreviousMapState.ProtoReflect.Descriptor instead.
func (*Dota2PlayerPreviousMapState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{19}
}

func (x *Dota2PlayerPreviousMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *Dota2PlayerPreviousMapState) GetPlayerInfo() *Dota2PlayerInfoState {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *Dota2PlayerPreviousMapState) GetStatistics() *Dota2PlayerStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type Dota2PlayerInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string  `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	SlotId    uint32  `protobuf:"varint,2,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	ExtName   string  `protobuf:"bytes,3,opt,name=ext_name,json=extName,proto3" json:"ext_name,omitempty"`
	HeroId    *uint32 `protobuf:"varint,4,opt,name=hero_id,json=heroId,proto3,oneof" json:"hero_id,omitempty"`
}

func (x *Dota2PlayerInfoState) Reset() {
	*x = Dota2PlayerInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PlayerInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PlayerInfoState) ProtoMessage() {}

func (x *Dota2PlayerInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PlayerInfoState.ProtoReflect.Descriptor instead.
func (*Dota2PlayerInfoState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{20}
}

func (x *Dota2PlayerInfoState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *Dota2PlayerInfoState) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *Dota2PlayerInfoState) GetExtName() string {
	if x != nil {
		return x.ExtName
	}
	return ""
}

func (x *Dota2PlayerInfoState) GetHeroId() uint32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type Dota2PlayerStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Kills     uint32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths    uint32 `protobuf:"varint,3,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists   uint32 `protobuf:"varint,4,opt,name=assists,proto3" json:"assists,omitempty"`
}

func (x *Dota2PlayerStatisticsState) Reset() {
	*x = Dota2PlayerStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PlayerStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PlayerStatisticsState) ProtoMessage() {}

func (x *Dota2PlayerStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PlayerStatisticsState.ProtoReflect.Descriptor instead.
func (*Dota2PlayerStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{21}
}

func (x *Dota2PlayerStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *Dota2PlayerStatisticsState) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *Dota2PlayerStatisticsState) GetDeaths() uint32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *Dota2PlayerStatisticsState) GetAssists() uint32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

type Dota2Towers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Towers []*Dota2Tower `protobuf:"bytes,1,rep,name=towers,proto3" json:"towers,omitempty"`
}

func (x *Dota2Towers) Reset() {
	*x = Dota2Towers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2Towers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2Towers) ProtoMessage() {}

func (x *Dota2Towers) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2Towers.ProtoReflect.Descriptor instead.
func (*Dota2Towers) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{22}
}

func (x *Dota2Towers) GetTowers() []*Dota2Tower {
	if x != nil {
		return x.Towers
	}
	return nil
}

type Dota2Barracks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Barracks []*Dota2Barrack `protobuf:"bytes,1,rep,name=barracks,proto3" json:"barracks,omitempty"`
}

func (x *Dota2Barracks) Reset() {
	*x = Dota2Barracks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2Barracks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2Barracks) ProtoMessage() {}

func (x *Dota2Barracks) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2Barracks.ProtoReflect.Descriptor instead.
func (*Dota2Barracks) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{23}
}

func (x *Dota2Barracks) GetBarracks() []*Dota2Barrack {
	if x != nil {
		return x.Barracks
	}
	return nil
}

type Dota2Tower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lane    Dota2Lane      `protobuf:"varint,1,opt,name=lane,proto3,enum=bragi.Dota2Lane" json:"lane,omitempty"`
	Faction Dota2Faction   `protobuf:"varint,2,opt,name=faction,proto3,enum=bragi.Dota2Faction" json:"faction,omitempty"`
	Tier    Dota2TowerTier `protobuf:"varint,3,opt,name=tier,proto3,enum=bragi.Dota2TowerTier" json:"tier,omitempty"`
	Alive   bool           `protobuf:"varint,4,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *Dota2Tower) Reset() {
	*x = Dota2Tower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2Tower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2Tower) ProtoMessage() {}

func (x *Dota2Tower) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2Tower.ProtoReflect.Descriptor instead.
func (*Dota2Tower) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{24}
}

func (x *Dota2Tower) GetLane() Dota2Lane {
	if x != nil {
		return x.Lane
	}
	return Dota2Lane_DOTA2_LANE_UNSPECIFIED
}

func (x *Dota2Tower) GetFaction() Dota2Faction {
	if x != nil {
		return x.Faction
	}
	return Dota2Faction_DOTA2_FACTION_UNSPECIFIED
}

func (x *Dota2Tower) GetTier() Dota2TowerTier {
	if x != nil {
		return x.Tier
	}
	return Dota2TowerTier_DOTA2_TOWER_TIER_UNSPECIFIED
}

func (x *Dota2Tower) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

type Dota2Barrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lane    Dota2Lane        `protobuf:"varint,1,opt,name=lane,proto3,enum=bragi.Dota2Lane" json:"lane,omitempty"`
	Faction Dota2Faction     `protobuf:"varint,2,opt,name=faction,proto3,enum=bragi.Dota2Faction" json:"faction,omitempty"`
	Type    Dota2BarrackType `protobuf:"varint,3,opt,name=type,proto3,enum=bragi.Dota2BarrackType" json:"type,omitempty"`
	Alive   bool             `protobuf:"varint,4,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *Dota2Barrack) Reset() {
	*x = Dota2Barrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2Barrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2Barrack) ProtoMessage() {}

func (x *Dota2Barrack) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2Barrack.ProtoReflect.Descriptor instead.
func (*Dota2Barrack) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{25}
}

func (x *Dota2Barrack) GetLane() Dota2Lane {
	if x != nil {
		return x.Lane
	}
	return Dota2Lane_DOTA2_LANE_UNSPECIFIED
}

func (x *Dota2Barrack) GetFaction() Dota2Faction {
	if x != nil {
		return x.Faction
	}
	return Dota2Faction_DOTA2_FACTION_UNSPECIFIED
}

func (x *Dota2Barrack) GetType() Dota2BarrackType {
	if x != nil {
		return x.Type
	}
	return Dota2BarrackType_DOTA2_BARRACK_TYPE_UNSPECIFIED
}

func (x *Dota2Barrack) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

type Dota2Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Dota2Position) Reset() {
	*x = Dota2Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2Position) ProtoMessage() {}

func (x *Dota2Position) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2Position.ProtoReflect.Descriptor instead.
func (*Dota2Position) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{26}
}

func (x *Dota2Position) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Dota2Position) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Dota2MatchMessage_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Dota2MatchMessage_Payload_Snapshot
	//	*Dota2MatchMessage_Payload_Update
	Payload isDota2MatchMessage_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *Dota2MatchMessage_Payload) Reset() {
	*x = Dota2MatchMessage_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchMessage_Payload) ProtoMessage() {}

func (x *Dota2MatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*Dota2MatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Dota2MatchMessage_Payload) GetPayload() isDota2MatchMessage_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Dota2MatchMessage_Payload) GetSnapshot() *Dota2MatchSnapshot {
	if x, ok := x.GetPayload().(*Dota2MatchMessage_Payload_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *Dota2MatchMessage_Payload) GetUpdate() *Dota2MatchUpdate {
	if x, ok := x.GetPayload().(*Dota2MatchMessage_Payload_Update); ok {
		return x.Update
	}
	return nil
}

type isDota2MatchMessage_Payload_Payload interface {
	isDota2MatchMessage_Payload_Payload()
}

type Dota2MatchMessage_Payload_Snapshot struct {
	// Initial snapshot
	Snapshot *Dota2MatchSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type Dota2MatchMessage_Payload_Update struct {
	// Particular updates which are applied on property match_state in MatchState.
	Update *Dota2MatchUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*Dota2MatchMessage_Payload_Snapshot) isDota2MatchMessage_Payload_Payload() {}

func (*Dota2MatchMessage_Payload_Update) isDota2MatchMessage_Payload_Payload() {}

type Dota2MatchUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Dota2MatchUpdate_Payload_MatchState
	//	*Dota2MatchUpdate_Payload_PartialUpdates
	Payload isDota2MatchUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *Dota2MatchUpdate_Payload) Reset() {
	*x = Dota2MatchUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2MatchUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2MatchUpdate_Payload) ProtoMessage() {}

func (x *Dota2MatchUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2MatchUpdate_Payload.ProtoReflect.Descriptor instead.
func (*Dota2MatchUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{2, 0}
}

func (m *Dota2MatchUpdate_Payload) GetPayload() isDota2MatchUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Dota2MatchUpdate_Payload) GetMatchState() *Dota2MatchState {
	if x, ok := x.GetPayload().(*Dota2MatchUpdate_Payload_MatchState); ok {
		return x.MatchState
	}
	return nil
}

func (x *Dota2MatchUpdate_Payload) GetPartialUpdates() *Dota2MatchStatePartialUpdates {
	if x, ok := x.GetPayload().(*Dota2MatchUpdate_Payload_PartialUpdates); ok {
		return x.PartialUpdates
	}
	return nil
}

type isDota2MatchUpdate_Payload_Payload interface {
	isDota2MatchUpdate_Payload_Payload()
}

type Dota2MatchUpdate_Payload_MatchState struct {
	MatchState *Dota2MatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3,oneof"`
}

type Dota2MatchUpdate_Payload_PartialUpdates struct {
	PartialUpdates *Dota2MatchStatePartialUpdates `protobuf:"bytes,2,opt,name=partial_updates,json=partialUpdates,proto3,oneof"`
}

func (*Dota2MatchUpdate_Payload_MatchState) isDota2MatchUpdate_Payload_Payload() {}

func (*Dota2MatchUpdate_Payload_PartialUpdates) isDota2MatchUpdate_Payload_Payload() {}

type Dota2TeamCurrentMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics
	//	*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState
	//	*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate
	Payload isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *Dota2TeamCurrentMapStatePartialUpdate_Payload) Reset() {
	*x = Dota2TeamCurrentMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2TeamCurrentMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2TeamCurrentMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *Dota2TeamCurrentMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2TeamCurrentMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*Dota2TeamCurrentMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{11, 0}
}

func (m *Dota2TeamCurrentMapStatePartialUpdate_Payload) GetPayload() isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Dota2TeamCurrentMapStatePartialUpdate_Payload) GetStatistics() *Dota2TeamCurrentMapStatisticsState {
	if x, ok := x.GetPayload().(*Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *Dota2TeamCurrentMapStatePartialUpdate_Payload) GetPlayerCurrentMapState() *Dota2PlayerCurrentMapState {
	if x, ok := x.GetPayload().(*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState); ok {
		return x.PlayerCurrentMapState
	}
	return nil
}

func (x *Dota2TeamCurrentMapStatePartialUpdate_Payload) GetPlayerCurrentMapPartialUpdate() *Dota2PlayerCurrentMapStatePartialUpdate {
	if x, ok := x.GetPayload().(*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate); ok {
		return x.PlayerCurrentMapPartialUpdate
	}
	return nil
}

type isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload interface {
	isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload()
}

type Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics struct {
	Statistics *Dota2TeamCurrentMapStatisticsState `protobuf:"bytes,1,opt,name=statistics,proto3,oneof"`
}

type Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState struct {
	// Replaces whole value under given key in players map property in Dota2TeamCurrentMapState.
	PlayerCurrentMapState *Dota2PlayerCurrentMapState `protobuf:"bytes,2,opt,name=player_current_map_state,json=playerCurrentMapState,proto3,oneof"`
}

type Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate struct {
	// Apply partial update on value under given key in player_map_states map property in Dota2TeamMapState.
	PlayerCurrentMapPartialUpdate *Dota2PlayerCurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=player_current_map_partial_update,json=playerCurrentMapPartialUpdate,proto3,oneof"`
}

func (*Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics) isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState) isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate) isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

type Dota2PlayerCurrentMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo
	//	*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers
	//	*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics
	//	*Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics
	//	*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position
	Payload isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate_Payload) Reset() {
	*x = Dota2PlayerCurrentMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_dota2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dota2PlayerCurrentMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *Dota2PlayerCurrentMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_dota2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dota2PlayerCurrentMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*Dota2PlayerCurrentMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_dota2_proto_rawDescGZIP(), []int{14, 0}
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload) GetPayload() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate_Payload) GetPlayerInfo() *Dota2PlayerInfoState {
	if x, ok := x.GetPayload().(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo); ok {
		return x.PlayerInfo
	}
	return nil
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate_Payload) GetTimers() *Dota2PlayerCurrentMapTimersState {
	if x, ok := x.GetPayload().(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers); ok {
		return x.Timers
	}
	return nil
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate_Payload) GetStatistics() *Dota2PlayerStatisticsState {
	if x, ok := x.GetPayload().(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate_Payload) GetMapStatistics() *Dota2PlayerCurrentMapStatisticsState {
	if x, ok := x.GetPayload().(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics); ok {
		return x.MapStatistics
	}
	return nil
}

func (x *Dota2PlayerCurrentMapStatePartialUpdate_Payload) GetPosition() *Dota2Position {
	if x, ok := x.GetPayload().(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position); ok {
		return x.Position
	}
	return nil
}

type isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload interface {
	isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload()
}

type Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo struct {
	// Replaces "player_info" property in Dota2PlayerInfoState.
	PlayerInfo *Dota2PlayerInfoState `protobuf:"bytes,1,opt,name=player_info,json=playerInfo,proto3,oneof"`
}

type Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers struct {
	// Replaces "timers" property in Dota2PlayerCurrentMapTimersState.
	Timers *Dota2PlayerCurrentMapTimersState `protobuf:"bytes,2,opt,name=timers,proto3,oneof"`
}

type Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics struct {
	// Replaces "statistics" property in Dota2PlayerStatisticsState.
	Statistics *Dota2PlayerStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3,oneof"`
}

type Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics struct {
	// Replaces "map_statistics" property in Dota2PlayerCurrentMapStatisticsState.
	MapStatistics *Dota2PlayerCurrentMapStatisticsState `protobuf:"bytes,4,opt,name=map_statistics,json=mapStatistics,proto3,oneof"`
}

type Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position struct {
	// Replaces "position" property in Dota2Position.
	Position *Dota2Position `protobuf:"bytes,5,opt,name=position,proto3,oneof"`
}

func (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo) isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers) isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics) isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics) isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position) isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

var File_bragi_dota2_proto protoreflect.FileDescriptor

var file_bragi_dota2_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x64, 0x6f, 0x74, 0x61, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62, 0x72, 0x61, 0x67, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf9, 0x02, 0x0a, 0x11, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x80, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44,
	0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x12,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf0, 0x01,
	0x0a, 0x10, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61,
	0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xa0, 0x01,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x5e, 0x0a, 0x1d, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x9c, 0x02, 0x0a, 0x1c, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x72, 0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xa3, 0x03, 0x0a, 0x0f, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e,
	0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x42, 0x65, 0x73,
	0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x09,
	0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77,
	0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x54, 0x0a, 0x14, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x21,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74,
	0x61, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x1f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x1b, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x42, 0x61, 0x72,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x14,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61,
	0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x06,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x52, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x72, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x52, 0x08, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x1a, 0x59, 0x0a, 0x0a, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x18, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a,
	0x5a, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65, 0x61, 0x6d,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x03, 0x0a, 0x25,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e,
	0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x1a, 0xbb, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4b, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xf5,
	0x02, 0x0a, 0x18, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x15, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x03, 0x77, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a,
	0x5d, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x77, 0x6f, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x22, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x72, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x72, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x73, 0x68, 0x61,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x27, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x72, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xe6, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x83, 0x03, 0x0a, 0x1a, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x3c, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x52, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x24, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x42, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x65, 0x67, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x65, 0x67, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x6e, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x6e, 0x61, 0x22, 0xde, 0x01, 0x0a, 0x20, 0x44,
	0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x43,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x10, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x22, 0xae, 0x03, 0x0a, 0x19,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x73, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x03, 0x77, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x1a, 0x5e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x77, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a,
	0x1b, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x93, 0x01, 0x0a,
	0x14, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x72, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x0b, 0x44, 0x6f, 0x74, 0x61,
	0x32, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x62, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x62, 0x61, 0x72, 0x72,
	0x61, 0x63, 0x6b, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4c,
	0x61, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44,
	0x6f, 0x74, 0x61, 0x32, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74,
	0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x44, 0x6f,
	0x74, 0x61, 0x32, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4c, 0x61, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65,
	0x12, 0x2d, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x46,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x2a,
	0x60, 0x0a, 0x0c, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x41, 0x44, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x54,
	0x41, 0x32, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x10,
	0x02, 0x2a, 0x63, 0x0a, 0x09, 0x44, 0x6f, 0x74, 0x61, 0x32, 0x4c, 0x61, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f,
	0x54, 0x41, 0x32, 0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x4c, 0x41, 0x4e, 0x45,
	0x5f, 0x42, 0x4f, 0x54, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x74, 0x61, 0x32,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x54,
	0x41, 0x32, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x4f, 0x54, 0x41, 0x32, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f,
	0x31, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x54, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x4f, 0x54, 0x41, 0x32, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f,
	0x33, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x54, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x34, 0x10, 0x04, 0x2a, 0x73, 0x0a, 0x10, 0x44,
	0x6f, 0x74, 0x61, 0x32, 0x42, 0x61, 0x72, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x1e, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x41, 0x43, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x42, 0x41, 0x52,
	0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x32, 0x5f, 0x42, 0x41, 0x52, 0x52,
	0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4c, 0x45, 0x45, 0x10, 0x02,
	0x42, 0x21, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x5a, 0x0e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bragi_dota2_proto_rawDescOnce sync.Once
	file_bragi_dota2_proto_rawDescData = file_bragi_dota2_proto_rawDesc
)

func file_bragi_dota2_proto_rawDescGZIP() []byte {
	file_bragi_dota2_proto_rawDescOnce.Do(func() {
		file_bragi_dota2_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_dota2_proto_rawDescData)
	})
	return file_bragi_dota2_proto_rawDescData
}

var file_bragi_dota2_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bragi_dota2_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_bragi_dota2_proto_goTypes = []interface{}{
	(Dota2Faction)(0),                                     // 0: bragi.Dota2Faction
	(Dota2Lane)(0),                                        // 1: bragi.Dota2Lane
	(Dota2TowerTier)(0),                                   // 2: bragi.Dota2TowerTier
	(Dota2BarrackType)(0),                                 // 3: bragi.Dota2BarrackType
	(*Dota2MatchMessage)(nil),                             // 4: bragi.Dota2MatchMessage
	(*Dota2MatchSnapshot)(nil),                            // 5: bragi.Dota2MatchSnapshot
	(*Dota2MatchUpdate)(nil),                              // 6: bragi.Dota2MatchUpdate
	(*Dota2MatchStatePartialUpdates)(nil),                 // 7: bragi.Dota2MatchStatePartialUpdates
	(*Dota2MatchStatePartialUpdate)(nil),                  // 8: bragi.Dota2MatchStatePartialUpdate
	(*Dota2MatchState)(nil),                               // 9: bragi.Dota2MatchState
	(*Dota2MatchScoreState)(nil),                          // 10: bragi.Dota2MatchScoreState
	(*Dota2CurrentMapStatePartialUpdate)(nil),             // 11: bragi.Dota2CurrentMapStatePartialUpdate
	(*Dota2CurrentMapState)(nil),                          // 12: bragi.Dota2CurrentMapState
	(*Dota2CurrentMapTimeState)(nil),                      // 13: bragi.Dota2CurrentMapTimeState
	(*Dota2PreviousMapState)(nil),                         // 14: bragi.Dota2PreviousMapState
	(*Dota2TeamCurrentMapStatePartialUpdate)(nil),         // 15: bragi.Dota2TeamCurrentMapStatePartialUpdate
	(*Dota2TeamCurrentMapState)(nil),                      // 16: bragi.Dota2TeamCurrentMapState
	(*Dota2TeamCurrentMapStatisticsState)(nil),            // 17: bragi.Dota2TeamCurrentMapStatisticsState
	(*Dota2PlayerCurrentMapStatePartialUpdate)(nil),       // 18: bragi.Dota2PlayerCurrentMapStatePartialUpdate
	(*Dota2PlayerCurrentMapState)(nil),                    // 19: bragi.Dota2PlayerCurrentMapState
	(*Dota2PlayerCurrentMapStatisticsState)(nil),          // 20: bragi.Dota2PlayerCurrentMapStatisticsState
	(*Dota2PlayerCurrentMapTimersState)(nil),              // 21: bragi.Dota2PlayerCurrentMapTimersState
	(*Dota2TeamPreviousMapState)(nil),                     // 22: bragi.Dota2TeamPreviousMapState
	(*Dota2PlayerPreviousMapState)(nil),                   // 23: bragi.Dota2PlayerPreviousMapState
	(*Dota2PlayerInfoState)(nil),                          // 24: bragi.Dota2PlayerInfoState
	(*Dota2PlayerStatisticsState)(nil),                    // 25: bragi.Dota2PlayerStatisticsState
	(*Dota2Towers)(nil),                                   // 26: bragi.Dota2Towers
	(*Dota2Barracks)(nil),                                 // 27: bragi.Dota2Barracks
	(*Dota2Tower)(nil),                                    // 28: bragi.Dota2Tower
	(*Dota2Barrack)(nil),                                  // 29: bragi.Dota2Barrack
	(*Dota2Position)(nil),                                 // 30: bragi.Dota2Position
	(*Dota2MatchMessage_Payload)(nil),                     // 31: bragi.Dota2MatchMessage.Payload
	(*Dota2MatchUpdate_Payload)(nil),                      // 32: bragi.Dota2MatchUpdate.Payload
	nil,                                                   // 33: bragi.Dota2CurrentMapState.TeamsEntry
	nil,                                                   // 34: bragi.Dota2PreviousMapState.TeamsEntry
	(*Dota2TeamCurrentMapStatePartialUpdate_Payload)(nil), // 35: bragi.Dota2TeamCurrentMapStatePartialUpdate.Payload
	nil, // 36: bragi.Dota2TeamCurrentMapState.PlayersEntry
	(*Dota2PlayerCurrentMapStatePartialUpdate_Payload)(nil), // 37: bragi.Dota2PlayerCurrentMapStatePartialUpdate.Payload
	nil,                           // 38: bragi.Dota2TeamPreviousMapState.PlayersEntry
	(*timestamppb.Timestamp)(nil), // 39: google.protobuf.Timestamp
	(DataStatus)(0),               // 40: bragi.DataStatus
	(*Announcement)(nil),          // 41: bragi.Announcement
	(BestOfType)(0),               // 42: bragi.BestOfType
	(*Team)(nil),                  // 43: bragi.Team
	(MatchStatusType)(0),          // 44: bragi.MatchStatusType
	(*durationpb.Duration)(nil),   // 45: google.protobuf.Duration
}
var file_bragi_dota2_proto_depIdxs = []int32{
	39, // 0: bragi.Dota2MatchMessage.timestamp:type_name -> google.protobuf.Timestamp
	40, // 1: bragi.Dota2MatchMessage.data_status:type_name -> bragi.DataStatus
	31, // 2: bragi.Dota2MatchMessage.payload:type_name -> bragi.Dota2MatchMessage.Payload
	39, // 3: bragi.Dota2MatchSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	40, // 4: bragi.Dota2MatchSnapshot.data_status:type_name -> bragi.DataStatus
	41, // 5: bragi.Dota2MatchSnapshot.announcements:type_name -> bragi.Announcement
	9,  // 6: bragi.Dota2MatchSnapshot.match_state:type_name -> bragi.Dota2MatchState
	32, // 7: bragi.Dota2MatchUpdate.payload:type_name -> bragi.Dota2MatchUpdate.Payload
	8,  // 8: bragi.Dota2MatchStatePartialUpdates.updates:type_name -> bragi.Dota2MatchStatePartialUpdate
	10, // 9: bragi.Dota2MatchStatePartialUpdate.score:type_name -> bragi.Dota2MatchScoreState
	12, // 10: bragi.Dota2MatchStatePartialUpdate.current_map_state:type_name -> bragi.Dota2CurrentMapState
	11, // 11: bragi.Dota2MatchStatePartialUpdate.current_map_state_partial_update:type_name -> bragi.Dota2CurrentMapStatePartialUpdate
	42, // 12: bragi.Dota2MatchState.match_type:type_name -> bragi.BestOfType
	43, // 13: bragi.Dota2MatchState.home_team:type_name -> bragi.Team
	43, // 14: bragi.Dota2MatchState.away_team:type_name -> bragi.Team
	10, // 15: bragi.Dota2MatchState.score:type_name -> bragi.Dota2MatchScoreState
	44, // 16: bragi.Dota2MatchState.match_status:type_name -> bragi.MatchStatusType
	12, // 17: bragi.Dota2MatchState.current_map:type_name -> bragi.Dota2CurrentMapState
	14, // 18: bragi.Dota2MatchState.previous_maps:type_name -> bragi.Dota2PreviousMapState
	13, // 19: bragi.Dota2CurrentMapStatePartialUpdate.game_time:type_name -> bragi.Dota2CurrentMapTimeState
	16, // 20: bragi.Dota2CurrentMapStatePartialUpdate.team_current_map_state:type_name -> bragi.Dota2TeamCurrentMapState
	15, // 21: bragi.Dota2CurrentMapStatePartialUpdate.team_current_map_partial_update:type_name -> bragi.Dota2TeamCurrentMapStatePartialUpdate
	26, // 22: bragi.Dota2CurrentMapStatePartialUpdate.towers:type_name -> bragi.Dota2Towers
	27, // 23: bragi.Dota2CurrentMapStatePartialUpdate.barracks:type_name -> bragi.Dota2Barracks
	13, // 24: bragi.Dota2CurrentMapState.game_time:type_name -> bragi.Dota2CurrentMapTimeState
	33, // 25: bragi.Dota2CurrentMapState.teams:type_name -> bragi.Dota2CurrentMapState.TeamsEntry
	26, // 26: bragi.Dota2CurrentMapState.towers:type_name -> bragi.Dota2Towers
	27, // 27: bragi.Dota2CurrentMapState.barracks:type_name -> bragi.Dota2Barracks
	45, // 28: bragi.Dota2CurrentMapTimeState.game_time:type_name -> google.protobuf.Duration
	34, // 29: bragi.Dota2PreviousMapState.teams:type_name -> bragi.Dota2PreviousMapState.TeamsEntry
	35, // 30: bragi.Dota2TeamCurrentMapStatePartialUpdate.payload:type_name -> bragi.Dota2TeamCurrentMapStatePartialUpdate.Payload
	0,  // 31: bragi.Dota2TeamCurrentMapState.faction:type_name -> bragi.Dota2Faction
	17, // 32: bragi.Dota2TeamCurrentMapState.statistics:type_name -> bragi.Dota2TeamCurrentMapStatisticsState
	36, // 33: bragi.Dota2TeamCurrentMapState.players:type_name -> bragi.Dota2TeamCurrentMapState.PlayersEntry
	37, // 34: bragi.Dota2PlayerCurrentMapStatePartialUpdate.payload:type_name -> bragi.Dota2PlayerCurrentMapStatePartialUpdate.Payload
	24, // 35: bragi.Dota2PlayerCurrentMapState.player_info:type_name -> bragi.Dota2PlayerInfoState
	21, // 36: bragi.Dota2PlayerCurrentMapState.timers:type_name -> bragi.Dota2PlayerCurrentMapTimersState
	25, // 37: bragi.Dota2PlayerCurrentMapState.statistics:type_name -> bragi.Dota2PlayerStatisticsState
	20, // 38: bragi.Dota2PlayerCurrentMapState.map_statistics:type_name -> bragi.Dota2PlayerCurrentMapStatisticsState
	30, // 39: bragi.Dota2PlayerCurrentMapState.position:type_name -> bragi.Dota2Position
	45, // 40: bragi.Dota2PlayerCurrentMapTimersState.respawn_timer:type_name -> google.protobuf.Duration
	45, // 41: bragi.Dota2PlayerCurrentMapTimersState.buyback_cooldown:type_name -> google.protobuf.Duration
	0,  // 42: bragi.Dota2TeamPreviousMapState.faction:type_name -> bragi.Dota2Faction
	38, // 43: bragi.Dota2TeamPreviousMapState.players:type_name -> bragi.Dota2TeamPreviousMapState.PlayersEntry
	24, // 44: bragi.Dota2PlayerPreviousMapState.player_info:type_name -> bragi.Dota2PlayerInfoState
	25, // 45: bragi.Dota2PlayerPreviousMapState.statistics:type_name -> bragi.Dota2PlayerStatisticsState
	28, // 46: bragi.Dota2Towers.towers:type_name -> bragi.Dota2Tower
	29, // 47: bragi.Dota2Barracks.barracks:type_name -> bragi.Dota2Barrack
	1,  // 48: bragi.Dota2Tower.lane:type_name -> bragi.Dota2Lane
	0,  // 49: bragi.Dota2Tower.faction:type_name -> bragi.Dota2Faction
	2,  // 50: bragi.Dota2Tower.tier:type_name -> bragi.Dota2TowerTier
	1,  // 51: bragi.Dota2Barrack.lane:type_name -> bragi.Dota2Lane
	0,  // 52: bragi.Dota2Barrack.faction:type_name -> bragi.Dota2Faction
	3,  // 53: bragi.Dota2Barrack.type:type_name -> bragi.Dota2BarrackType
	5,  // 54: bragi.Dota2MatchMessage.Payload.snapshot:type_name -> bragi.Dota2MatchSnapshot
	6,  // 55: bragi.Dota2MatchMessage.Payload.update:type_name -> bragi.Dota2MatchUpdate
	9,  // 56: bragi.Dota2MatchUpdate.Payload.match_state:type_name -> bragi.Dota2MatchState
	7,  // 57: bragi.Dota2MatchUpdate.Payload.partial_updates:type_name -> bragi.Dota2MatchStatePartialUpdates
	16, // 58: bragi.Dota2CurrentMapState.TeamsEntry.value:type_name -> bragi.Dota2TeamCurrentMapState
	22, // 59: bragi.Dota2PreviousMapState.TeamsEntry.value:type_name -> bragi.Dota2TeamPreviousMapState
	17, // 60: bragi.Dota2TeamCurrentMapStatePartialUpdate.Payload.statistics:type_name -> bragi.Dota2TeamCurrentMapStatisticsState
	19, // 61: bragi.Dota2TeamCurrentMapStatePartialUpdate.Payload.player_current_map_state:type_name -> bragi.Dota2PlayerCurrentMapState
	18, // 62: bragi.Dota2TeamCurrentMapStatePartialUpdate.Payload.player_current_map_partial_update:type_name -> bragi.Dota2PlayerCurrentMapStatePartialUpdate
	19, // 63: bragi.Dota2TeamCurrentMapState.PlayersEntry.value:type_name -> bragi.Dota2PlayerCurrentMapState
	24, // 64: bragi.Dota2PlayerCurrentMapStatePartialUpdate.Payload.player_info:type_name -> bragi.Dota2PlayerInfoState
	21, // 65: bragi.Dota2PlayerCurrentMapStatePartialUpdate.Payload.timers:type_name -> bragi.Dota2PlayerCurrentMapTimersState
	25, // 66: bragi.Dota2PlayerCurrentMapStatePartialUpdate.Payload.statistics:type_name -> bragi.Dota2PlayerStatisticsState
	20, // 67: bragi.Dota2PlayerCurrentMapStatePartialUpdate.Payload.map_statistics:type_name -> bragi.Dota2PlayerCurrentMapStatisticsState
	30, // 68: bragi.Dota2PlayerCurrentMapStatePartialUpdate.Payload.position:type_name -> bragi.Dota2Position
	23, // 69: bragi.Dota2TeamPreviousMapState.PlayersEntry.value:type_name -> bragi.Dota2PlayerPreviousMapState
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_bragi_dota2_proto_init() }
func file_bragi_dota2_proto_init() {
	if File_bragi_dota2_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_dota2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchStatePartialUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2CurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2CurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2CurrentMapTimeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PreviousMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2TeamCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2TeamCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2TeamCurrentMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PlayerCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PlayerCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PlayerCurrentMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PlayerCurrentMapTimersState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2TeamPreviousMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PlayerPreviousMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PlayerInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PlayerStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2Towers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2Barracks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2Tower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2Barrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchMessage_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2MatchUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2TeamCurrentMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_dota2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_dota2_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Dota2MatchStatePartialUpdate_Score)(nil),
		(*Dota2MatchStatePartialUpdate_CurrentMapState)(nil),
		(*Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil),
	}
	file_bragi_dota2_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Dota2CurrentMapStatePartialUpdate_GameTime)(nil),
		(*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState)(nil),
		(*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)(nil),
		(*Dota2CurrentMapStatePartialUpdate_Towers)(nil),
		(*Dota2CurrentMapStatePartialUpdate_Barracks)(nil),
	}
	file_bragi_dota2_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_bragi_dota2_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_bragi_dota2_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_bragi_dota2_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_bragi_dota2_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Dota2MatchMessage_Payload_Snapshot)(nil),
		(*Dota2MatchMessage_Payload_Update)(nil),
	}
	file_bragi_dota2_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Dota2MatchUpdate_Payload_MatchState)(nil),
		(*Dota2MatchUpdate_Payload_PartialUpdates)(nil),
	}
	file_bragi_dota2_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics)(nil),
		(*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState)(nil),
		(*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate)(nil),
	}
	file_bragi_dota2_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo)(nil),
		(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers)(nil),
		(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics)(nil),
		(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics)(nil),
		(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_dota2_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_dota2_proto_goTypes,
		DependencyIndexes: file_bragi_dota2_proto_depIdxs,
		EnumInfos:         file_bragi_dota2_proto_enumTypes,
		MessageInfos:      file_bragi_dota2_proto_msgTypes,
	}.Build()
	File_bragi_dota2_proto = out.File
	file_bragi_dota2_proto_rawDesc = nil
	file_bragi_dota2_proto_goTypes = nil
	file_bragi_dota2_proto_depIdxs = nil
}
