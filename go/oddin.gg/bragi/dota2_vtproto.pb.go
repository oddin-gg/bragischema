// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: bragi/dota2.proto

package bragi

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *Dota2MatchMessage_Payload) CloneVT() *Dota2MatchMessage_Payload {
	if m == nil {
		return (*Dota2MatchMessage_Payload)(nil)
	}
	r := new(Dota2MatchMessage_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isDota2MatchMessage_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchMessage_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2MatchMessage_Payload_Snapshot) CloneVT() isDota2MatchMessage_Payload_Payload {
	if m == nil {
		return (*Dota2MatchMessage_Payload_Snapshot)(nil)
	}
	r := new(Dota2MatchMessage_Payload_Snapshot)
	r.Snapshot = m.Snapshot.CloneVT()
	return r
}

func (m *Dota2MatchMessage_Payload_Update) CloneVT() isDota2MatchMessage_Payload_Payload {
	if m == nil {
		return (*Dota2MatchMessage_Payload_Update)(nil)
	}
	r := new(Dota2MatchMessage_Payload_Update)
	r.Update = m.Update.CloneVT()
	return r
}

func (m *Dota2MatchMessage) CloneVT() *Dota2MatchMessage {
	if m == nil {
		return (*Dota2MatchMessage)(nil)
	}
	r := new(Dota2MatchMessage)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2MatchSnapshot) CloneVT() *Dota2MatchSnapshot {
	if m == nil {
		return (*Dota2MatchSnapshot)(nil)
	}
	r := new(Dota2MatchSnapshot)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.MatchState = m.MatchState.CloneVT()
	r.Tournament = m.Tournament.CloneVT()
	if rhs := m.Announcements; rhs != nil {
		tmpContainer := make([]*Announcement, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Announcements = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchSnapshot) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PicksAndBansSelections_CurrentHeroSelection) CloneVT() *PicksAndBansSelections_CurrentHeroSelection {
	if m == nil {
		return (*PicksAndBansSelections_CurrentHeroSelection)(nil)
	}
	r := new(PicksAndBansSelections_CurrentHeroSelection)
	r.ActiveTeam = m.ActiveTeam
	r.Pick = m.Pick
	r.ActiveTeamTimeRemaining = m.ActiveTeamTimeRemaining
	r.RadiantBonusTime = m.RadiantBonusTime
	r.DireBonusTime = m.DireBonusTime
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PicksAndBansSelections_CurrentHeroSelection) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PicksAndBansSelections_PickOrBan) CloneVT() *PicksAndBansSelections_PickOrBan {
	if m == nil {
		return (*PicksAndBansSelections_PickOrBan)(nil)
	}
	r := new(PicksAndBansSelections_PickOrBan)
	r.Team = m.Team
	r.Pick = m.Pick
	r.HeroSteamId = m.HeroSteamId
	r.HeroKey = m.HeroKey
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PicksAndBansSelections_PickOrBan) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *PicksAndBansSelections) CloneVT() *PicksAndBansSelections {
	if m == nil {
		return (*PicksAndBansSelections)(nil)
	}
	r := new(PicksAndBansSelections)
	r.CurrentHeroSelection = m.CurrentHeroSelection.CloneVT()
	if rhs := m.PicksAndBans; rhs != nil {
		tmpContainer := make([]*PicksAndBansSelections_PickOrBan, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PicksAndBans = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PicksAndBansSelections) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2MatchUpdate_Payload) CloneVT() *Dota2MatchUpdate_Payload {
	if m == nil {
		return (*Dota2MatchUpdate_Payload)(nil)
	}
	r := new(Dota2MatchUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isDota2MatchUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2MatchUpdate_Payload_MatchState) CloneVT() isDota2MatchUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2MatchUpdate_Payload_MatchState)(nil)
	}
	r := new(Dota2MatchUpdate_Payload_MatchState)
	r.MatchState = m.MatchState.CloneVT()
	return r
}

func (m *Dota2MatchUpdate_Payload_PartialUpdates) CloneVT() isDota2MatchUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2MatchUpdate_Payload_PartialUpdates)(nil)
	}
	r := new(Dota2MatchUpdate_Payload_PartialUpdates)
	r.PartialUpdates = m.PartialUpdates.CloneVT()
	return r
}

func (m *Dota2MatchUpdate) CloneVT() *Dota2MatchUpdate {
	if m == nil {
		return (*Dota2MatchUpdate)(nil)
	}
	r := new(Dota2MatchUpdate)
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2MatchStatePartialUpdates) CloneVT() *Dota2MatchStatePartialUpdates {
	if m == nil {
		return (*Dota2MatchStatePartialUpdates)(nil)
	}
	r := new(Dota2MatchStatePartialUpdates)
	if rhs := m.Updates; rhs != nil {
		tmpContainer := make([]*Dota2MatchStatePartialUpdate, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Updates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchStatePartialUpdates) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2MatchStatePartialUpdate) CloneVT() *Dota2MatchStatePartialUpdate {
	if m == nil {
		return (*Dota2MatchStatePartialUpdate)(nil)
	}
	r := new(Dota2MatchStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isDota2MatchStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2MatchStatePartialUpdate_Score) CloneVT() isDota2MatchStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2MatchStatePartialUpdate_Score)(nil)
	}
	r := new(Dota2MatchStatePartialUpdate_Score)
	r.Score = m.Score.CloneVT()
	return r
}

func (m *Dota2MatchStatePartialUpdate_CurrentMapState) CloneVT() isDota2MatchStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2MatchStatePartialUpdate_CurrentMapState)(nil)
	}
	r := new(Dota2MatchStatePartialUpdate_CurrentMapState)
	r.CurrentMapState = m.CurrentMapState.CloneVT()
	return r
}

func (m *Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate) CloneVT() isDota2MatchStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil)
	}
	r := new(Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	r.CurrentMapStatePartialUpdate = m.CurrentMapStatePartialUpdate.CloneVT()
	return r
}

func (m *Dota2MatchStatePartialUpdate_PicksAndBansSelections) CloneVT() isDota2MatchStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2MatchStatePartialUpdate_PicksAndBansSelections)(nil)
	}
	r := new(Dota2MatchStatePartialUpdate_PicksAndBansSelections)
	r.PicksAndBansSelections = m.PicksAndBansSelections.CloneVT()
	return r
}

func (m *Dota2MatchState) CloneVT() *Dota2MatchState {
	if m == nil {
		return (*Dota2MatchState)(nil)
	}
	r := new(Dota2MatchState)
	r.MatchUrn = m.MatchUrn
	r.MatchType = m.MatchType
	r.HomeTeam = m.HomeTeam.CloneVT()
	r.AwayTeam = m.AwayTeam.CloneVT()
	r.Score = m.Score.CloneVT()
	r.MatchStatus = m.MatchStatus
	r.CurrentMap = m.CurrentMap.CloneVT()
	r.PicksAndBansSelections = m.PicksAndBansSelections.CloneVT()
	if rhs := m.PreviousMaps; rhs != nil {
		tmpContainer := make([]*Dota2PreviousMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PreviousMaps = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2MatchScoreState) CloneVT() *Dota2MatchScoreState {
	if m == nil {
		return (*Dota2MatchScoreState)(nil)
	}
	r := new(Dota2MatchScoreState)
	r.HomeScore = m.HomeScore
	r.AwayScore = m.AwayScore
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2MatchScoreState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2CurrentMapStatePartialUpdate) CloneVT() *Dota2CurrentMapStatePartialUpdate {
	if m == nil {
		return (*Dota2CurrentMapStatePartialUpdate)(nil)
	}
	r := new(Dota2CurrentMapStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isDota2CurrentMapStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2CurrentMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2CurrentMapStatePartialUpdate_GameTime) CloneVT() isDota2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2CurrentMapStatePartialUpdate_GameTime)(nil)
	}
	r := new(Dota2CurrentMapStatePartialUpdate_GameTime)
	r.GameTime = m.GameTime.CloneVT()
	return r
}

func (m *Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState) CloneVT() isDota2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState)(nil)
	}
	r := new(Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState)
	r.TeamCurrentMapState = m.TeamCurrentMapState.CloneVT()
	return r
}

func (m *Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) CloneVT() isDota2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)(nil)
	}
	r := new(Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)
	r.TeamCurrentMapPartialUpdate = m.TeamCurrentMapPartialUpdate.CloneVT()
	return r
}

func (m *Dota2CurrentMapStatePartialUpdate_Towers) CloneVT() isDota2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2CurrentMapStatePartialUpdate_Towers)(nil)
	}
	r := new(Dota2CurrentMapStatePartialUpdate_Towers)
	r.Towers = m.Towers.CloneVT()
	return r
}

func (m *Dota2CurrentMapStatePartialUpdate_Barracks) CloneVT() isDota2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2CurrentMapStatePartialUpdate_Barracks)(nil)
	}
	r := new(Dota2CurrentMapStatePartialUpdate_Barracks)
	r.Barracks = m.Barracks.CloneVT()
	return r
}

func (m *Dota2CurrentMapStatePartialUpdate_Roshan) CloneVT() isDota2CurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*Dota2CurrentMapStatePartialUpdate_Roshan)(nil)
	}
	r := new(Dota2CurrentMapStatePartialUpdate_Roshan)
	r.Roshan = m.Roshan.CloneVT()
	return r
}

func (m *Dota2CurrentMapState) CloneVT() *Dota2CurrentMapState {
	if m == nil {
		return (*Dota2CurrentMapState)(nil)
	}
	r := new(Dota2CurrentMapState)
	r.MapOrder = m.MapOrder
	r.MapPaused = m.MapPaused
	r.GameTime = m.GameTime.CloneVT()
	r.Towers = m.Towers.CloneVT()
	r.Barracks = m.Barracks.CloneVT()
	r.Roshan = m.Roshan.CloneVT()
	r.DayTime = m.DayTime
	if rhs := m.Teams; rhs != nil {
		tmpContainer := make(map[string]*Dota2TeamCurrentMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Teams = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2CurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2CurrentMapTimeState) CloneVT() *Dota2CurrentMapTimeState {
	if m == nil {
		return (*Dota2CurrentMapTimeState)(nil)
	}
	r := new(Dota2CurrentMapTimeState)
	r.GameTime = (*durationpb.Duration)((*durationpb1.Duration)(m.GameTime).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2CurrentMapTimeState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PreviousMapState) CloneVT() *Dota2PreviousMapState {
	if m == nil {
		return (*Dota2PreviousMapState)(nil)
	}
	r := new(Dota2PreviousMapState)
	r.MapOrder = m.MapOrder
	if rhs := m.Teams; rhs != nil {
		tmpContainer := make(map[string]*Dota2TeamPreviousMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Teams = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PreviousMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2TeamCurrentMapStatePartialUpdate_Payload) CloneVT() *Dota2TeamCurrentMapStatePartialUpdate_Payload {
	if m == nil {
		return (*Dota2TeamCurrentMapStatePartialUpdate_Payload)(nil)
	}
	r := new(Dota2TeamCurrentMapStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2TeamCurrentMapStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics) CloneVT() isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics)(nil)
	}
	r := new(Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics)
	r.Statistics = m.Statistics.CloneVT()
	return r
}

func (m *Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState) CloneVT() isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState)(nil)
	}
	r := new(Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState)
	r.PlayerCurrentMapState = m.PlayerCurrentMapState.CloneVT()
	return r
}

func (m *Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate) CloneVT() isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate)(nil)
	}
	r := new(Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate)
	r.PlayerCurrentMapPartialUpdate = m.PlayerCurrentMapPartialUpdate.CloneVT()
	return r
}

func (m *Dota2TeamCurrentMapStatePartialUpdate) CloneVT() *Dota2TeamCurrentMapStatePartialUpdate {
	if m == nil {
		return (*Dota2TeamCurrentMapStatePartialUpdate)(nil)
	}
	r := new(Dota2TeamCurrentMapStatePartialUpdate)
	r.TeamUrn = m.TeamUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2TeamCurrentMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2TeamCurrentMapState) CloneVT() *Dota2TeamCurrentMapState {
	if m == nil {
		return (*Dota2TeamCurrentMapState)(nil)
	}
	r := new(Dota2TeamCurrentMapState)
	r.TeamUrn = m.TeamUrn
	r.Faction = m.Faction
	r.Statistics = m.Statistics.CloneVT()
	if rhs := m.Won; rhs != nil {
		tmpVal := *rhs
		r.Won = &tmpVal
	}
	if rhs := m.Players; rhs != nil {
		tmpContainer := make(map[string]*Dota2PlayerCurrentMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Players = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2TeamCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2TeamCurrentMapStatisticsState) CloneVT() *Dota2TeamCurrentMapStatisticsState {
	if m == nil {
		return (*Dota2TeamCurrentMapStatisticsState)(nil)
	}
	r := new(Dota2TeamCurrentMapStatisticsState)
	r.TeamUrn = m.TeamUrn
	r.Barracks = m.Barracks
	r.Kills = m.Kills
	r.NetWorth = m.NetWorth
	r.Roshans = m.Roshans
	r.Towers = m.Towers
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2TeamCurrentMapStatisticsState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload) CloneVT() *Dota2PlayerCurrentMapStatePartialUpdate_Payload {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate_Payload)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo) CloneVT() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo)
	r.PlayerInfo = m.PlayerInfo.CloneVT()
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers) CloneVT() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers)
	r.Timers = m.Timers.CloneVT()
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics) CloneVT() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics)
	r.Statistics = m.Statistics.CloneVT()
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics) CloneVT() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics)
	r.MapStatistics = m.MapStatistics.CloneVT()
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position) CloneVT() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position)
	r.Position = m.Position.CloneVT()
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Items) CloneVT() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Items)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate_Payload_Items)
	r.Items = m.Items.CloneVT()
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Abilities) CloneVT() isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Abilities)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate_Payload_Abilities)
	r.Abilities = m.Abilities.CloneVT()
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate) CloneVT() *Dota2PlayerCurrentMapStatePartialUpdate {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatePartialUpdate)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatePartialUpdate)
	r.PlayerUrn = m.PlayerUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PlayerCurrentMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PlayerCurrentMapState) CloneVT() *Dota2PlayerCurrentMapState {
	if m == nil {
		return (*Dota2PlayerCurrentMapState)(nil)
	}
	r := new(Dota2PlayerCurrentMapState)
	r.PlayerUrn = m.PlayerUrn
	r.PlayerInfo = m.PlayerInfo.CloneVT()
	r.Timers = m.Timers.CloneVT()
	r.Statistics = m.Statistics.CloneVT()
	r.MapStatistics = m.MapStatistics.CloneVT()
	r.Position = m.Position.CloneVT()
	r.Items = m.Items.CloneVT()
	r.Abilities = m.Abilities.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PlayerCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PlayerCurrentMapStatisticsState) CloneVT() *Dota2PlayerCurrentMapStatisticsState {
	if m == nil {
		return (*Dota2PlayerCurrentMapStatisticsState)(nil)
	}
	r := new(Dota2PlayerCurrentMapStatisticsState)
	r.PlayerUrn = m.PlayerUrn
	r.Alive = m.Alive
	r.Health = m.Health
	r.MaxHealth = m.MaxHealth
	r.CurrentGold = m.CurrentGold
	r.NetWorth = m.NetWorth
	r.BuybackCost = m.BuybackCost
	r.HasBuyback = m.HasBuyback
	r.HasAegis = m.HasAegis
	r.Mana = m.Mana
	r.MaxMana = m.MaxMana
	r.GoldReliable = m.GoldReliable
	r.GoldUnreliable = m.GoldUnreliable
	r.Denies = m.Denies
	r.LastHits = m.LastHits
	r.Level = m.Level
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PlayerCurrentMapStatisticsState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PlayerCurrentMapTimersState) CloneVT() *Dota2PlayerCurrentMapTimersState {
	if m == nil {
		return (*Dota2PlayerCurrentMapTimersState)(nil)
	}
	r := new(Dota2PlayerCurrentMapTimersState)
	r.PlayerUrn = m.PlayerUrn
	r.RespawnTimer = (*durationpb.Duration)((*durationpb1.Duration)(m.RespawnTimer).CloneVT())
	r.BuybackCooldown = (*durationpb.Duration)((*durationpb1.Duration)(m.BuybackCooldown).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PlayerCurrentMapTimersState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2TeamPreviousMapState) CloneVT() *Dota2TeamPreviousMapState {
	if m == nil {
		return (*Dota2TeamPreviousMapState)(nil)
	}
	r := new(Dota2TeamPreviousMapState)
	r.TeamUrn = m.TeamUrn
	r.Faction = m.Faction
	r.Barracks = m.Barracks
	r.Kills = m.Kills
	r.NetWorth = m.NetWorth
	r.Roshans = m.Roshans
	r.Towers = m.Towers
	if rhs := m.Won; rhs != nil {
		tmpVal := *rhs
		r.Won = &tmpVal
	}
	if rhs := m.Players; rhs != nil {
		tmpContainer := make(map[string]*Dota2PlayerPreviousMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Players = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2TeamPreviousMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PlayerPreviousMapState) CloneVT() *Dota2PlayerPreviousMapState {
	if m == nil {
		return (*Dota2PlayerPreviousMapState)(nil)
	}
	r := new(Dota2PlayerPreviousMapState)
	r.PlayerUrn = m.PlayerUrn
	r.PlayerInfo = m.PlayerInfo.CloneVT()
	r.Statistics = m.Statistics.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PlayerPreviousMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PlayerInfoState) CloneVT() *Dota2PlayerInfoState {
	if m == nil {
		return (*Dota2PlayerInfoState)(nil)
	}
	r := new(Dota2PlayerInfoState)
	r.PlayerUrn = m.PlayerUrn
	r.SlotId = m.SlotId
	r.ExtName = m.ExtName
	if rhs := m.HeroId; rhs != nil {
		tmpVal := *rhs
		r.HeroId = &tmpVal
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PlayerInfoState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2PlayerStatisticsState) CloneVT() *Dota2PlayerStatisticsState {
	if m == nil {
		return (*Dota2PlayerStatisticsState)(nil)
	}
	r := new(Dota2PlayerStatisticsState)
	r.PlayerUrn = m.PlayerUrn
	r.Kills = m.Kills
	r.Deaths = m.Deaths
	r.Assists = m.Assists
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2PlayerStatisticsState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Towers) CloneVT() *Dota2Towers {
	if m == nil {
		return (*Dota2Towers)(nil)
	}
	r := new(Dota2Towers)
	if rhs := m.Towers; rhs != nil {
		tmpContainer := make([]*Dota2Tower, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Towers = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Towers) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Barracks) CloneVT() *Dota2Barracks {
	if m == nil {
		return (*Dota2Barracks)(nil)
	}
	r := new(Dota2Barracks)
	if rhs := m.Barracks; rhs != nil {
		tmpContainer := make([]*Dota2Barrack, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Barracks = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Barracks) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Abilities) CloneVT() *Dota2Abilities {
	if m == nil {
		return (*Dota2Abilities)(nil)
	}
	r := new(Dota2Abilities)
	if rhs := m.Abilities; rhs != nil {
		tmpContainer := make([]*Dota2Ability, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Abilities = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Abilities) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Items) CloneVT() *Dota2Items {
	if m == nil {
		return (*Dota2Items)(nil)
	}
	r := new(Dota2Items)
	if rhs := m.Items; rhs != nil {
		tmpContainer := make([]*Dota2Item, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Items = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Items) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Item) CloneVT() *Dota2Item {
	if m == nil {
		return (*Dota2Item)(nil)
	}
	r := new(Dota2Item)
	r.Name = m.Name
	r.Position = m.Position
	r.Level = m.Level
	if rhs := m.Cooldown; rhs != nil {
		tmpVal := *rhs
		r.Cooldown = &tmpVal
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Item) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Ability) CloneVT() *Dota2Ability {
	if m == nil {
		return (*Dota2Ability)(nil)
	}
	r := new(Dota2Ability)
	r.Name = m.Name
	r.Ultimate = m.Ultimate
	r.Passive = m.Passive
	r.CanCast = m.CanCast
	if rhs := m.Cooldown; rhs != nil {
		tmpVal := *rhs
		r.Cooldown = &tmpVal
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Ability) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Roshan) CloneVT() *Roshan {
	if m == nil {
		return (*Roshan)(nil)
	}
	r := new(Roshan)
	r.Alive = m.Alive
	r.RespawnTime = m.RespawnTime
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Roshan) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Tower) CloneVT() *Dota2Tower {
	if m == nil {
		return (*Dota2Tower)(nil)
	}
	r := new(Dota2Tower)
	r.Lane = m.Lane
	r.Faction = m.Faction
	r.Tier = m.Tier
	r.Alive = m.Alive
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Tower) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Barrack) CloneVT() *Dota2Barrack {
	if m == nil {
		return (*Dota2Barrack)(nil)
	}
	r := new(Dota2Barrack)
	r.Lane = m.Lane
	r.Faction = m.Faction
	r.Type = m.Type
	r.Alive = m.Alive
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Barrack) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *Dota2Position) CloneVT() *Dota2Position {
	if m == nil {
		return (*Dota2Position)(nil)
	}
	r := new(Dota2Position)
	r.X = m.X
	r.Y = m.Y
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Dota2Position) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *Dota2MatchMessage_Payload) EqualVT(that *Dota2MatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isDota2MatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchMessage_Payload_Snapshot) EqualVT(thatIface isDota2MatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2MatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &Dota2MatchSnapshot{}
		}
		if q == nil {
			q = &Dota2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchMessage_Payload_Update) EqualVT(thatIface isDota2MatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2MatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &Dota2MatchUpdate{}
		}
		if q == nil {
			q = &Dota2MatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchMessage) EqualVT(that *Dota2MatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchSnapshot) EqualVT(that *Dota2MatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelections_CurrentHeroSelection) EqualVT(that *PicksAndBansSelections_CurrentHeroSelection) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ActiveTeam != that.ActiveTeam {
		return false
	}
	if this.Pick != that.Pick {
		return false
	}
	if this.ActiveTeamTimeRemaining != that.ActiveTeamTimeRemaining {
		return false
	}
	if this.RadiantBonusTime != that.RadiantBonusTime {
		return false
	}
	if this.DireBonusTime != that.DireBonusTime {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelections_CurrentHeroSelection) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelections_CurrentHeroSelection)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelections_PickOrBan) EqualVT(that *PicksAndBansSelections_PickOrBan) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Team != that.Team {
		return false
	}
	if this.Pick != that.Pick {
		return false
	}
	if this.HeroSteamId != that.HeroSteamId {
		return false
	}
	if this.HeroKey != that.HeroKey {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelections_PickOrBan) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelections_PickOrBan)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelections) EqualVT(that *PicksAndBansSelections) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.CurrentHeroSelection.EqualVT(that.CurrentHeroSelection) {
		return false
	}
	if len(this.PicksAndBans) != len(that.PicksAndBans) {
		return false
	}
	for i, vx := range this.PicksAndBans {
		vy := that.PicksAndBans[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PicksAndBansSelections_PickOrBan{}
			}
			if q == nil {
				q = &PicksAndBansSelections_PickOrBan{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelections) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelections)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchUpdate_Payload) EqualVT(that *Dota2MatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isDota2MatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchUpdate_Payload_MatchState) EqualVT(thatIface isDota2MatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2MatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &Dota2MatchState{}
		}
		if q == nil {
			q = &Dota2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isDota2MatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2MatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &Dota2MatchStatePartialUpdates{}
		}
		if q == nil {
			q = &Dota2MatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchUpdate) EqualVT(that *Dota2MatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchStatePartialUpdates) EqualVT(that *Dota2MatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2MatchStatePartialUpdate{}
			}
			if q == nil {
				q = &Dota2MatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchStatePartialUpdate) EqualVT(that *Dota2MatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isDota2MatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchStatePartialUpdate_Score) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &Dota2MatchScoreState{}
		}
		if q == nil {
			q = &Dota2MatchScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchStatePartialUpdate_CurrentMapState) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_CurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapState, that.CurrentMapState; p != q {
		if p == nil {
			p = &Dota2CurrentMapState{}
		}
		if q == nil {
			q = &Dota2CurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapStatePartialUpdate, that.CurrentMapStatePartialUpdate; p != q {
		if p == nil {
			p = &Dota2CurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &Dota2CurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchStatePartialUpdate_PicksAndBansSelections) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_PicksAndBansSelections)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PicksAndBansSelections, that.PicksAndBansSelections; p != q {
		if p == nil {
			p = &PicksAndBansSelections{}
		}
		if q == nil {
			q = &PicksAndBansSelections{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchState) EqualVT(that *Dota2MatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.CurrentMap.EqualVT(that.CurrentMap) {
		return false
	}
	if len(this.PreviousMaps) != len(that.PreviousMaps) {
		return false
	}
	for i, vx := range this.PreviousMaps {
		vy := that.PreviousMaps[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2PreviousMapState{}
			}
			if q == nil {
				q = &Dota2PreviousMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.PicksAndBansSelections.EqualVT(that.PicksAndBansSelections) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchScoreState) EqualVT(that *Dota2MatchScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2CurrentMapStatePartialUpdate) EqualVT(that *Dota2CurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isDota2CurrentMapStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2CurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2CurrentMapStatePartialUpdate_GameTime) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_GameTime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GameTime, that.GameTime; p != q {
		if p == nil {
			p = &Dota2CurrentMapTimeState{}
		}
		if q == nil {
			q = &Dota2CurrentMapTimeState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapState, that.TeamCurrentMapState; p != q {
		if p == nil {
			p = &Dota2TeamCurrentMapState{}
		}
		if q == nil {
			q = &Dota2TeamCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapPartialUpdate, that.TeamCurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &Dota2TeamCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &Dota2TeamCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_Towers) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_Towers)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Towers, that.Towers; p != q {
		if p == nil {
			p = &Dota2Towers{}
		}
		if q == nil {
			q = &Dota2Towers{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_Barracks) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_Barracks)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Barracks, that.Barracks; p != q {
		if p == nil {
			p = &Dota2Barracks{}
		}
		if q == nil {
			q = &Dota2Barracks{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_Roshan) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_Roshan)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Roshan, that.Roshan; p != q {
		if p == nil {
			p = &Roshan{}
		}
		if q == nil {
			q = &Roshan{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapState) EqualVT(that *Dota2CurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if this.MapPaused != that.MapPaused {
		return false
	}
	if !this.GameTime.EqualVT(that.GameTime) {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2TeamCurrentMapState{}
			}
			if q == nil {
				q = &Dota2TeamCurrentMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Towers.EqualVT(that.Towers) {
		return false
	}
	if !this.Barracks.EqualVT(that.Barracks) {
		return false
	}
	if !this.Roshan.EqualVT(that.Roshan) {
		return false
	}
	if this.DayTime != that.DayTime {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2CurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2CurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2CurrentMapTimeState) EqualVT(that *Dota2CurrentMapTimeState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.GameTime).EqualVT((*durationpb1.Duration)(that.GameTime)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2CurrentMapTimeState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2CurrentMapTimeState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PreviousMapState) EqualVT(that *Dota2PreviousMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2TeamPreviousMapState{}
			}
			if q == nil {
				q = &Dota2TeamPreviousMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PreviousMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PreviousMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload) EqualVT(that *Dota2TeamCurrentMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamCurrentMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &Dota2TeamCurrentMapStatisticsState{}
		}
		if q == nil {
			q = &Dota2TeamCurrentMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState) EqualVT(thatIface isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerCurrentMapState, that.PlayerCurrentMapState; p != q {
		if p == nil {
			p = &Dota2PlayerCurrentMapState{}
		}
		if q == nil {
			q = &Dota2PlayerCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate) EqualVT(thatIface isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerCurrentMapPartialUpdate, that.PlayerCurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &Dota2PlayerCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &Dota2PlayerCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2TeamCurrentMapStatePartialUpdate) EqualVT(that *Dota2TeamCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamCurrentMapState) EqualVT(that *Dota2TeamCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Faction != that.Faction {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if p, q := this.Won, that.Won; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if len(this.Players) != len(that.Players) {
		return false
	}
	for i, vx := range this.Players {
		vy, ok := that.Players[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2PlayerCurrentMapState{}
			}
			if q == nil {
				q = &Dota2PlayerCurrentMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamCurrentMapStatisticsState) EqualVT(that *Dota2TeamCurrentMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Barracks != that.Barracks {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.NetWorth != that.NetWorth {
		return false
	}
	if this.Roshans != that.Roshans {
		return false
	}
	if this.Towers != that.Towers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamCurrentMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamCurrentMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload) EqualVT(that *Dota2PlayerCurrentMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerInfo, that.PlayerInfo; p != q {
		if p == nil {
			p = &Dota2PlayerInfoState{}
		}
		if q == nil {
			q = &Dota2PlayerInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Timers, that.Timers; p != q {
		if p == nil {
			p = &Dota2PlayerCurrentMapTimersState{}
		}
		if q == nil {
			q = &Dota2PlayerCurrentMapTimersState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &Dota2PlayerStatisticsState{}
		}
		if q == nil {
			q = &Dota2PlayerStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MapStatistics, that.MapStatistics; p != q {
		if p == nil {
			p = &Dota2PlayerCurrentMapStatisticsState{}
		}
		if q == nil {
			q = &Dota2PlayerCurrentMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Position, that.Position; p != q {
		if p == nil {
			p = &Dota2Position{}
		}
		if q == nil {
			q = &Dota2Position{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Items) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Items)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Items, that.Items; p != q {
		if p == nil {
			p = &Dota2Items{}
		}
		if q == nil {
			q = &Dota2Items{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Abilities) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Abilities)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Abilities, that.Abilities; p != q {
		if p == nil {
			p = &Dota2Abilities{}
		}
		if q == nil {
			q = &Dota2Abilities{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate) EqualVT(that *Dota2PlayerCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapState) EqualVT(that *Dota2PlayerCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.PlayerInfo.EqualVT(that.PlayerInfo) {
		return false
	}
	if !this.Timers.EqualVT(that.Timers) {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if !this.MapStatistics.EqualVT(that.MapStatistics) {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !this.Items.EqualVT(that.Items) {
		return false
	}
	if !this.Abilities.EqualVT(that.Abilities) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapStatisticsState) EqualVT(that *Dota2PlayerCurrentMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	if this.Health != that.Health {
		return false
	}
	if this.MaxHealth != that.MaxHealth {
		return false
	}
	if this.CurrentGold != that.CurrentGold {
		return false
	}
	if this.NetWorth != that.NetWorth {
		return false
	}
	if this.BuybackCost != that.BuybackCost {
		return false
	}
	if this.HasBuyback != that.HasBuyback {
		return false
	}
	if this.HasAegis != that.HasAegis {
		return false
	}
	if this.Mana != that.Mana {
		return false
	}
	if this.MaxMana != that.MaxMana {
		return false
	}
	if this.GoldReliable != that.GoldReliable {
		return false
	}
	if this.GoldUnreliable != that.GoldUnreliable {
		return false
	}
	if this.Denies != that.Denies {
		return false
	}
	if this.LastHits != that.LastHits {
		return false
	}
	if this.Level != that.Level {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapTimersState) EqualVT(that *Dota2PlayerCurrentMapTimersState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !(*durationpb1.Duration)(this.RespawnTimer).EqualVT((*durationpb1.Duration)(that.RespawnTimer)) {
		return false
	}
	if !(*durationpb1.Duration)(this.BuybackCooldown).EqualVT((*durationpb1.Duration)(that.BuybackCooldown)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapTimersState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapTimersState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamPreviousMapState) EqualVT(that *Dota2TeamPreviousMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Faction != that.Faction {
		return false
	}
	if this.Barracks != that.Barracks {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.NetWorth != that.NetWorth {
		return false
	}
	if this.Roshans != that.Roshans {
		return false
	}
	if this.Towers != that.Towers {
		return false
	}
	if p, q := this.Won, that.Won; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if len(this.Players) != len(that.Players) {
		return false
	}
	for i, vx := range this.Players {
		vy, ok := that.Players[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2PlayerPreviousMapState{}
			}
			if q == nil {
				q = &Dota2PlayerPreviousMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamPreviousMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamPreviousMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerPreviousMapState) EqualVT(that *Dota2PlayerPreviousMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.PlayerInfo.EqualVT(that.PlayerInfo) {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerPreviousMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerPreviousMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerInfoState) EqualVT(that *Dota2PlayerInfoState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.SlotId != that.SlotId {
		return false
	}
	if this.ExtName != that.ExtName {
		return false
	}
	if p, q := this.HeroId, that.HeroId; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerInfoState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerInfoState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerStatisticsState) EqualVT(that *Dota2PlayerStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.Deaths != that.Deaths {
		return false
	}
	if this.Assists != that.Assists {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Towers) EqualVT(that *Dota2Towers) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Towers) != len(that.Towers) {
		return false
	}
	for i, vx := range this.Towers {
		vy := that.Towers[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2Tower{}
			}
			if q == nil {
				q = &Dota2Tower{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Towers) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Towers)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Barracks) EqualVT(that *Dota2Barracks) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Barracks) != len(that.Barracks) {
		return false
	}
	for i, vx := range this.Barracks {
		vy := that.Barracks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2Barrack{}
			}
			if q == nil {
				q = &Dota2Barrack{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Barracks) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Barracks)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Abilities) EqualVT(that *Dota2Abilities) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Abilities) != len(that.Abilities) {
		return false
	}
	for i, vx := range this.Abilities {
		vy := that.Abilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2Ability{}
			}
			if q == nil {
				q = &Dota2Ability{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Abilities) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Abilities)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Items) EqualVT(that *Dota2Items) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Items) != len(that.Items) {
		return false
	}
	for i, vx := range this.Items {
		vy := that.Items[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2Item{}
			}
			if q == nil {
				q = &Dota2Item{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Items) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Items)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Item) EqualVT(that *Dota2Item) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if p, q := this.Cooldown, that.Cooldown; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if this.Position != that.Position {
		return false
	}
	if this.Level != that.Level {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Item) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Item)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Ability) EqualVT(that *Dota2Ability) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if p, q := this.Cooldown, that.Cooldown; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if this.Ultimate != that.Ultimate {
		return false
	}
	if this.Passive != that.Passive {
		return false
	}
	if this.CanCast != that.CanCast {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Ability) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Ability)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Roshan) EqualVT(that *Roshan) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	if this.RespawnTime != that.RespawnTime {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Roshan) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Roshan)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Tower) EqualVT(that *Dota2Tower) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Lane != that.Lane {
		return false
	}
	if this.Faction != that.Faction {
		return false
	}
	if this.Tier != that.Tier {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Tower) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Tower)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Barrack) EqualVT(that *Dota2Barrack) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Lane != that.Lane {
		return false
	}
	if this.Faction != that.Faction {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Barrack) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Barrack)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Position) EqualVT(that *Dota2Position) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.X != that.X {
		return false
	}
	if this.Y != that.Y {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Position) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Position)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
