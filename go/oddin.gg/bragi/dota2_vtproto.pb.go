// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.1-0.20241121165744-79df5c4772f2
// source: bragi/dota2.proto

package bragi

import (
	durationpb "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (this *Dota2MatchMessage_Payload) EqualVT(that *Dota2MatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isDota2MatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchMessage_Payload_Snapshot) EqualVT(thatIface isDota2MatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2MatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &Dota2MatchSnapshot{}
		}
		if q == nil {
			q = &Dota2MatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchMessage_Payload_Update) EqualVT(thatIface isDota2MatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2MatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &Dota2MatchUpdate{}
		}
		if q == nil {
			q = &Dota2MatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchMessage) EqualVT(that *Dota2MatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchSnapshot) EqualVT(that *Dota2MatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelectionsPerTeam_HeroSelection) EqualVT(that *PicksAndBansSelectionsPerTeam_HeroSelection) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HeroSteamId != that.HeroSteamId {
		return false
	}
	if this.HeroKey != that.HeroKey {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelectionsPerTeam_HeroSelection) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelectionsPerTeam_HeroSelection)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelectionsPerTeam_RadiantSelections) EqualVT(that *PicksAndBansSelectionsPerTeam_RadiantSelections) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Bans) != len(that.Bans) {
		return false
	}
	for i, vx := range this.Bans {
		vy := that.Bans[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PicksAndBansSelectionsPerTeam_HeroSelection{}
			}
			if q == nil {
				q = &PicksAndBansSelectionsPerTeam_HeroSelection{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Picks) != len(that.Picks) {
		return false
	}
	for i, vx := range this.Picks {
		vy := that.Picks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PicksAndBansSelectionsPerTeam_HeroSelection{}
			}
			if q == nil {
				q = &PicksAndBansSelectionsPerTeam_HeroSelection{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelectionsPerTeam_RadiantSelections) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelectionsPerTeam_RadiantSelections)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelectionsPerTeam_DireSelections) EqualVT(that *PicksAndBansSelectionsPerTeam_DireSelections) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Bans) != len(that.Bans) {
		return false
	}
	for i, vx := range this.Bans {
		vy := that.Bans[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PicksAndBansSelectionsPerTeam_HeroSelection{}
			}
			if q == nil {
				q = &PicksAndBansSelectionsPerTeam_HeroSelection{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Picks) != len(that.Picks) {
		return false
	}
	for i, vx := range this.Picks {
		vy := that.Picks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PicksAndBansSelectionsPerTeam_HeroSelection{}
			}
			if q == nil {
				q = &PicksAndBansSelectionsPerTeam_HeroSelection{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelectionsPerTeam_DireSelections) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelectionsPerTeam_DireSelections)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelectionsPerTeam) EqualVT(that *PicksAndBansSelectionsPerTeam) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.State != that.State {
		return false
	}
	if this.ActiveTeam != that.ActiveTeam {
		return false
	}
	if this.SelectionType != that.SelectionType {
		return false
	}
	if this.ActiveTeamTimeRemaining != that.ActiveTeamTimeRemaining {
		return false
	}
	if this.RadiantBonusTime != that.RadiantBonusTime {
		return false
	}
	if this.DireBonusTime != that.DireBonusTime {
		return false
	}
	if !this.RadiantSelections.EqualVT(that.RadiantSelections) {
		return false
	}
	if !this.DireSelections.EqualVT(that.DireSelections) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelectionsPerTeam) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelectionsPerTeam)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelections_CurrentHeroSelection) EqualVT(that *PicksAndBansSelections_CurrentHeroSelection) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ActiveTeam != that.ActiveTeam {
		return false
	}
	if this.Pick != that.Pick {
		return false
	}
	if this.ActiveTeamTimeRemaining != that.ActiveTeamTimeRemaining {
		return false
	}
	if this.RadiantBonusTime != that.RadiantBonusTime {
		return false
	}
	if this.DireBonusTime != that.DireBonusTime {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelections_CurrentHeroSelection) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelections_CurrentHeroSelection)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelections_PickOrBan) EqualVT(that *PicksAndBansSelections_PickOrBan) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Team != that.Team {
		return false
	}
	if this.Pick != that.Pick {
		return false
	}
	if this.HeroSteamId != that.HeroSteamId {
		return false
	}
	if this.HeroKey != that.HeroKey {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelections_PickOrBan) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelections_PickOrBan)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PicksAndBansSelections) EqualVT(that *PicksAndBansSelections) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.CurrentHeroSelection.EqualVT(that.CurrentHeroSelection) {
		return false
	}
	if len(this.PicksAndBans) != len(that.PicksAndBans) {
		return false
	}
	for i, vx := range this.PicksAndBans {
		vy := that.PicksAndBans[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &PicksAndBansSelections_PickOrBan{}
			}
			if q == nil {
				q = &PicksAndBansSelections_PickOrBan{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.State != that.State {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PicksAndBansSelections) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*PicksAndBansSelections)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchUpdate_Payload) EqualVT(that *Dota2MatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isDota2MatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchUpdate_Payload_MatchState) EqualVT(thatIface isDota2MatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2MatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &Dota2MatchState{}
		}
		if q == nil {
			q = &Dota2MatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isDota2MatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2MatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &Dota2MatchStatePartialUpdates{}
		}
		if q == nil {
			q = &Dota2MatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchUpdate) EqualVT(that *Dota2MatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchStatePartialUpdates) EqualVT(that *Dota2MatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2MatchStatePartialUpdate{}
			}
			if q == nil {
				q = &Dota2MatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchStatePartialUpdate) EqualVT(that *Dota2MatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isDota2MatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchStatePartialUpdate_Score) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &Dota2MatchScoreState{}
		}
		if q == nil {
			q = &Dota2MatchScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchStatePartialUpdate_CurrentMapState) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_CurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapState, that.CurrentMapState; p != q {
		if p == nil {
			p = &Dota2CurrentMapState{}
		}
		if q == nil {
			q = &Dota2CurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapStatePartialUpdate, that.CurrentMapStatePartialUpdate; p != q {
		if p == nil {
			p = &Dota2CurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &Dota2CurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchStatePartialUpdate_PicksAndBansSelections) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_PicksAndBansSelections)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PicksAndBansSelections, that.PicksAndBansSelections; p != q {
		if p == nil {
			p = &PicksAndBansSelections{}
		}
		if q == nil {
			q = &PicksAndBansSelections{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchStatePartialUpdate_PicksAndBansSelectionsPerTeam) EqualVT(thatIface isDota2MatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2MatchStatePartialUpdate_PicksAndBansSelectionsPerTeam)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PicksAndBansSelectionsPerTeam, that.PicksAndBansSelectionsPerTeam; p != q {
		if p == nil {
			p = &PicksAndBansSelectionsPerTeam{}
		}
		if q == nil {
			q = &PicksAndBansSelectionsPerTeam{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2MatchState) EqualVT(that *Dota2MatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.CurrentMap.EqualVT(that.CurrentMap) {
		return false
	}
	if len(this.PreviousMaps) != len(that.PreviousMaps) {
		return false
	}
	for i, vx := range this.PreviousMaps {
		vy := that.PreviousMaps[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2PreviousMapState{}
			}
			if q == nil {
				q = &Dota2PreviousMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.PicksAndBansSelections.EqualVT(that.PicksAndBansSelections) {
		return false
	}
	if !this.PicksAndBansSelectionsPerTeam.EqualVT(that.PicksAndBansSelectionsPerTeam) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2MatchScoreState) EqualVT(that *Dota2MatchScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2MatchScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2MatchScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2CurrentMapStatePartialUpdate) EqualVT(that *Dota2CurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isDota2CurrentMapStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2CurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2CurrentMapStatePartialUpdate_GameTime) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_GameTime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GameTime, that.GameTime; p != q {
		if p == nil {
			p = &Dota2CurrentMapTimeState{}
		}
		if q == nil {
			q = &Dota2CurrentMapTimeState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapState, that.TeamCurrentMapState; p != q {
		if p == nil {
			p = &Dota2TeamCurrentMapState{}
		}
		if q == nil {
			q = &Dota2TeamCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapPartialUpdate, that.TeamCurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &Dota2TeamCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &Dota2TeamCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_Towers) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_Towers)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Towers, that.Towers; p != q {
		if p == nil {
			p = &Dota2Towers{}
		}
		if q == nil {
			q = &Dota2Towers{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_Barracks) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_Barracks)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Barracks, that.Barracks; p != q {
		if p == nil {
			p = &Dota2Barracks{}
		}
		if q == nil {
			q = &Dota2Barracks{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapStatePartialUpdate_Roshan) EqualVT(thatIface isDota2CurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*Dota2CurrentMapStatePartialUpdate_Roshan)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Roshan, that.Roshan; p != q {
		if p == nil {
			p = &Roshan{}
		}
		if q == nil {
			q = &Roshan{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2CurrentMapState) EqualVT(that *Dota2CurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if this.MapPaused != that.MapPaused {
		return false
	}
	if !this.GameTime.EqualVT(that.GameTime) {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2TeamCurrentMapState{}
			}
			if q == nil {
				q = &Dota2TeamCurrentMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Towers.EqualVT(that.Towers) {
		return false
	}
	if !this.Barracks.EqualVT(that.Barracks) {
		return false
	}
	if !this.Roshan.EqualVT(that.Roshan) {
		return false
	}
	if this.DayTime != that.DayTime {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2CurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2CurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2CurrentMapTimeState) EqualVT(that *Dota2CurrentMapTimeState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.GameTime).EqualVT((*durationpb.Duration)(that.GameTime)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2CurrentMapTimeState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2CurrentMapTimeState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PreviousMapState) EqualVT(that *Dota2PreviousMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2TeamPreviousMapState{}
			}
			if q == nil {
				q = &Dota2TeamPreviousMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PreviousMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PreviousMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload) EqualVT(that *Dota2TeamCurrentMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamCurrentMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2TeamCurrentMapStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &Dota2TeamCurrentMapStatisticsState{}
		}
		if q == nil {
			q = &Dota2TeamCurrentMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState) EqualVT(thatIface isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerCurrentMapState, that.PlayerCurrentMapState; p != q {
		if p == nil {
			p = &Dota2PlayerCurrentMapState{}
		}
		if q == nil {
			q = &Dota2PlayerCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate) EqualVT(thatIface isDota2TeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2TeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerCurrentMapPartialUpdate, that.PlayerCurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &Dota2PlayerCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &Dota2PlayerCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2TeamCurrentMapStatePartialUpdate) EqualVT(that *Dota2TeamCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamCurrentMapState) EqualVT(that *Dota2TeamCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Faction != that.Faction {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if p, q := this.Won, that.Won; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if len(this.Players) != len(that.Players) {
		return false
	}
	for i, vx := range this.Players {
		vy, ok := that.Players[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2PlayerCurrentMapState{}
			}
			if q == nil {
				q = &Dota2PlayerCurrentMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamCurrentMapStatisticsState) EqualVT(that *Dota2TeamCurrentMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Barracks != that.Barracks {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.NetWorth != that.NetWorth {
		return false
	}
	if this.Roshans != that.Roshans {
		return false
	}
	if this.Towers != that.Towers {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamCurrentMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamCurrentMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload) EqualVT(that *Dota2PlayerCurrentMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerInfo, that.PlayerInfo; p != q {
		if p == nil {
			p = &Dota2PlayerInfoState{}
		}
		if q == nil {
			q = &Dota2PlayerInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Timers)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Timers, that.Timers; p != q {
		if p == nil {
			p = &Dota2PlayerCurrentMapTimersState{}
		}
		if q == nil {
			q = &Dota2PlayerCurrentMapTimersState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &Dota2PlayerStatisticsState{}
		}
		if q == nil {
			q = &Dota2PlayerStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_MapStatistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MapStatistics, that.MapStatistics; p != q {
		if p == nil {
			p = &Dota2PlayerCurrentMapStatisticsState{}
		}
		if q == nil {
			q = &Dota2PlayerCurrentMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Position)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Position, that.Position; p != q {
		if p == nil {
			p = &Dota2Position{}
		}
		if q == nil {
			q = &Dota2Position{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Items) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Items)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Items, that.Items; p != q {
		if p == nil {
			p = &Dota2Items{}
		}
		if q == nil {
			q = &Dota2Items{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate_Payload_Abilities) EqualVT(thatIface isDota2PlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*Dota2PlayerCurrentMapStatePartialUpdate_Payload_Abilities)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Abilities, that.Abilities; p != q {
		if p == nil {
			p = &Dota2Abilities{}
		}
		if q == nil {
			q = &Dota2Abilities{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate) EqualVT(that *Dota2PlayerCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapState) EqualVT(that *Dota2PlayerCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.PlayerInfo.EqualVT(that.PlayerInfo) {
		return false
	}
	if !this.Timers.EqualVT(that.Timers) {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if !this.MapStatistics.EqualVT(that.MapStatistics) {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	if !this.Items.EqualVT(that.Items) {
		return false
	}
	if !this.Abilities.EqualVT(that.Abilities) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapStatisticsState) EqualVT(that *Dota2PlayerCurrentMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	if this.Health != that.Health {
		return false
	}
	if this.MaxHealth != that.MaxHealth {
		return false
	}
	if this.CurrentGold != that.CurrentGold {
		return false
	}
	if this.NetWorth != that.NetWorth {
		return false
	}
	if this.BuybackCost != that.BuybackCost {
		return false
	}
	if this.HasBuyback != that.HasBuyback {
		return false
	}
	if this.HasAegis != that.HasAegis {
		return false
	}
	if this.Mana != that.Mana {
		return false
	}
	if this.MaxMana != that.MaxMana {
		return false
	}
	if this.GoldReliable != that.GoldReliable {
		return false
	}
	if this.GoldUnreliable != that.GoldUnreliable {
		return false
	}
	if this.Denies != that.Denies {
		return false
	}
	if this.LastHits != that.LastHits {
		return false
	}
	if this.Level != that.Level {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerCurrentMapTimersState) EqualVT(that *Dota2PlayerCurrentMapTimersState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !(*durationpb.Duration)(this.RespawnTimer).EqualVT((*durationpb.Duration)(that.RespawnTimer)) {
		return false
	}
	if !(*durationpb.Duration)(this.BuybackCooldown).EqualVT((*durationpb.Duration)(that.BuybackCooldown)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerCurrentMapTimersState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerCurrentMapTimersState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2TeamPreviousMapState) EqualVT(that *Dota2TeamPreviousMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Faction != that.Faction {
		return false
	}
	if this.Barracks != that.Barracks {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.NetWorth != that.NetWorth {
		return false
	}
	if this.Roshans != that.Roshans {
		return false
	}
	if this.Towers != that.Towers {
		return false
	}
	if p, q := this.Won, that.Won; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if len(this.Players) != len(that.Players) {
		return false
	}
	for i, vx := range this.Players {
		vy, ok := that.Players[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2PlayerPreviousMapState{}
			}
			if q == nil {
				q = &Dota2PlayerPreviousMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2TeamPreviousMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2TeamPreviousMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerPreviousMapState) EqualVT(that *Dota2PlayerPreviousMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.PlayerInfo.EqualVT(that.PlayerInfo) {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerPreviousMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerPreviousMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerInfoState) EqualVT(that *Dota2PlayerInfoState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.SlotId != that.SlotId {
		return false
	}
	if this.ExtName != that.ExtName {
		return false
	}
	if p, q := this.HeroId, that.HeroId; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerInfoState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerInfoState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2PlayerStatisticsState) EqualVT(that *Dota2PlayerStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.Deaths != that.Deaths {
		return false
	}
	if this.Assists != that.Assists {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2PlayerStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2PlayerStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Towers) EqualVT(that *Dota2Towers) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Towers) != len(that.Towers) {
		return false
	}
	for i, vx := range this.Towers {
		vy := that.Towers[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2Tower{}
			}
			if q == nil {
				q = &Dota2Tower{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Towers) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Towers)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Barracks) EqualVT(that *Dota2Barracks) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Barracks) != len(that.Barracks) {
		return false
	}
	for i, vx := range this.Barracks {
		vy := that.Barracks[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2Barrack{}
			}
			if q == nil {
				q = &Dota2Barrack{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Barracks) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Barracks)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Abilities) EqualVT(that *Dota2Abilities) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Abilities) != len(that.Abilities) {
		return false
	}
	for i, vx := range this.Abilities {
		vy := that.Abilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2Ability{}
			}
			if q == nil {
				q = &Dota2Ability{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Abilities) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Abilities)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Items) EqualVT(that *Dota2Items) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Items) != len(that.Items) {
		return false
	}
	for i, vx := range this.Items {
		vy := that.Items[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Dota2Item{}
			}
			if q == nil {
				q = &Dota2Item{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Items) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Items)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Item) EqualVT(that *Dota2Item) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if p, q := this.Cooldown, that.Cooldown; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if this.Position != that.Position {
		return false
	}
	if this.Level != that.Level {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Item) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Item)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Ability) EqualVT(that *Dota2Ability) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if p, q := this.Cooldown, that.Cooldown; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if this.Ultimate != that.Ultimate {
		return false
	}
	if this.Passive != that.Passive {
		return false
	}
	if this.CanCast != that.CanCast {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Ability) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Ability)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Roshan) EqualVT(that *Roshan) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	if this.RespawnTime != that.RespawnTime {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Roshan) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Roshan)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Tower) EqualVT(that *Dota2Tower) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Lane != that.Lane {
		return false
	}
	if this.Faction != that.Faction {
		return false
	}
	if this.Tier != that.Tier {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Tower) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Tower)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Barrack) EqualVT(that *Dota2Barrack) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Lane != that.Lane {
		return false
	}
	if this.Faction != that.Faction {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Alive != that.Alive {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Barrack) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Barrack)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Dota2Position) EqualVT(that *Dota2Position) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.X != that.X {
		return false
	}
	if this.Y != that.Y {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Dota2Position) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*Dota2Position)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
