// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.3
// source: bragi/lol.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LolFaction int32

const (
	LolFaction_LOL_FACTION_UNSPECIFIED LolFaction = 0
	LolFaction_LOL_FACTION_BLUE        LolFaction = 1
	LolFaction_LOL_FACTION_RED         LolFaction = 2
)

// Enum value maps for LolFaction.
var (
	LolFaction_name = map[int32]string{
		0: "LOL_FACTION_UNSPECIFIED",
		1: "LOL_FACTION_BLUE",
		2: "LOL_FACTION_RED",
	}
	LolFaction_value = map[string]int32{
		"LOL_FACTION_UNSPECIFIED": 0,
		"LOL_FACTION_BLUE":        1,
		"LOL_FACTION_RED":         2,
	}
)

func (x LolFaction) Enum() *LolFaction {
	p := new(LolFaction)
	*p = x
	return p
}

func (x LolFaction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LolFaction) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_lol_proto_enumTypes[0].Descriptor()
}

func (LolFaction) Type() protoreflect.EnumType {
	return &file_bragi_lol_proto_enumTypes[0]
}

func (x LolFaction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LolFaction.Descriptor instead.
func (LolFaction) EnumDescriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{0}
}

type LolLane int32

const (
	LolLane_LOL_LANE_UNSPECIFIED LolLane = 0
	LolLane_LOL_LANE_TOP         LolLane = 1
	LolLane_LOL_LANE_MID         LolLane = 2
	LolLane_LOL_LANE_BOT         LolLane = 3
)

// Enum value maps for LolLane.
var (
	LolLane_name = map[int32]string{
		0: "LOL_LANE_UNSPECIFIED",
		1: "LOL_LANE_TOP",
		2: "LOL_LANE_MID",
		3: "LOL_LANE_BOT",
	}
	LolLane_value = map[string]int32{
		"LOL_LANE_UNSPECIFIED": 0,
		"LOL_LANE_TOP":         1,
		"LOL_LANE_MID":         2,
		"LOL_LANE_BOT":         3,
	}
)

func (x LolLane) Enum() *LolLane {
	p := new(LolLane)
	*p = x
	return p
}

func (x LolLane) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LolLane) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_lol_proto_enumTypes[1].Descriptor()
}

func (LolLane) Type() protoreflect.EnumType {
	return &file_bragi_lol_proto_enumTypes[1]
}

func (x LolLane) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LolLane.Descriptor instead.
func (LolLane) EnumDescriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{1}
}

type LolTurretTier int32

const (
	LolTurretTier_LOL_TURRET_TIER_UNSPECIFIED LolTurretTier = 0
	LolTurretTier_LOL_TURRET_TIER_1           LolTurretTier = 1
	LolTurretTier_LOL_TURRET_TIER_2           LolTurretTier = 2
	LolTurretTier_LOL_TURRET_TIER_3           LolTurretTier = 3
	LolTurretTier_LOL_TURRET_TIER_4           LolTurretTier = 4
)

// Enum value maps for LolTurretTier.
var (
	LolTurretTier_name = map[int32]string{
		0: "LOL_TURRET_TIER_UNSPECIFIED",
		1: "LOL_TURRET_TIER_1",
		2: "LOL_TURRET_TIER_2",
		3: "LOL_TURRET_TIER_3",
		4: "LOL_TURRET_TIER_4",
	}
	LolTurretTier_value = map[string]int32{
		"LOL_TURRET_TIER_UNSPECIFIED": 0,
		"LOL_TURRET_TIER_1":           1,
		"LOL_TURRET_TIER_2":           2,
		"LOL_TURRET_TIER_3":           3,
		"LOL_TURRET_TIER_4":           4,
	}
)

func (x LolTurretTier) Enum() *LolTurretTier {
	p := new(LolTurretTier)
	*p = x
	return p
}

func (x LolTurretTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LolTurretTier) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_lol_proto_enumTypes[2].Descriptor()
}

func (LolTurretTier) Type() protoreflect.EnumType {
	return &file_bragi_lol_proto_enumTypes[2]
}

func (x LolTurretTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LolTurretTier.Descriptor instead.
func (LolTurretTier) EnumDescriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{2}
}

type LolMatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn   string                   `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence   uint64                   `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp  *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataStatus DataStatus               `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	Payload    *LolMatchMessage_Payload `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *LolMatchMessage) Reset() {
	*x = LolMatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchMessage) ProtoMessage() {}

func (x *LolMatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchMessage.ProtoReflect.Descriptor instead.
func (*LolMatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{0}
}

func (x *LolMatchMessage) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *LolMatchMessage) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *LolMatchMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LolMatchMessage) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *LolMatchMessage) GetPayload() *LolMatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type LolMatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn      string                 `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence      uint64                 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataStatus    DataStatus             `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	Announcements []*Announcement        `protobuf:"bytes,5,rep,name=announcements,proto3" json:"announcements,omitempty"`
	MatchState    *LolMatchState         `protobuf:"bytes,6,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
}

func (x *LolMatchSnapshot) Reset() {
	*x = LolMatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchSnapshot) ProtoMessage() {}

func (x *LolMatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchSnapshot.ProtoReflect.Descriptor instead.
func (*LolMatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{1}
}

func (x *LolMatchSnapshot) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *LolMatchSnapshot) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *LolMatchSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LolMatchSnapshot) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *LolMatchSnapshot) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *LolMatchSnapshot) GetMatchState() *LolMatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

type LolMatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *LolMatchUpdate_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *LolMatchUpdate) Reset() {
	*x = LolMatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchUpdate) ProtoMessage() {}

func (x *LolMatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchUpdate.ProtoReflect.Descriptor instead.
func (*LolMatchUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{2}
}

func (x *LolMatchUpdate) GetPayload() *LolMatchUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type LolMatchStatePartialUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*LolMatchStatePartialUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *LolMatchStatePartialUpdates) Reset() {
	*x = LolMatchStatePartialUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchStatePartialUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchStatePartialUpdates) ProtoMessage() {}

func (x *LolMatchStatePartialUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchStatePartialUpdates.ProtoReflect.Descriptor instead.
func (*LolMatchStatePartialUpdates) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{3}
}

func (x *LolMatchStatePartialUpdates) GetUpdates() []*LolMatchStatePartialUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type LolMatchStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*LolMatchStatePartialUpdate_Score
	//	*LolMatchStatePartialUpdate_CurrentMapState
	//	*LolMatchStatePartialUpdate_CurrentMapStatePartialUpdate
	Update isLolMatchStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *LolMatchStatePartialUpdate) Reset() {
	*x = LolMatchStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchStatePartialUpdate) ProtoMessage() {}

func (x *LolMatchStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*LolMatchStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{4}
}

func (m *LolMatchStatePartialUpdate) GetUpdate() isLolMatchStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *LolMatchStatePartialUpdate) GetScore() *LolMatchScoreState {
	if x, ok := x.GetUpdate().(*LolMatchStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *LolMatchStatePartialUpdate) GetCurrentMapState() *LolCurrentMapState {
	if x, ok := x.GetUpdate().(*LolMatchStatePartialUpdate_CurrentMapState); ok {
		return x.CurrentMapState
	}
	return nil
}

func (x *LolMatchStatePartialUpdate) GetCurrentMapStatePartialUpdate() *LolCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*LolMatchStatePartialUpdate_CurrentMapStatePartialUpdate); ok {
		return x.CurrentMapStatePartialUpdate
	}
	return nil
}

type isLolMatchStatePartialUpdate_Update interface {
	isLolMatchStatePartialUpdate_Update()
}

type LolMatchStatePartialUpdate_Score struct {
	// Replaces "score" property in LolMatchState.
	Score *LolMatchScoreState `protobuf:"bytes,1,opt,name=score,proto3,oneof"`
}

type LolMatchStatePartialUpdate_CurrentMapState struct {
	// Replaces "current_map_state" property in LolMatchState. To minimalize issues with incorrect updates application
	// on current_map_state, server sends LolMatchStatePartialUpdate with LolMapState in periodic time set by customer.
	CurrentMapState *LolCurrentMapState `protobuf:"bytes,2,opt,name=current_map_state,json=currentMapState,proto3,oneof"`
}

type LolMatchStatePartialUpdate_CurrentMapStatePartialUpdate struct {
	// Apply partial update on "current_map_state" property in LolMapState.
	CurrentMapStatePartialUpdate *LolCurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=current_map_state_partial_update,json=currentMapStatePartialUpdate,proto3,oneof"`
}

func (*LolMatchStatePartialUpdate_Score) isLolMatchStatePartialUpdate_Update() {}

func (*LolMatchStatePartialUpdate_CurrentMapState) isLolMatchStatePartialUpdate_Update() {}

func (*LolMatchStatePartialUpdate_CurrentMapStatePartialUpdate) isLolMatchStatePartialUpdate_Update() {
}

type LolMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn     string                 `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	MatchType    BestOfType             `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=bragi.BestOfType" json:"match_type,omitempty"`
	HomeTeam     *Team                  `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam     *Team                  `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Score        *LolMatchScoreState    `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	MatchStatus  MatchStatusType        `protobuf:"varint,6,opt,name=match_status,json=matchStatus,proto3,enum=bragi.MatchStatusType" json:"match_status,omitempty"`
	CurrentMap   *LolCurrentMapState    `protobuf:"bytes,7,opt,name=current_map,json=currentMap,proto3" json:"current_map,omitempty"`
	PreviousMaps []*LolPreviousMapState `protobuf:"bytes,8,rep,name=previous_maps,json=previousMaps,proto3" json:"previous_maps,omitempty"`
}

func (x *LolMatchState) Reset() {
	*x = LolMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchState) ProtoMessage() {}

func (x *LolMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchState.ProtoReflect.Descriptor instead.
func (*LolMatchState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{5}
}

func (x *LolMatchState) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *LolMatchState) GetMatchType() BestOfType {
	if x != nil {
		return x.MatchType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *LolMatchState) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *LolMatchState) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *LolMatchState) GetScore() *LolMatchScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *LolMatchState) GetMatchStatus() MatchStatusType {
	if x != nil {
		return x.MatchStatus
	}
	return MatchStatusType_MATCH_STATUS_TYPE_UNSPECIFIED
}

func (x *LolMatchState) GetCurrentMap() *LolCurrentMapState {
	if x != nil {
		return x.CurrentMap
	}
	return nil
}

func (x *LolMatchState) GetPreviousMaps() []*LolPreviousMapState {
	if x != nil {
		return x.PreviousMaps
	}
	return nil
}

type LolMatchScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *LolMatchScoreState) Reset() {
	*x = LolMatchScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchScoreState) ProtoMessage() {}

func (x *LolMatchScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchScoreState.ProtoReflect.Descriptor instead.
func (*LolMatchScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{6}
}

func (x *LolMatchScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *LolMatchScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type LolCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*LolCurrentMapStatePartialUpdate_GameTime
	//	*LolCurrentMapStatePartialUpdate_TeamCurrentMapState
	//	*LolCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate
	//	*LolCurrentMapStatePartialUpdate_Turrets
	//	*LolCurrentMapStatePartialUpdate_Inhibitors
	Update isLolCurrentMapStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *LolCurrentMapStatePartialUpdate) Reset() {
	*x = LolCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *LolCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*LolCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{7}
}

func (m *LolCurrentMapStatePartialUpdate) GetUpdate() isLolCurrentMapStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *LolCurrentMapStatePartialUpdate) GetGameTime() *LolCurrentMapTimeState {
	if x, ok := x.GetUpdate().(*LolCurrentMapStatePartialUpdate_GameTime); ok {
		return x.GameTime
	}
	return nil
}

func (x *LolCurrentMapStatePartialUpdate) GetTeamCurrentMapState() *LolTeamCurrentMapState {
	if x, ok := x.GetUpdate().(*LolCurrentMapStatePartialUpdate_TeamCurrentMapState); ok {
		return x.TeamCurrentMapState
	}
	return nil
}

func (x *LolCurrentMapStatePartialUpdate) GetTeamCurrentMapPartialUpdate() *LolTeamCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*LolCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate); ok {
		return x.TeamCurrentMapPartialUpdate
	}
	return nil
}

func (x *LolCurrentMapStatePartialUpdate) GetTurrets() *LolTurrets {
	if x, ok := x.GetUpdate().(*LolCurrentMapStatePartialUpdate_Turrets); ok {
		return x.Turrets
	}
	return nil
}

func (x *LolCurrentMapStatePartialUpdate) GetInhibitors() *LolInhibitors {
	if x, ok := x.GetUpdate().(*LolCurrentMapStatePartialUpdate_Inhibitors); ok {
		return x.Inhibitors
	}
	return nil
}

type isLolCurrentMapStatePartialUpdate_Update interface {
	isLolCurrentMapStatePartialUpdate_Update()
}

type LolCurrentMapStatePartialUpdate_GameTime struct {
	// Replaces "game_time" property in LolCurrentMapTimeState.
	GameTime *LolCurrentMapTimeState `protobuf:"bytes,1,opt,name=game_time,json=gameTime,proto3,oneof"`
}

type LolCurrentMapStatePartialUpdate_TeamCurrentMapState struct {
	// Replaces whole value under given key in players map property in LolTeamCurrentMapState.
	TeamCurrentMapState *LolTeamCurrentMapState `protobuf:"bytes,2,opt,name=team_current_map_state,json=teamCurrentMapState,proto3,oneof"`
}

type LolCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate struct {
	// Apply partial update on value under given key in teams map property in LolCurrentMapState.
	TeamCurrentMapPartialUpdate *LolTeamCurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=team_current_map_partial_update,json=teamCurrentMapPartialUpdate,proto3,oneof"`
}

type LolCurrentMapStatePartialUpdate_Turrets struct {
	// Replaces "turrets" property in LolTurrets.
	Turrets *LolTurrets `protobuf:"bytes,4,opt,name=turrets,proto3,oneof"`
}

type LolCurrentMapStatePartialUpdate_Inhibitors struct {
	// Replaces "inhibitors" property in LolInhibitors.
	Inhibitors *LolInhibitors `protobuf:"bytes,5,opt,name=inhibitors,proto3,oneof"`
}

func (*LolCurrentMapStatePartialUpdate_GameTime) isLolCurrentMapStatePartialUpdate_Update() {}

func (*LolCurrentMapStatePartialUpdate_TeamCurrentMapState) isLolCurrentMapStatePartialUpdate_Update() {
}

func (*LolCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) isLolCurrentMapStatePartialUpdate_Update() {
}

func (*LolCurrentMapStatePartialUpdate_Turrets) isLolCurrentMapStatePartialUpdate_Update() {}

func (*LolCurrentMapStatePartialUpdate_Inhibitors) isLolCurrentMapStatePartialUpdate_Update() {}

type LolCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder   uint32                             `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	MapPaused  bool                               `protobuf:"varint,2,opt,name=map_paused,json=mapPaused,proto3" json:"map_paused,omitempty"`
	GameTime   *LolCurrentMapTimeState            `protobuf:"bytes,3,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	Teams      map[string]*LolTeamCurrentMapState `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Turrets    *LolTurrets                        `protobuf:"bytes,5,opt,name=turrets,proto3" json:"turrets,omitempty"`
	Inhibitors *LolInhibitors                     `protobuf:"bytes,6,opt,name=inhibitors,proto3" json:"inhibitors,omitempty"`
}

func (x *LolCurrentMapState) Reset() {
	*x = LolCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolCurrentMapState) ProtoMessage() {}

func (x *LolCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolCurrentMapState.ProtoReflect.Descriptor instead.
func (*LolCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{8}
}

func (x *LolCurrentMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *LolCurrentMapState) GetMapPaused() bool {
	if x != nil {
		return x.MapPaused
	}
	return false
}

func (x *LolCurrentMapState) GetGameTime() *LolCurrentMapTimeState {
	if x != nil {
		return x.GameTime
	}
	return nil
}

func (x *LolCurrentMapState) GetTeams() map[string]*LolTeamCurrentMapState {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *LolCurrentMapState) GetTurrets() *LolTurrets {
	if x != nil {
		return x.Turrets
	}
	return nil
}

func (x *LolCurrentMapState) GetInhibitors() *LolInhibitors {
	if x != nil {
		return x.Inhibitors
	}
	return nil
}

type LolCurrentMapTimeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime *durationpb.Duration `protobuf:"bytes,1,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
}

func (x *LolCurrentMapTimeState) Reset() {
	*x = LolCurrentMapTimeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolCurrentMapTimeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolCurrentMapTimeState) ProtoMessage() {}

func (x *LolCurrentMapTimeState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolCurrentMapTimeState.ProtoReflect.Descriptor instead.
func (*LolCurrentMapTimeState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{9}
}

func (x *LolCurrentMapTimeState) GetGameTime() *durationpb.Duration {
	if x != nil {
		return x.GameTime
	}
	return nil
}

type LolPreviousMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder uint32                              `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	Teams    map[string]*LolTeamPreviousMapState `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LolPreviousMapState) Reset() {
	*x = LolPreviousMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPreviousMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPreviousMapState) ProtoMessage() {}

func (x *LolPreviousMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPreviousMapState.ProtoReflect.Descriptor instead.
func (*LolPreviousMapState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{10}
}

func (x *LolPreviousMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *LolPreviousMapState) GetTeams() map[string]*LolTeamPreviousMapState {
	if x != nil {
		return x.Teams
	}
	return nil
}

type LolTeamCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                       `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Payload *LolTeamCurrentMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *LolTeamCurrentMapStatePartialUpdate) Reset() {
	*x = LolTeamCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolTeamCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolTeamCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *LolTeamCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolTeamCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*LolTeamCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{11}
}

func (x *LolTeamCurrentMapStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *LolTeamCurrentMapStatePartialUpdate) GetPayload() *LolTeamCurrentMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type LolTeamCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn    string                               `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Faction    LolFaction                           `protobuf:"varint,2,opt,name=faction,proto3,enum=bragi.LolFaction" json:"faction,omitempty"`
	Statistics *LolTeamCurrentMapStatisticsState    `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Won        *bool                                `protobuf:"varint,4,opt,name=won,proto3,oneof" json:"won,omitempty"`
	Players    map[string]*LolPlayerCurrentMapState `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LolTeamCurrentMapState) Reset() {
	*x = LolTeamCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolTeamCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolTeamCurrentMapState) ProtoMessage() {}

func (x *LolTeamCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolTeamCurrentMapState.ProtoReflect.Descriptor instead.
func (*LolTeamCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{12}
}

func (x *LolTeamCurrentMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *LolTeamCurrentMapState) GetFaction() LolFaction {
	if x != nil {
		return x.Faction
	}
	return LolFaction_LOL_FACTION_UNSPECIFIED
}

func (x *LolTeamCurrentMapState) GetStatistics() *LolTeamCurrentMapStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *LolTeamCurrentMapState) GetWon() bool {
	if x != nil && x.Won != nil {
		return *x.Won
	}
	return false
}

func (x *LolTeamCurrentMapState) GetPlayers() map[string]*LolPlayerCurrentMapState {
	if x != nil {
		return x.Players
	}
	return nil
}

type LolTeamCurrentMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn    string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Kills      uint32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
	Barons     uint32 `protobuf:"varint,3,opt,name=barons,proto3" json:"barons,omitempty"`
	Dragons    uint32 `protobuf:"varint,4,opt,name=dragons,proto3" json:"dragons,omitempty"`
	Turrets    uint32 `protobuf:"varint,5,opt,name=turrets,proto3" json:"turrets,omitempty"`
	Inhibitors uint32 `protobuf:"varint,6,opt,name=inhibitors,proto3" json:"inhibitors,omitempty"`
	Gold       uint32 `protobuf:"varint,7,opt,name=gold,proto3" json:"gold,omitempty"`
}

func (x *LolTeamCurrentMapStatisticsState) Reset() {
	*x = LolTeamCurrentMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolTeamCurrentMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolTeamCurrentMapStatisticsState) ProtoMessage() {}

func (x *LolTeamCurrentMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolTeamCurrentMapStatisticsState.ProtoReflect.Descriptor instead.
func (*LolTeamCurrentMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{13}
}

func (x *LolTeamCurrentMapStatisticsState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *LolTeamCurrentMapStatisticsState) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *LolTeamCurrentMapStatisticsState) GetBarons() uint32 {
	if x != nil {
		return x.Barons
	}
	return 0
}

func (x *LolTeamCurrentMapStatisticsState) GetDragons() uint32 {
	if x != nil {
		return x.Dragons
	}
	return 0
}

func (x *LolTeamCurrentMapStatisticsState) GetTurrets() uint32 {
	if x != nil {
		return x.Turrets
	}
	return 0
}

func (x *LolTeamCurrentMapStatisticsState) GetInhibitors() uint32 {
	if x != nil {
		return x.Inhibitors
	}
	return 0
}

func (x *LolTeamCurrentMapStatisticsState) GetGold() uint32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

type LolPlayerCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string                                         `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Payload   *LolPlayerCurrentMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *LolPlayerCurrentMapStatePartialUpdate) Reset() {
	*x = LolPlayerCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPlayerCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPlayerCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *LolPlayerCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPlayerCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*LolPlayerCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{14}
}

func (x *LolPlayerCurrentMapStatePartialUpdate) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *LolPlayerCurrentMapStatePartialUpdate) GetPayload() *LolPlayerCurrentMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type LolPlayerCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn     string                              `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerInfo    *LolPlayerInfoState                 `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Timers        *LolPlayerCurrentMapTimersState     `protobuf:"bytes,3,opt,name=timers,proto3" json:"timers,omitempty"`
	Statistics    *LolPlayerStatisticsState           `protobuf:"bytes,4,opt,name=statistics,proto3" json:"statistics,omitempty"`
	MapStatistics *LolPlayerCurrentMapStatisticsState `protobuf:"bytes,5,opt,name=map_statistics,json=mapStatistics,proto3" json:"map_statistics,omitempty"`
	Position      *LolPosition                        `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *LolPlayerCurrentMapState) Reset() {
	*x = LolPlayerCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPlayerCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPlayerCurrentMapState) ProtoMessage() {}

func (x *LolPlayerCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPlayerCurrentMapState.ProtoReflect.Descriptor instead.
func (*LolPlayerCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{15}
}

func (x *LolPlayerCurrentMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *LolPlayerCurrentMapState) GetPlayerInfo() *LolPlayerInfoState {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *LolPlayerCurrentMapState) GetTimers() *LolPlayerCurrentMapTimersState {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *LolPlayerCurrentMapState) GetStatistics() *LolPlayerStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *LolPlayerCurrentMapState) GetMapStatistics() *LolPlayerCurrentMapStatisticsState {
	if x != nil {
		return x.MapStatistics
	}
	return nil
}

func (x *LolPlayerCurrentMapState) GetPosition() *LolPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type LolPlayerCurrentMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Alive     bool   `protobuf:"varint,2,opt,name=alive,proto3" json:"alive,omitempty"`
	Health    uint32 `protobuf:"varint,3,opt,name=health,proto3" json:"health,omitempty"`
	MaxHealth uint32 `protobuf:"varint,4,opt,name=max_health,json=maxHealth,proto3" json:"max_health,omitempty"`
	TotalGold uint32 `protobuf:"varint,5,opt,name=total_gold,json=totalGold,proto3" json:"total_gold,omitempty"`
	Mana      uint32 `protobuf:"varint,6,opt,name=mana,proto3" json:"mana,omitempty"`
	MaxMana   uint32 `protobuf:"varint,7,opt,name=max_mana,json=maxMana,proto3" json:"max_mana,omitempty"`
}

func (x *LolPlayerCurrentMapStatisticsState) Reset() {
	*x = LolPlayerCurrentMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPlayerCurrentMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPlayerCurrentMapStatisticsState) ProtoMessage() {}

func (x *LolPlayerCurrentMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPlayerCurrentMapStatisticsState.ProtoReflect.Descriptor instead.
func (*LolPlayerCurrentMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{16}
}

func (x *LolPlayerCurrentMapStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *LolPlayerCurrentMapStatisticsState) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *LolPlayerCurrentMapStatisticsState) GetHealth() uint32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *LolPlayerCurrentMapStatisticsState) GetMaxHealth() uint32 {
	if x != nil {
		return x.MaxHealth
	}
	return 0
}

func (x *LolPlayerCurrentMapStatisticsState) GetTotalGold() uint32 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

func (x *LolPlayerCurrentMapStatisticsState) GetMana() uint32 {
	if x != nil {
		return x.Mana
	}
	return 0
}

func (x *LolPlayerCurrentMapStatisticsState) GetMaxMana() uint32 {
	if x != nil {
		return x.MaxMana
	}
	return 0
}

type LolPlayerCurrentMapTimersState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn    string               `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	RespawnTimer *durationpb.Duration `protobuf:"bytes,2,opt,name=respawn_timer,json=respawnTimer,proto3,oneof" json:"respawn_timer,omitempty"`
}

func (x *LolPlayerCurrentMapTimersState) Reset() {
	*x = LolPlayerCurrentMapTimersState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPlayerCurrentMapTimersState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPlayerCurrentMapTimersState) ProtoMessage() {}

func (x *LolPlayerCurrentMapTimersState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPlayerCurrentMapTimersState.ProtoReflect.Descriptor instead.
func (*LolPlayerCurrentMapTimersState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{17}
}

func (x *LolPlayerCurrentMapTimersState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *LolPlayerCurrentMapTimersState) GetRespawnTimer() *durationpb.Duration {
	if x != nil {
		return x.RespawnTimer
	}
	return nil
}

type LolTeamPreviousMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn    string                                `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Faction    LolFaction                            `protobuf:"varint,2,opt,name=faction,proto3,enum=bragi.LolFaction" json:"faction,omitempty"`
	Kills      uint32                                `protobuf:"varint,3,opt,name=kills,proto3" json:"kills,omitempty"`
	Barons     uint32                                `protobuf:"varint,4,opt,name=barons,proto3" json:"barons,omitempty"`
	Dragons    uint32                                `protobuf:"varint,5,opt,name=dragons,proto3" json:"dragons,omitempty"`
	Turrets    uint32                                `protobuf:"varint,6,opt,name=turrets,proto3" json:"turrets,omitempty"`
	Inhibitors uint32                                `protobuf:"varint,7,opt,name=inhibitors,proto3" json:"inhibitors,omitempty"`
	Gold       uint32                                `protobuf:"varint,8,opt,name=gold,proto3" json:"gold,omitempty"`
	Won        *bool                                 `protobuf:"varint,9,opt,name=won,proto3,oneof" json:"won,omitempty"`
	Players    map[string]*LolPlayerPreviousMapState `protobuf:"bytes,10,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LolTeamPreviousMapState) Reset() {
	*x = LolTeamPreviousMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolTeamPreviousMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolTeamPreviousMapState) ProtoMessage() {}

func (x *LolTeamPreviousMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolTeamPreviousMapState.ProtoReflect.Descriptor instead.
func (*LolTeamPreviousMapState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{18}
}

func (x *LolTeamPreviousMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *LolTeamPreviousMapState) GetFaction() LolFaction {
	if x != nil {
		return x.Faction
	}
	return LolFaction_LOL_FACTION_UNSPECIFIED
}

func (x *LolTeamPreviousMapState) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *LolTeamPreviousMapState) GetBarons() uint32 {
	if x != nil {
		return x.Barons
	}
	return 0
}

func (x *LolTeamPreviousMapState) GetDragons() uint32 {
	if x != nil {
		return x.Dragons
	}
	return 0
}

func (x *LolTeamPreviousMapState) GetTurrets() uint32 {
	if x != nil {
		return x.Turrets
	}
	return 0
}

func (x *LolTeamPreviousMapState) GetInhibitors() uint32 {
	if x != nil {
		return x.Inhibitors
	}
	return 0
}

func (x *LolTeamPreviousMapState) GetGold() uint32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *LolTeamPreviousMapState) GetWon() bool {
	if x != nil && x.Won != nil {
		return *x.Won
	}
	return false
}

func (x *LolTeamPreviousMapState) GetPlayers() map[string]*LolPlayerPreviousMapState {
	if x != nil {
		return x.Players
	}
	return nil
}

type LolPlayerPreviousMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                    `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerInfo *LolPlayerInfoState       `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Statistics *LolPlayerStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *LolPlayerPreviousMapState) Reset() {
	*x = LolPlayerPreviousMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPlayerPreviousMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPlayerPreviousMapState) ProtoMessage() {}

func (x *LolPlayerPreviousMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPlayerPreviousMapState.ProtoReflect.Descriptor instead.
func (*LolPlayerPreviousMapState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{19}
}

func (x *LolPlayerPreviousMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *LolPlayerPreviousMapState) GetPlayerInfo() *LolPlayerInfoState {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *LolPlayerPreviousMapState) GetStatistics() *LolPlayerStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type LolPlayerInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string  `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	SlotId     uint32  `protobuf:"varint,2,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	ExtName    string  `protobuf:"bytes,3,opt,name=ext_name,json=extName,proto3" json:"ext_name,omitempty"`
	ChampionId *uint32 `protobuf:"varint,4,opt,name=champion_id,json=championId,proto3,oneof" json:"champion_id,omitempty"`
}

func (x *LolPlayerInfoState) Reset() {
	*x = LolPlayerInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPlayerInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPlayerInfoState) ProtoMessage() {}

func (x *LolPlayerInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPlayerInfoState.ProtoReflect.Descriptor instead.
func (*LolPlayerInfoState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{20}
}

func (x *LolPlayerInfoState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *LolPlayerInfoState) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *LolPlayerInfoState) GetExtName() string {
	if x != nil {
		return x.ExtName
	}
	return ""
}

func (x *LolPlayerInfoState) GetChampionId() uint32 {
	if x != nil && x.ChampionId != nil {
		return *x.ChampionId
	}
	return 0
}

type LolPlayerStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Kills      uint32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths     uint32 `protobuf:"varint,3,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists    uint32 `protobuf:"varint,4,opt,name=assists,proto3" json:"assists,omitempty"`
	CreepScore uint32 `protobuf:"varint,5,opt,name=creep_score,json=creepScore,proto3" json:"creep_score,omitempty"`
}

func (x *LolPlayerStatisticsState) Reset() {
	*x = LolPlayerStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPlayerStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPlayerStatisticsState) ProtoMessage() {}

func (x *LolPlayerStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPlayerStatisticsState.ProtoReflect.Descriptor instead.
func (*LolPlayerStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{21}
}

func (x *LolPlayerStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *LolPlayerStatisticsState) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *LolPlayerStatisticsState) GetDeaths() uint32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *LolPlayerStatisticsState) GetAssists() uint32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *LolPlayerStatisticsState) GetCreepScore() uint32 {
	if x != nil {
		return x.CreepScore
	}
	return 0
}

type LolTurrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Turrets []*LolTurret `protobuf:"bytes,1,rep,name=turrets,proto3" json:"turrets,omitempty"`
}

func (x *LolTurrets) Reset() {
	*x = LolTurrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolTurrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolTurrets) ProtoMessage() {}

func (x *LolTurrets) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolTurrets.ProtoReflect.Descriptor instead.
func (*LolTurrets) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{22}
}

func (x *LolTurrets) GetTurrets() []*LolTurret {
	if x != nil {
		return x.Turrets
	}
	return nil
}

type LolInhibitors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inhibitors []*LolInhibitor `protobuf:"bytes,1,rep,name=inhibitors,proto3" json:"inhibitors,omitempty"`
}

func (x *LolInhibitors) Reset() {
	*x = LolInhibitors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolInhibitors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolInhibitors) ProtoMessage() {}

func (x *LolInhibitors) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolInhibitors.ProtoReflect.Descriptor instead.
func (*LolInhibitors) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{23}
}

func (x *LolInhibitors) GetInhibitors() []*LolInhibitor {
	if x != nil {
		return x.Inhibitors
	}
	return nil
}

type LolTurret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lane    LolLane       `protobuf:"varint,1,opt,name=lane,proto3,enum=bragi.LolLane" json:"lane,omitempty"`
	Faction LolFaction    `protobuf:"varint,2,opt,name=faction,proto3,enum=bragi.LolFaction" json:"faction,omitempty"`
	Tier    LolTurretTier `protobuf:"varint,3,opt,name=tier,proto3,enum=bragi.LolTurretTier" json:"tier,omitempty"`
	Alive   bool          `protobuf:"varint,4,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *LolTurret) Reset() {
	*x = LolTurret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolTurret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolTurret) ProtoMessage() {}

func (x *LolTurret) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolTurret.ProtoReflect.Descriptor instead.
func (*LolTurret) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{24}
}

func (x *LolTurret) GetLane() LolLane {
	if x != nil {
		return x.Lane
	}
	return LolLane_LOL_LANE_UNSPECIFIED
}

func (x *LolTurret) GetFaction() LolFaction {
	if x != nil {
		return x.Faction
	}
	return LolFaction_LOL_FACTION_UNSPECIFIED
}

func (x *LolTurret) GetTier() LolTurretTier {
	if x != nil {
		return x.Tier
	}
	return LolTurretTier_LOL_TURRET_TIER_UNSPECIFIED
}

func (x *LolTurret) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

type LolInhibitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lane    LolLane    `protobuf:"varint,1,opt,name=lane,proto3,enum=bragi.LolLane" json:"lane,omitempty"`
	Faction LolFaction `protobuf:"varint,2,opt,name=faction,proto3,enum=bragi.LolFaction" json:"faction,omitempty"`
	Alive   bool       `protobuf:"varint,3,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *LolInhibitor) Reset() {
	*x = LolInhibitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolInhibitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolInhibitor) ProtoMessage() {}

func (x *LolInhibitor) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolInhibitor.ProtoReflect.Descriptor instead.
func (*LolInhibitor) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{25}
}

func (x *LolInhibitor) GetLane() LolLane {
	if x != nil {
		return x.Lane
	}
	return LolLane_LOL_LANE_UNSPECIFIED
}

func (x *LolInhibitor) GetFaction() LolFaction {
	if x != nil {
		return x.Faction
	}
	return LolFaction_LOL_FACTION_UNSPECIFIED
}

func (x *LolInhibitor) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

type LolPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *LolPosition) Reset() {
	*x = LolPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPosition) ProtoMessage() {}

func (x *LolPosition) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPosition.ProtoReflect.Descriptor instead.
func (*LolPosition) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{26}
}

func (x *LolPosition) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *LolPosition) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type LolMatchMessage_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*LolMatchMessage_Payload_Snapshot
	//	*LolMatchMessage_Payload_Update
	Payload isLolMatchMessage_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *LolMatchMessage_Payload) Reset() {
	*x = LolMatchMessage_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchMessage_Payload) ProtoMessage() {}

func (x *LolMatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*LolMatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{0, 0}
}

func (m *LolMatchMessage_Payload) GetPayload() isLolMatchMessage_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *LolMatchMessage_Payload) GetSnapshot() *LolMatchSnapshot {
	if x, ok := x.GetPayload().(*LolMatchMessage_Payload_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *LolMatchMessage_Payload) GetUpdate() *LolMatchUpdate {
	if x, ok := x.GetPayload().(*LolMatchMessage_Payload_Update); ok {
		return x.Update
	}
	return nil
}

type isLolMatchMessage_Payload_Payload interface {
	isLolMatchMessage_Payload_Payload()
}

type LolMatchMessage_Payload_Snapshot struct {
	// Initial snapshot
	Snapshot *LolMatchSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type LolMatchMessage_Payload_Update struct {
	// Particular updates which are applied on property match_state in MatchState.
	Update *LolMatchUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*LolMatchMessage_Payload_Snapshot) isLolMatchMessage_Payload_Payload() {}

func (*LolMatchMessage_Payload_Update) isLolMatchMessage_Payload_Payload() {}

type LolMatchUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*LolMatchUpdate_Payload_MatchState
	//	*LolMatchUpdate_Payload_PartialUpdates
	Payload isLolMatchUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *LolMatchUpdate_Payload) Reset() {
	*x = LolMatchUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolMatchUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolMatchUpdate_Payload) ProtoMessage() {}

func (x *LolMatchUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolMatchUpdate_Payload.ProtoReflect.Descriptor instead.
func (*LolMatchUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{2, 0}
}

func (m *LolMatchUpdate_Payload) GetPayload() isLolMatchUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *LolMatchUpdate_Payload) GetMatchState() *LolMatchState {
	if x, ok := x.GetPayload().(*LolMatchUpdate_Payload_MatchState); ok {
		return x.MatchState
	}
	return nil
}

func (x *LolMatchUpdate_Payload) GetPartialUpdates() *LolMatchStatePartialUpdates {
	if x, ok := x.GetPayload().(*LolMatchUpdate_Payload_PartialUpdates); ok {
		return x.PartialUpdates
	}
	return nil
}

type isLolMatchUpdate_Payload_Payload interface {
	isLolMatchUpdate_Payload_Payload()
}

type LolMatchUpdate_Payload_MatchState struct {
	MatchState *LolMatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3,oneof"`
}

type LolMatchUpdate_Payload_PartialUpdates struct {
	PartialUpdates *LolMatchStatePartialUpdates `protobuf:"bytes,2,opt,name=partial_updates,json=partialUpdates,proto3,oneof"`
}

func (*LolMatchUpdate_Payload_MatchState) isLolMatchUpdate_Payload_Payload() {}

func (*LolMatchUpdate_Payload_PartialUpdates) isLolMatchUpdate_Payload_Payload() {}

type LolTeamCurrentMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*LolTeamCurrentMapStatePartialUpdate_Payload_Statistics
	//	*LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState
	//	*LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate
	Payload isLolTeamCurrentMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *LolTeamCurrentMapStatePartialUpdate_Payload) Reset() {
	*x = LolTeamCurrentMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolTeamCurrentMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolTeamCurrentMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *LolTeamCurrentMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolTeamCurrentMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*LolTeamCurrentMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{11, 0}
}

func (m *LolTeamCurrentMapStatePartialUpdate_Payload) GetPayload() isLolTeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *LolTeamCurrentMapStatePartialUpdate_Payload) GetStatistics() *LolTeamCurrentMapStatisticsState {
	if x, ok := x.GetPayload().(*LolTeamCurrentMapStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *LolTeamCurrentMapStatePartialUpdate_Payload) GetPlayerCurrentMapState() *LolPlayerCurrentMapState {
	if x, ok := x.GetPayload().(*LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState); ok {
		return x.PlayerCurrentMapState
	}
	return nil
}

func (x *LolTeamCurrentMapStatePartialUpdate_Payload) GetPlayerCurrentMapPartialUpdate() *LolPlayerCurrentMapStatePartialUpdate {
	if x, ok := x.GetPayload().(*LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate); ok {
		return x.PlayerCurrentMapPartialUpdate
	}
	return nil
}

type isLolTeamCurrentMapStatePartialUpdate_Payload_Payload interface {
	isLolTeamCurrentMapStatePartialUpdate_Payload_Payload()
}

type LolTeamCurrentMapStatePartialUpdate_Payload_Statistics struct {
	Statistics *LolTeamCurrentMapStatisticsState `protobuf:"bytes,1,opt,name=statistics,proto3,oneof"`
}

type LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState struct {
	// Replaces whole value under given key in players map property in LolTeamCurrentMapState.
	PlayerCurrentMapState *LolPlayerCurrentMapState `protobuf:"bytes,2,opt,name=player_current_map_state,json=playerCurrentMapState,proto3,oneof"`
}

type LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate struct {
	// Apply partial update on value under given key in player_map_states map property in LolTeamMapState.
	PlayerCurrentMapPartialUpdate *LolPlayerCurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=player_current_map_partial_update,json=playerCurrentMapPartialUpdate,proto3,oneof"`
}

func (*LolTeamCurrentMapStatePartialUpdate_Payload_Statistics) isLolTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState) isLolTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate) isLolTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

type LolPlayerCurrentMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*LolPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo
	//	*LolPlayerCurrentMapStatePartialUpdate_Payload_Timers
	//	*LolPlayerCurrentMapStatePartialUpdate_Payload_Statistics
	//	*LolPlayerCurrentMapStatePartialUpdate_Payload_MapStatistics
	//	*LolPlayerCurrentMapStatePartialUpdate_Payload_Position
	Payload isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *LolPlayerCurrentMapStatePartialUpdate_Payload) Reset() {
	*x = LolPlayerCurrentMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_lol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LolPlayerCurrentMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LolPlayerCurrentMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *LolPlayerCurrentMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_lol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LolPlayerCurrentMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*LolPlayerCurrentMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_lol_proto_rawDescGZIP(), []int{14, 0}
}

func (m *LolPlayerCurrentMapStatePartialUpdate_Payload) GetPayload() isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *LolPlayerCurrentMapStatePartialUpdate_Payload) GetPlayerInfo() *LolPlayerInfoState {
	if x, ok := x.GetPayload().(*LolPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo); ok {
		return x.PlayerInfo
	}
	return nil
}

func (x *LolPlayerCurrentMapStatePartialUpdate_Payload) GetTimers() *LolPlayerCurrentMapTimersState {
	if x, ok := x.GetPayload().(*LolPlayerCurrentMapStatePartialUpdate_Payload_Timers); ok {
		return x.Timers
	}
	return nil
}

func (x *LolPlayerCurrentMapStatePartialUpdate_Payload) GetStatistics() *LolPlayerStatisticsState {
	if x, ok := x.GetPayload().(*LolPlayerCurrentMapStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *LolPlayerCurrentMapStatePartialUpdate_Payload) GetMapStatistics() *LolPlayerCurrentMapStatisticsState {
	if x, ok := x.GetPayload().(*LolPlayerCurrentMapStatePartialUpdate_Payload_MapStatistics); ok {
		return x.MapStatistics
	}
	return nil
}

func (x *LolPlayerCurrentMapStatePartialUpdate_Payload) GetPosition() *LolPosition {
	if x, ok := x.GetPayload().(*LolPlayerCurrentMapStatePartialUpdate_Payload_Position); ok {
		return x.Position
	}
	return nil
}

type isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload interface {
	isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload()
}

type LolPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo struct {
	// Replaces "player_info" property in LolPlayerInfoState.
	PlayerInfo *LolPlayerInfoState `protobuf:"bytes,1,opt,name=player_info,json=playerInfo,proto3,oneof"`
}

type LolPlayerCurrentMapStatePartialUpdate_Payload_Timers struct {
	// Replaces "timers" property in LolPlayerCurrentMapTimersState.
	Timers *LolPlayerCurrentMapTimersState `protobuf:"bytes,2,opt,name=timers,proto3,oneof"`
}

type LolPlayerCurrentMapStatePartialUpdate_Payload_Statistics struct {
	// Replaces "statistics" property in LolPlayerStatisticsState.
	Statistics *LolPlayerStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3,oneof"`
}

type LolPlayerCurrentMapStatePartialUpdate_Payload_MapStatistics struct {
	// Replaces "map_statistics" property in LolPlayerCurrentMapStatisticsState.
	MapStatistics *LolPlayerCurrentMapStatisticsState `protobuf:"bytes,4,opt,name=map_statistics,json=mapStatistics,proto3,oneof"`
}

type LolPlayerCurrentMapStatePartialUpdate_Payload_Position struct {
	// Replaces "position" property in LolPosition.
	Position *LolPosition `protobuf:"bytes,5,opt,name=position,proto3,oneof"`
}

func (*LolPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo) isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*LolPlayerCurrentMapStatePartialUpdate_Payload_Timers) isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*LolPlayerCurrentMapStatePartialUpdate_Payload_Statistics) isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*LolPlayerCurrentMapStatePartialUpdate_Payload_MapStatistics) isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*LolPlayerCurrentMapStatePartialUpdate_Payload_Position) isLolPlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

var File_bragi_lol_proto protoreflect.FileDescriptor

var file_bragi_lol_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x6c, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x62, 0x72, 0x61, 0x67, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x02,
	0x0a, 0x0f, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x7c, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x35, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xab, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x9c, 0x01, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4d, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5a, 0x0a, 0x1b, 0x4c, 0x6f, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x70, 0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x03, 0x0a,
	0x0d, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x52, 0x0a, 0x12, 0x4c, 0x6f,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x9a,
	0x03, 0x0a, 0x1f, 0x4c, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x54, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x1f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x75,
	0x72, 0x72, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x12,
	0x4c, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x4c, 0x6f, 0x6c, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x75, 0x72, 0x72,
	0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x4c, 0x6f, 0x6c, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0a, 0x69,
	0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x57, 0x0a, 0x0a, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x4c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x50, 0x0a, 0x16, 0x4c, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x6c, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x58, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc6, 0x03, 0x0a, 0x23, 0x4c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0xb5, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x49, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5a, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x1d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x16, 0x4c, 0x6f,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12,
	0x2b, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x77, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x1a, 0x5b, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x77, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x20, 0x4c, 0x6f, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62,
	0x61, 0x72, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69,
	0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x22, 0xf5, 0x03,
	0x0a, 0x25, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xdc, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3f, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x18, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72,
	0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x50, 0x0a,
	0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xde, 0x01, 0x0a, 0x22, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6d, 0x61, 0x6e, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x6e, 0x61,
	0x22, 0x96, 0x01, 0x0a, 0x1e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55,
	0x72, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x22, 0xbb, 0x03, 0x0a, 0x17, 0x4c, 0x6f,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e,
	0x12, 0x2b, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x46, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67,
	0x6f, 0x6c, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x03, 0x77, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x1a, 0x5c, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x77, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x4c, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x65, 0x70, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x65,
	0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x4c, 0x6f, 0x6c, 0x54, 0x75, 0x72,
	0x72, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f,
	0x6c, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x52, 0x07, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73,
	0x22, 0x44, 0x0a, 0x0d, 0x4c, 0x6f, 0x6c, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f,
	0x6c, 0x49, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x6c, 0x54, 0x75,
	0x72, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4c, 0x61,
	0x6e, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x54,
	0x75, 0x72, 0x72, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x75, 0x0a, 0x0c, 0x4c, 0x6f, 0x6c, 0x49, 0x6e, 0x68, 0x69,
	0x62, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x4c,
	0x61, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x4c, 0x6f, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x29, 0x0a, 0x0b,
	0x4c, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x2a, 0x54, 0x0a, 0x0a, 0x4c, 0x6f, 0x6c, 0x46, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x4c, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x4c, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x4c, 0x5f,
	0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x59, 0x0a,
	0x07, 0x4c, 0x6f, 0x6c, 0x4c, 0x61, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x4c, 0x5f,
	0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x4c, 0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x54,
	0x4f, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x4c, 0x5f, 0x4c, 0x41, 0x4e, 0x45,
	0x5f, 0x4d, 0x49, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x4c, 0x5f, 0x4c, 0x41,
	0x4e, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x10, 0x03, 0x2a, 0x8c, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x6c,
	0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f,
	0x4c, 0x5f, 0x54, 0x55, 0x52, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x4f, 0x4c, 0x5f, 0x54, 0x55, 0x52, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x31,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x4c, 0x5f, 0x54, 0x55, 0x52, 0x52, 0x45, 0x54,
	0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x4c,
	0x5f, 0x54, 0x55, 0x52, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x4c, 0x5f, 0x54, 0x55, 0x52, 0x52, 0x45, 0x54, 0x5f, 0x54,
	0x49, 0x45, 0x52, 0x5f, 0x34, 0x10, 0x04, 0x42, 0x21, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f,
	0x64, 0x64, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x5a, 0x0e, 0x6f, 0x64, 0x64, 0x69,
	0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bragi_lol_proto_rawDescOnce sync.Once
	file_bragi_lol_proto_rawDescData = file_bragi_lol_proto_rawDesc
)

func file_bragi_lol_proto_rawDescGZIP() []byte {
	file_bragi_lol_proto_rawDescOnce.Do(func() {
		file_bragi_lol_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_lol_proto_rawDescData)
	})
	return file_bragi_lol_proto_rawDescData
}

var file_bragi_lol_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bragi_lol_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_bragi_lol_proto_goTypes = []interface{}{
	(LolFaction)(0),                                     // 0: bragi.LolFaction
	(LolLane)(0),                                        // 1: bragi.LolLane
	(LolTurretTier)(0),                                  // 2: bragi.LolTurretTier
	(*LolMatchMessage)(nil),                             // 3: bragi.LolMatchMessage
	(*LolMatchSnapshot)(nil),                            // 4: bragi.LolMatchSnapshot
	(*LolMatchUpdate)(nil),                              // 5: bragi.LolMatchUpdate
	(*LolMatchStatePartialUpdates)(nil),                 // 6: bragi.LolMatchStatePartialUpdates
	(*LolMatchStatePartialUpdate)(nil),                  // 7: bragi.LolMatchStatePartialUpdate
	(*LolMatchState)(nil),                               // 8: bragi.LolMatchState
	(*LolMatchScoreState)(nil),                          // 9: bragi.LolMatchScoreState
	(*LolCurrentMapStatePartialUpdate)(nil),             // 10: bragi.LolCurrentMapStatePartialUpdate
	(*LolCurrentMapState)(nil),                          // 11: bragi.LolCurrentMapState
	(*LolCurrentMapTimeState)(nil),                      // 12: bragi.LolCurrentMapTimeState
	(*LolPreviousMapState)(nil),                         // 13: bragi.LolPreviousMapState
	(*LolTeamCurrentMapStatePartialUpdate)(nil),         // 14: bragi.LolTeamCurrentMapStatePartialUpdate
	(*LolTeamCurrentMapState)(nil),                      // 15: bragi.LolTeamCurrentMapState
	(*LolTeamCurrentMapStatisticsState)(nil),            // 16: bragi.LolTeamCurrentMapStatisticsState
	(*LolPlayerCurrentMapStatePartialUpdate)(nil),       // 17: bragi.LolPlayerCurrentMapStatePartialUpdate
	(*LolPlayerCurrentMapState)(nil),                    // 18: bragi.LolPlayerCurrentMapState
	(*LolPlayerCurrentMapStatisticsState)(nil),          // 19: bragi.LolPlayerCurrentMapStatisticsState
	(*LolPlayerCurrentMapTimersState)(nil),              // 20: bragi.LolPlayerCurrentMapTimersState
	(*LolTeamPreviousMapState)(nil),                     // 21: bragi.LolTeamPreviousMapState
	(*LolPlayerPreviousMapState)(nil),                   // 22: bragi.LolPlayerPreviousMapState
	(*LolPlayerInfoState)(nil),                          // 23: bragi.LolPlayerInfoState
	(*LolPlayerStatisticsState)(nil),                    // 24: bragi.LolPlayerStatisticsState
	(*LolTurrets)(nil),                                  // 25: bragi.LolTurrets
	(*LolInhibitors)(nil),                               // 26: bragi.LolInhibitors
	(*LolTurret)(nil),                                   // 27: bragi.LolTurret
	(*LolInhibitor)(nil),                                // 28: bragi.LolInhibitor
	(*LolPosition)(nil),                                 // 29: bragi.LolPosition
	(*LolMatchMessage_Payload)(nil),                     // 30: bragi.LolMatchMessage.Payload
	(*LolMatchUpdate_Payload)(nil),                      // 31: bragi.LolMatchUpdate.Payload
	nil,                                                 // 32: bragi.LolCurrentMapState.TeamsEntry
	nil,                                                 // 33: bragi.LolPreviousMapState.TeamsEntry
	(*LolTeamCurrentMapStatePartialUpdate_Payload)(nil), // 34: bragi.LolTeamCurrentMapStatePartialUpdate.Payload
	nil, // 35: bragi.LolTeamCurrentMapState.PlayersEntry
	(*LolPlayerCurrentMapStatePartialUpdate_Payload)(nil), // 36: bragi.LolPlayerCurrentMapStatePartialUpdate.Payload
	nil,                           // 37: bragi.LolTeamPreviousMapState.PlayersEntry
	(*timestamppb.Timestamp)(nil), // 38: google.protobuf.Timestamp
	(DataStatus)(0),               // 39: bragi.DataStatus
	(*Announcement)(nil),          // 40: bragi.Announcement
	(BestOfType)(0),               // 41: bragi.BestOfType
	(*Team)(nil),                  // 42: bragi.Team
	(MatchStatusType)(0),          // 43: bragi.MatchStatusType
	(*durationpb.Duration)(nil),   // 44: google.protobuf.Duration
}
var file_bragi_lol_proto_depIdxs = []int32{
	38, // 0: bragi.LolMatchMessage.timestamp:type_name -> google.protobuf.Timestamp
	39, // 1: bragi.LolMatchMessage.data_status:type_name -> bragi.DataStatus
	30, // 2: bragi.LolMatchMessage.payload:type_name -> bragi.LolMatchMessage.Payload
	38, // 3: bragi.LolMatchSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	39, // 4: bragi.LolMatchSnapshot.data_status:type_name -> bragi.DataStatus
	40, // 5: bragi.LolMatchSnapshot.announcements:type_name -> bragi.Announcement
	8,  // 6: bragi.LolMatchSnapshot.match_state:type_name -> bragi.LolMatchState
	31, // 7: bragi.LolMatchUpdate.payload:type_name -> bragi.LolMatchUpdate.Payload
	7,  // 8: bragi.LolMatchStatePartialUpdates.updates:type_name -> bragi.LolMatchStatePartialUpdate
	9,  // 9: bragi.LolMatchStatePartialUpdate.score:type_name -> bragi.LolMatchScoreState
	11, // 10: bragi.LolMatchStatePartialUpdate.current_map_state:type_name -> bragi.LolCurrentMapState
	10, // 11: bragi.LolMatchStatePartialUpdate.current_map_state_partial_update:type_name -> bragi.LolCurrentMapStatePartialUpdate
	41, // 12: bragi.LolMatchState.match_type:type_name -> bragi.BestOfType
	42, // 13: bragi.LolMatchState.home_team:type_name -> bragi.Team
	42, // 14: bragi.LolMatchState.away_team:type_name -> bragi.Team
	9,  // 15: bragi.LolMatchState.score:type_name -> bragi.LolMatchScoreState
	43, // 16: bragi.LolMatchState.match_status:type_name -> bragi.MatchStatusType
	11, // 17: bragi.LolMatchState.current_map:type_name -> bragi.LolCurrentMapState
	13, // 18: bragi.LolMatchState.previous_maps:type_name -> bragi.LolPreviousMapState
	12, // 19: bragi.LolCurrentMapStatePartialUpdate.game_time:type_name -> bragi.LolCurrentMapTimeState
	15, // 20: bragi.LolCurrentMapStatePartialUpdate.team_current_map_state:type_name -> bragi.LolTeamCurrentMapState
	14, // 21: bragi.LolCurrentMapStatePartialUpdate.team_current_map_partial_update:type_name -> bragi.LolTeamCurrentMapStatePartialUpdate
	25, // 22: bragi.LolCurrentMapStatePartialUpdate.turrets:type_name -> bragi.LolTurrets
	26, // 23: bragi.LolCurrentMapStatePartialUpdate.inhibitors:type_name -> bragi.LolInhibitors
	12, // 24: bragi.LolCurrentMapState.game_time:type_name -> bragi.LolCurrentMapTimeState
	32, // 25: bragi.LolCurrentMapState.teams:type_name -> bragi.LolCurrentMapState.TeamsEntry
	25, // 26: bragi.LolCurrentMapState.turrets:type_name -> bragi.LolTurrets
	26, // 27: bragi.LolCurrentMapState.inhibitors:type_name -> bragi.LolInhibitors
	44, // 28: bragi.LolCurrentMapTimeState.game_time:type_name -> google.protobuf.Duration
	33, // 29: bragi.LolPreviousMapState.teams:type_name -> bragi.LolPreviousMapState.TeamsEntry
	34, // 30: bragi.LolTeamCurrentMapStatePartialUpdate.payload:type_name -> bragi.LolTeamCurrentMapStatePartialUpdate.Payload
	0,  // 31: bragi.LolTeamCurrentMapState.faction:type_name -> bragi.LolFaction
	16, // 32: bragi.LolTeamCurrentMapState.statistics:type_name -> bragi.LolTeamCurrentMapStatisticsState
	35, // 33: bragi.LolTeamCurrentMapState.players:type_name -> bragi.LolTeamCurrentMapState.PlayersEntry
	36, // 34: bragi.LolPlayerCurrentMapStatePartialUpdate.payload:type_name -> bragi.LolPlayerCurrentMapStatePartialUpdate.Payload
	23, // 35: bragi.LolPlayerCurrentMapState.player_info:type_name -> bragi.LolPlayerInfoState
	20, // 36: bragi.LolPlayerCurrentMapState.timers:type_name -> bragi.LolPlayerCurrentMapTimersState
	24, // 37: bragi.LolPlayerCurrentMapState.statistics:type_name -> bragi.LolPlayerStatisticsState
	19, // 38: bragi.LolPlayerCurrentMapState.map_statistics:type_name -> bragi.LolPlayerCurrentMapStatisticsState
	29, // 39: bragi.LolPlayerCurrentMapState.position:type_name -> bragi.LolPosition
	44, // 40: bragi.LolPlayerCurrentMapTimersState.respawn_timer:type_name -> google.protobuf.Duration
	0,  // 41: bragi.LolTeamPreviousMapState.faction:type_name -> bragi.LolFaction
	37, // 42: bragi.LolTeamPreviousMapState.players:type_name -> bragi.LolTeamPreviousMapState.PlayersEntry
	23, // 43: bragi.LolPlayerPreviousMapState.player_info:type_name -> bragi.LolPlayerInfoState
	24, // 44: bragi.LolPlayerPreviousMapState.statistics:type_name -> bragi.LolPlayerStatisticsState
	27, // 45: bragi.LolTurrets.turrets:type_name -> bragi.LolTurret
	28, // 46: bragi.LolInhibitors.inhibitors:type_name -> bragi.LolInhibitor
	1,  // 47: bragi.LolTurret.lane:type_name -> bragi.LolLane
	0,  // 48: bragi.LolTurret.faction:type_name -> bragi.LolFaction
	2,  // 49: bragi.LolTurret.tier:type_name -> bragi.LolTurretTier
	1,  // 50: bragi.LolInhibitor.lane:type_name -> bragi.LolLane
	0,  // 51: bragi.LolInhibitor.faction:type_name -> bragi.LolFaction
	4,  // 52: bragi.LolMatchMessage.Payload.snapshot:type_name -> bragi.LolMatchSnapshot
	5,  // 53: bragi.LolMatchMessage.Payload.update:type_name -> bragi.LolMatchUpdate
	8,  // 54: bragi.LolMatchUpdate.Payload.match_state:type_name -> bragi.LolMatchState
	6,  // 55: bragi.LolMatchUpdate.Payload.partial_updates:type_name -> bragi.LolMatchStatePartialUpdates
	15, // 56: bragi.LolCurrentMapState.TeamsEntry.value:type_name -> bragi.LolTeamCurrentMapState
	21, // 57: bragi.LolPreviousMapState.TeamsEntry.value:type_name -> bragi.LolTeamPreviousMapState
	16, // 58: bragi.LolTeamCurrentMapStatePartialUpdate.Payload.statistics:type_name -> bragi.LolTeamCurrentMapStatisticsState
	18, // 59: bragi.LolTeamCurrentMapStatePartialUpdate.Payload.player_current_map_state:type_name -> bragi.LolPlayerCurrentMapState
	17, // 60: bragi.LolTeamCurrentMapStatePartialUpdate.Payload.player_current_map_partial_update:type_name -> bragi.LolPlayerCurrentMapStatePartialUpdate
	18, // 61: bragi.LolTeamCurrentMapState.PlayersEntry.value:type_name -> bragi.LolPlayerCurrentMapState
	23, // 62: bragi.LolPlayerCurrentMapStatePartialUpdate.Payload.player_info:type_name -> bragi.LolPlayerInfoState
	20, // 63: bragi.LolPlayerCurrentMapStatePartialUpdate.Payload.timers:type_name -> bragi.LolPlayerCurrentMapTimersState
	24, // 64: bragi.LolPlayerCurrentMapStatePartialUpdate.Payload.statistics:type_name -> bragi.LolPlayerStatisticsState
	19, // 65: bragi.LolPlayerCurrentMapStatePartialUpdate.Payload.map_statistics:type_name -> bragi.LolPlayerCurrentMapStatisticsState
	29, // 66: bragi.LolPlayerCurrentMapStatePartialUpdate.Payload.position:type_name -> bragi.LolPosition
	22, // 67: bragi.LolTeamPreviousMapState.PlayersEntry.value:type_name -> bragi.LolPlayerPreviousMapState
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_bragi_lol_proto_init() }
func file_bragi_lol_proto_init() {
	if File_bragi_lol_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_lol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchStatePartialUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolCurrentMapTimeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPreviousMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolTeamCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolTeamCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolTeamCurrentMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPlayerCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPlayerCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPlayerCurrentMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPlayerCurrentMapTimersState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolTeamPreviousMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPlayerPreviousMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPlayerInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPlayerStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolTurrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolInhibitors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolTurret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolInhibitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchMessage_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolMatchUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolTeamCurrentMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_lol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LolPlayerCurrentMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_lol_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*LolMatchStatePartialUpdate_Score)(nil),
		(*LolMatchStatePartialUpdate_CurrentMapState)(nil),
		(*LolMatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil),
	}
	file_bragi_lol_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*LolCurrentMapStatePartialUpdate_GameTime)(nil),
		(*LolCurrentMapStatePartialUpdate_TeamCurrentMapState)(nil),
		(*LolCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)(nil),
		(*LolCurrentMapStatePartialUpdate_Turrets)(nil),
		(*LolCurrentMapStatePartialUpdate_Inhibitors)(nil),
	}
	file_bragi_lol_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_bragi_lol_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_bragi_lol_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_bragi_lol_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_bragi_lol_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*LolMatchMessage_Payload_Snapshot)(nil),
		(*LolMatchMessage_Payload_Update)(nil),
	}
	file_bragi_lol_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*LolMatchUpdate_Payload_MatchState)(nil),
		(*LolMatchUpdate_Payload_PartialUpdates)(nil),
	}
	file_bragi_lol_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*LolTeamCurrentMapStatePartialUpdate_Payload_Statistics)(nil),
		(*LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState)(nil),
		(*LolTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate)(nil),
	}
	file_bragi_lol_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*LolPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo)(nil),
		(*LolPlayerCurrentMapStatePartialUpdate_Payload_Timers)(nil),
		(*LolPlayerCurrentMapStatePartialUpdate_Payload_Statistics)(nil),
		(*LolPlayerCurrentMapStatePartialUpdate_Payload_MapStatistics)(nil),
		(*LolPlayerCurrentMapStatePartialUpdate_Payload_Position)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_lol_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_lol_proto_goTypes,
		DependencyIndexes: file_bragi_lol_proto_depIdxs,
		EnumInfos:         file_bragi_lol_proto_enumTypes,
		MessageInfos:      file_bragi_lol_proto_msgTypes,
	}.Build()
	File_bragi_lol_proto = out.File
	file_bragi_lol_proto_rawDesc = nil
	file_bragi_lol_proto_goTypes = nil
	file_bragi_lol_proto_depIdxs = nil
}
