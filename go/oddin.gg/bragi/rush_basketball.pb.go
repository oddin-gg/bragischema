// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.3
// source: bragi/rush_basketball.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RushBasketballEventType int32

const (
	RushBasketballEventType_RUSH_BASKETBALL_EVENT_TYPE_UNSPECIFIED        RushBasketballEventType = 0
	RushBasketballEventType_RUSH_BASKETBALL_EVENT_TYPE_THREE_POINTER      RushBasketballEventType = 1
	RushBasketballEventType_RUSH_BASKETBALL_EVENT_TYPE_TWO_POINTER        RushBasketballEventType = 2
	RushBasketballEventType_RUSH_BASKETBALL_EVENT_TYPE_FREE_THROW_SUCCESS RushBasketballEventType = 3
	RushBasketballEventType_RUSH_BASKETBALL_EVENT_TYPE_FREE_THROW_MISS    RushBasketballEventType = 4
	RushBasketballEventType_RUSH_BASKETBALL_EVENT_TYPE_FOUL               RushBasketballEventType = 5
	RushBasketballEventType_RUSH_BASKETBALL_EVENT_TYPE_PERIOD_CHANGE      RushBasketballEventType = 6
)

// Enum value maps for RushBasketballEventType.
var (
	RushBasketballEventType_name = map[int32]string{
		0: "RUSH_BASKETBALL_EVENT_TYPE_UNSPECIFIED",
		1: "RUSH_BASKETBALL_EVENT_TYPE_THREE_POINTER",
		2: "RUSH_BASKETBALL_EVENT_TYPE_TWO_POINTER",
		3: "RUSH_BASKETBALL_EVENT_TYPE_FREE_THROW_SUCCESS",
		4: "RUSH_BASKETBALL_EVENT_TYPE_FREE_THROW_MISS",
		5: "RUSH_BASKETBALL_EVENT_TYPE_FOUL",
		6: "RUSH_BASKETBALL_EVENT_TYPE_PERIOD_CHANGE",
	}
	RushBasketballEventType_value = map[string]int32{
		"RUSH_BASKETBALL_EVENT_TYPE_UNSPECIFIED":        0,
		"RUSH_BASKETBALL_EVENT_TYPE_THREE_POINTER":      1,
		"RUSH_BASKETBALL_EVENT_TYPE_TWO_POINTER":        2,
		"RUSH_BASKETBALL_EVENT_TYPE_FREE_THROW_SUCCESS": 3,
		"RUSH_BASKETBALL_EVENT_TYPE_FREE_THROW_MISS":    4,
		"RUSH_BASKETBALL_EVENT_TYPE_FOUL":               5,
		"RUSH_BASKETBALL_EVENT_TYPE_PERIOD_CHANGE":      6,
	}
)

func (x RushBasketballEventType) Enum() *RushBasketballEventType {
	p := new(RushBasketballEventType)
	*p = x
	return p
}

func (x RushBasketballEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RushBasketballEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_rush_basketball_proto_enumTypes[0].Descriptor()
}

func (RushBasketballEventType) Type() protoreflect.EnumType {
	return &file_bragi_rush_basketball_proto_enumTypes[0]
}

func (x RushBasketballEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RushBasketballEventType.Descriptor instead.
func (RushBasketballEventType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{0}
}

type RushBasketballPeriod int32

const (
	RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_UNSPECIFIED RushBasketballPeriod = 0
	RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_QUARTER_1   RushBasketballPeriod = 1
	RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_QUARTER_2   RushBasketballPeriod = 2
	RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_QUARTER_3   RushBasketballPeriod = 3
	RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_QUARTER_4   RushBasketballPeriod = 4
	RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_OVERTIME    RushBasketballPeriod = 5
)

// Enum value maps for RushBasketballPeriod.
var (
	RushBasketballPeriod_name = map[int32]string{
		0: "RUSH_BASKETBALL_PERIOD_UNSPECIFIED",
		1: "RUSH_BASKETBALL_PERIOD_QUARTER_1",
		2: "RUSH_BASKETBALL_PERIOD_QUARTER_2",
		3: "RUSH_BASKETBALL_PERIOD_QUARTER_3",
		4: "RUSH_BASKETBALL_PERIOD_QUARTER_4",
		5: "RUSH_BASKETBALL_PERIOD_OVERTIME",
	}
	RushBasketballPeriod_value = map[string]int32{
		"RUSH_BASKETBALL_PERIOD_UNSPECIFIED": 0,
		"RUSH_BASKETBALL_PERIOD_QUARTER_1":   1,
		"RUSH_BASKETBALL_PERIOD_QUARTER_2":   2,
		"RUSH_BASKETBALL_PERIOD_QUARTER_3":   3,
		"RUSH_BASKETBALL_PERIOD_QUARTER_4":   4,
		"RUSH_BASKETBALL_PERIOD_OVERTIME":    5,
	}
)

func (x RushBasketballPeriod) Enum() *RushBasketballPeriod {
	p := new(RushBasketballPeriod)
	*p = x
	return p
}

func (x RushBasketballPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RushBasketballPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_rush_basketball_proto_enumTypes[1].Descriptor()
}

func (RushBasketballPeriod) Type() protoreflect.EnumType {
	return &file_bragi_rush_basketball_proto_enumTypes[1]
}

func (x RushBasketballPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RushBasketballPeriod.Descriptor instead.
func (RushBasketballPeriod) EnumDescriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{1}
}

type RushBasketballMatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// Message sequence.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Message timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Data status.
	DataStatus DataStatus `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	// Message payload.
	Payload *RushBasketballMatchMessage_Payload `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RushBasketballMatchMessage) Reset() {
	*x = RushBasketballMatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballMatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballMatchMessage) ProtoMessage() {}

func (x *RushBasketballMatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballMatchMessage.ProtoReflect.Descriptor instead.
func (*RushBasketballMatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{0}
}

func (x *RushBasketballMatchMessage) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushBasketballMatchMessage) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RushBasketballMatchMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RushBasketballMatchMessage) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *RushBasketballMatchMessage) GetPayload() *RushBasketballMatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushBasketballMatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// Message sequence.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Message timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Data status.
	DataStatus DataStatus `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	// Control announcements.
	Announcements []*Announcement `protobuf:"bytes,5,rep,name=announcements,proto3" json:"announcements,omitempty"`
	// Match state.
	MatchState *RushBasketballMatchState `protobuf:"bytes,6,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
}

func (x *RushBasketballMatchSnapshot) Reset() {
	*x = RushBasketballMatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballMatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballMatchSnapshot) ProtoMessage() {}

func (x *RushBasketballMatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballMatchSnapshot.ProtoReflect.Descriptor instead.
func (*RushBasketballMatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{1}
}

func (x *RushBasketballMatchSnapshot) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushBasketballMatchSnapshot) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RushBasketballMatchSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RushBasketballMatchSnapshot) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *RushBasketballMatchSnapshot) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *RushBasketballMatchSnapshot) GetMatchState() *RushBasketballMatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

type RushBasketballMatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Update payload.
	Payload *RushBasketballMatchUpdate_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RushBasketballMatchUpdate) Reset() {
	*x = RushBasketballMatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballMatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballMatchUpdate) ProtoMessage() {}

func (x *RushBasketballMatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballMatchUpdate.ProtoReflect.Descriptor instead.
func (*RushBasketballMatchUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{2}
}

func (x *RushBasketballMatchUpdate) GetPayload() *RushBasketballMatchUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushBasketballMatchStatePartialUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partial updates.
	Updates []*RushBasketballMatchStatePartialUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *RushBasketballMatchStatePartialUpdates) Reset() {
	*x = RushBasketballMatchStatePartialUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballMatchStatePartialUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballMatchStatePartialUpdates) ProtoMessage() {}

func (x *RushBasketballMatchStatePartialUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballMatchStatePartialUpdates.ProtoReflect.Descriptor instead.
func (*RushBasketballMatchStatePartialUpdates) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{3}
}

func (x *RushBasketballMatchStatePartialUpdates) GetUpdates() []*RushBasketballMatchStatePartialUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type RushBasketballMatchStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*RushBasketballMatchStatePartialUpdate_CurrentMapState
	//	*RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate
	//	*RushBasketballMatchStatePartialUpdate_Timeline
	Update isRushBasketballMatchStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *RushBasketballMatchStatePartialUpdate) Reset() {
	*x = RushBasketballMatchStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballMatchStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballMatchStatePartialUpdate) ProtoMessage() {}

func (x *RushBasketballMatchStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballMatchStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushBasketballMatchStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{4}
}

func (m *RushBasketballMatchStatePartialUpdate) GetUpdate() isRushBasketballMatchStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *RushBasketballMatchStatePartialUpdate) GetCurrentMapState() *RushBasketballCurrentMapState {
	if x, ok := x.GetUpdate().(*RushBasketballMatchStatePartialUpdate_CurrentMapState); ok {
		return x.CurrentMapState
	}
	return nil
}

func (x *RushBasketballMatchStatePartialUpdate) GetCurrentMapStatePartialUpdate() *RushBasketballCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate); ok {
		return x.CurrentMapStatePartialUpdate
	}
	return nil
}

func (x *RushBasketballMatchStatePartialUpdate) GetTimeline() *RushBasketballTimelineState {
	if x, ok := x.GetUpdate().(*RushBasketballMatchStatePartialUpdate_Timeline); ok {
		return x.Timeline
	}
	return nil
}

type isRushBasketballMatchStatePartialUpdate_Update interface {
	isRushBasketballMatchStatePartialUpdate_Update()
}

type RushBasketballMatchStatePartialUpdate_CurrentMapState struct {
	// Replaces "current_map_state" property in RushBasketballCurrentMapState. To minimalize issues with incorrect updates application
	// on current_map_state, server sends RushBasketballMatchStatePartialUpdate with RushBasketballCurrentMapState in periodic time set by customer.
	CurrentMapState *RushBasketballCurrentMapState `protobuf:"bytes,1,opt,name=current_map_state,json=currentMapState,proto3,oneof"`
}

type RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate struct {
	// Apply partial update on "current_map_state" property in RushBasketballMapState.
	CurrentMapStatePartialUpdate *RushBasketballCurrentMapStatePartialUpdate `protobuf:"bytes,2,opt,name=current_map_state_partial_update,json=currentMapStatePartialUpdate,proto3,oneof"`
}

type RushBasketballMatchStatePartialUpdate_Timeline struct {
	// Replaces "timeline" property in RushBasketballMatchState.
	Timeline *RushBasketballTimelineState `protobuf:"bytes,3,opt,name=timeline,proto3,oneof"`
}

func (*RushBasketballMatchStatePartialUpdate_CurrentMapState) isRushBasketballMatchStatePartialUpdate_Update() {
}

func (*RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate) isRushBasketballMatchStatePartialUpdate_Update() {
}

func (*RushBasketballMatchStatePartialUpdate_Timeline) isRushBasketballMatchStatePartialUpdate_Update() {
}

type RushBasketballMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// BO type.
	MatchType BestOfType `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=bragi.BestOfType" json:"match_type,omitempty"`
	// Home team.
	HomeTeam *Team `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	// Away team.
	AwayTeam *Team `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	// Match status.
	MatchStatus MatchStatusType `protobuf:"varint,6,opt,name=match_status,json=matchStatus,proto3,enum=bragi.MatchStatusType" json:"match_status,omitempty"`
	// Timeline state.
	Timeline *RushBasketballTimelineState `protobuf:"bytes,7,opt,name=timeline,proto3" json:"timeline,omitempty"`
	// Current map state.
	CurrentMap *RushBasketballCurrentMapState `protobuf:"bytes,8,opt,name=current_map,json=currentMap,proto3" json:"current_map,omitempty"`
}

func (x *RushBasketballMatchState) Reset() {
	*x = RushBasketballMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballMatchState) ProtoMessage() {}

func (x *RushBasketballMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballMatchState.ProtoReflect.Descriptor instead.
func (*RushBasketballMatchState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{5}
}

func (x *RushBasketballMatchState) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushBasketballMatchState) GetMatchType() BestOfType {
	if x != nil {
		return x.MatchType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *RushBasketballMatchState) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *RushBasketballMatchState) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *RushBasketballMatchState) GetMatchStatus() MatchStatusType {
	if x != nil {
		return x.MatchStatus
	}
	return MatchStatusType_MATCH_STATUS_TYPE_UNSPECIFIED
}

func (x *RushBasketballMatchState) GetTimeline() *RushBasketballTimelineState {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *RushBasketballMatchState) GetCurrentMap() *RushBasketballCurrentMapState {
	if x != nil {
		return x.CurrentMap
	}
	return nil
}

type RushBasketballTimelineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeline events.
	Events []*RushBasketballTimelineEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *RushBasketballTimelineState) Reset() {
	*x = RushBasketballTimelineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballTimelineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballTimelineState) ProtoMessage() {}

func (x *RushBasketballTimelineState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballTimelineState.ProtoReflect.Descriptor instead.
func (*RushBasketballTimelineState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{6}
}

func (x *RushBasketballTimelineState) GetEvents() []*RushBasketballTimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RushBasketballTimelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Team urn.
	TeamUrn string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	// Event type.
	EventType RushBasketballEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=bragi.RushBasketballEventType" json:"event_type,omitempty"`
	// Remaining game time in seconds (4 x 12 minutes).
	RemainingTime *durationpb.Duration `protobuf:"bytes,3,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`
	// Period.
	Period RushBasketballPeriod `protobuf:"varint,4,opt,name=period,proto3,enum=bragi.RushBasketballPeriod" json:"period,omitempty"`
}

func (x *RushBasketballTimelineEvent) Reset() {
	*x = RushBasketballTimelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballTimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballTimelineEvent) ProtoMessage() {}

func (x *RushBasketballTimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballTimelineEvent.ProtoReflect.Descriptor instead.
func (*RushBasketballTimelineEvent) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{7}
}

func (x *RushBasketballTimelineEvent) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushBasketballTimelineEvent) GetEventType() RushBasketballEventType {
	if x != nil {
		return x.EventType
	}
	return RushBasketballEventType_RUSH_BASKETBALL_EVENT_TYPE_UNSPECIFIED
}

func (x *RushBasketballTimelineEvent) GetRemainingTime() *durationpb.Duration {
	if x != nil {
		return x.RemainingTime
	}
	return nil
}

func (x *RushBasketballTimelineEvent) GetPeriod() RushBasketballPeriod {
	if x != nil {
		return x.Period
	}
	return RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_UNSPECIFIED
}

type RushBasketballCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*RushBasketballCurrentMapStatePartialUpdate_GameTime
	//	*RushBasketballCurrentMapStatePartialUpdate_Score
	//	*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState
	//	*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate
	Update isRushBasketballCurrentMapStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *RushBasketballCurrentMapStatePartialUpdate) Reset() {
	*x = RushBasketballCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *RushBasketballCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushBasketballCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{8}
}

func (m *RushBasketballCurrentMapStatePartialUpdate) GetUpdate() isRushBasketballCurrentMapStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *RushBasketballCurrentMapStatePartialUpdate) GetGameTime() *RushBasketballCurrentMapTimeState {
	if x, ok := x.GetUpdate().(*RushBasketballCurrentMapStatePartialUpdate_GameTime); ok {
		return x.GameTime
	}
	return nil
}

func (x *RushBasketballCurrentMapStatePartialUpdate) GetScore() *RushBasketballCurrentMapScoreState {
	if x, ok := x.GetUpdate().(*RushBasketballCurrentMapStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *RushBasketballCurrentMapStatePartialUpdate) GetTeamCurrentMapState() *RushBasketballTeamCurrentMapState {
	if x, ok := x.GetUpdate().(*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState); ok {
		return x.TeamCurrentMapState
	}
	return nil
}

func (x *RushBasketballCurrentMapStatePartialUpdate) GetTeamCurrentMapPartialUpdate() *RushBasketballTeamCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate); ok {
		return x.TeamCurrentMapPartialUpdate
	}
	return nil
}

type isRushBasketballCurrentMapStatePartialUpdate_Update interface {
	isRushBasketballCurrentMapStatePartialUpdate_Update()
}

type RushBasketballCurrentMapStatePartialUpdate_GameTime struct {
	// Replaces "game_time" property in RushBasketballCurrentMapState.
	GameTime *RushBasketballCurrentMapTimeState `protobuf:"bytes,1,opt,name=game_time,json=gameTime,proto3,oneof"`
}

type RushBasketballCurrentMapStatePartialUpdate_Score struct {
	// Replaces "score" property in RushSoccerCurrentMapState.
	Score *RushBasketballCurrentMapScoreState `protobuf:"bytes,2,opt,name=score,proto3,oneof"`
}

type RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState struct {
	// Replaces whole value under given key in teams map property in RushBasketballTeamCurrentMapState.
	TeamCurrentMapState *RushBasketballTeamCurrentMapState `protobuf:"bytes,3,opt,name=team_current_map_state,json=teamCurrentMapState,proto3,oneof"`
}

type RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate struct {
	// Apply partial update on value under given key in teams map property in RushBasketballCurrentMapState.
	TeamCurrentMapPartialUpdate *RushBasketballTeamCurrentMapStatePartialUpdate `protobuf:"bytes,4,opt,name=team_current_map_partial_update,json=teamCurrentMapPartialUpdate,proto3,oneof"`
}

func (*RushBasketballCurrentMapStatePartialUpdate_GameTime) isRushBasketballCurrentMapStatePartialUpdate_Update() {
}

func (*RushBasketballCurrentMapStatePartialUpdate_Score) isRushBasketballCurrentMapStatePartialUpdate_Update() {
}

func (*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState) isRushBasketballCurrentMapStatePartialUpdate_Update() {
}

func (*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) isRushBasketballCurrentMapStatePartialUpdate_Update() {
}

type RushBasketballCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Period.
	Period RushBasketballPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=bragi.RushBasketballPeriod" json:"period,omitempty"`
	// Game time.
	GameTime *RushBasketballCurrentMapTimeState `protobuf:"bytes,2,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	// Map score.
	Score *RushBasketballCurrentMapScoreState `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	// Paused flag.
	MapPaused bool `protobuf:"varint,4,opt,name=map_paused,json=mapPaused,proto3" json:"map_paused,omitempty"`
	// Teams.
	Teams map[string]*RushBasketballTeamCurrentMapState `protobuf:"bytes,5,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RushBasketballCurrentMapState) Reset() {
	*x = RushBasketballCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballCurrentMapState) ProtoMessage() {}

func (x *RushBasketballCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballCurrentMapState.ProtoReflect.Descriptor instead.
func (*RushBasketballCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{9}
}

func (x *RushBasketballCurrentMapState) GetPeriod() RushBasketballPeriod {
	if x != nil {
		return x.Period
	}
	return RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_UNSPECIFIED
}

func (x *RushBasketballCurrentMapState) GetGameTime() *RushBasketballCurrentMapTimeState {
	if x != nil {
		return x.GameTime
	}
	return nil
}

func (x *RushBasketballCurrentMapState) GetScore() *RushBasketballCurrentMapScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *RushBasketballCurrentMapState) GetMapPaused() bool {
	if x != nil {
		return x.MapPaused
	}
	return false
}

func (x *RushBasketballCurrentMapState) GetTeams() map[string]*RushBasketballTeamCurrentMapState {
	if x != nil {
		return x.Teams
	}
	return nil
}

type RushBasketballCurrentMapTimeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remaining game time in seconds (4 x 12 minutes).
	RemainingTime *durationpb.Duration `protobuf:"bytes,1,opt,name=remaining_time,json=remainingTime,proto3" json:"remaining_time,omitempty"`
}

func (x *RushBasketballCurrentMapTimeState) Reset() {
	*x = RushBasketballCurrentMapTimeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballCurrentMapTimeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballCurrentMapTimeState) ProtoMessage() {}

func (x *RushBasketballCurrentMapTimeState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballCurrentMapTimeState.ProtoReflect.Descriptor instead.
func (*RushBasketballCurrentMapTimeState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{10}
}

func (x *RushBasketballCurrentMapTimeState) GetRemainingTime() *durationpb.Duration {
	if x != nil {
		return x.RemainingTime
	}
	return nil
}

type RushBasketballCurrentMapScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of points of home team.
	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	// Number of points of away team.
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *RushBasketballCurrentMapScoreState) Reset() {
	*x = RushBasketballCurrentMapScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballCurrentMapScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballCurrentMapScoreState) ProtoMessage() {}

func (x *RushBasketballCurrentMapScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballCurrentMapScoreState.ProtoReflect.Descriptor instead.
func (*RushBasketballCurrentMapScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{11}
}

func (x *RushBasketballCurrentMapScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *RushBasketballCurrentMapScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type RushBasketballTeamCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Team urn.
	TeamUrn string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	// Update payload.
	Payload *RushBasketballTeamCurrentMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate) Reset() {
	*x = RushBasketballTeamCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballTeamCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballTeamCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushBasketballTeamCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{12}
}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate) GetPayload() *RushBasketballTeamCurrentMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushBasketballTeamCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Team urn.
	TeamUrn string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	// Current map statistics state.
	MapStatistics *RushBasketballTeamCurrentMapStatisticsState `protobuf:"bytes,2,opt,name=map_statistics,json=mapStatistics,proto3" json:"map_statistics,omitempty"`
	// Current map player state.
	Player *RushBasketballPlayerCurrentMapState `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *RushBasketballTeamCurrentMapState) Reset() {
	*x = RushBasketballTeamCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballTeamCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballTeamCurrentMapState) ProtoMessage() {}

func (x *RushBasketballTeamCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballTeamCurrentMapState.ProtoReflect.Descriptor instead.
func (*RushBasketballTeamCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{13}
}

func (x *RushBasketballTeamCurrentMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushBasketballTeamCurrentMapState) GetMapStatistics() *RushBasketballTeamCurrentMapStatisticsState {
	if x != nil {
		return x.MapStatistics
	}
	return nil
}

func (x *RushBasketballTeamCurrentMapState) GetPlayer() *RushBasketballPlayerCurrentMapState {
	if x != nil {
		return x.Player
	}
	return nil
}

type RushBasketballPlayerCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Player urn.
	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	// Player ext name.
	ExtName string `protobuf:"bytes,2,opt,name=ext_name,json=extName,proto3" json:"ext_name,omitempty"`
}

func (x *RushBasketballPlayerCurrentMapState) Reset() {
	*x = RushBasketballPlayerCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballPlayerCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballPlayerCurrentMapState) ProtoMessage() {}

func (x *RushBasketballPlayerCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballPlayerCurrentMapState.ProtoReflect.Descriptor instead.
func (*RushBasketballPlayerCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{14}
}

func (x *RushBasketballPlayerCurrentMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *RushBasketballPlayerCurrentMapState) GetExtName() string {
	if x != nil {
		return x.ExtName
	}
	return ""
}

type RushBasketballTeamCurrentMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  Number of points.
	PointsTotal uint32 `protobuf:"varint,1,opt,name=points_total,json=pointsTotal,proto3" json:"points_total,omitempty"`
	// Number of goals in the first half (two quarter).
	PointsHt uint32 `protobuf:"varint,2,opt,name=points_ht,json=pointsHt,proto3" json:"points_ht,omitempty"`
	// Number of all period points.
	PeriodPoints []*RushBasketballPeriodPoints `protobuf:"bytes,3,rep,name=period_points,json=periodPoints,proto3" json:"period_points,omitempty"`
	// Number of three pointers
	ThreePointers uint32 `protobuf:"varint,4,opt,name=three_pointers,json=threePointers,proto3" json:"three_pointers,omitempty"`
	// Number of two pointers
	TwoPointers uint32 `protobuf:"varint,5,opt,name=two_pointers,json=twoPointers,proto3" json:"two_pointers,omitempty"`
	// Number of successful free throws.
	FreeThrowsSuccessful uint32 `protobuf:"varint,6,opt,name=free_throws_successful,json=freeThrowsSuccessful,proto3" json:"free_throws_successful,omitempty"`
	// Number of missed free throws.
	FreeThrowsMissed uint32 `protobuf:"varint,7,opt,name=free_throws_missed,json=freeThrowsMissed,proto3" json:"free_throws_missed,omitempty"`
	// Number of fouls.
	Fouls uint32 `protobuf:"varint,8,opt,name=fouls,proto3" json:"fouls,omitempty"`
}

func (x *RushBasketballTeamCurrentMapStatisticsState) Reset() {
	*x = RushBasketballTeamCurrentMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballTeamCurrentMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballTeamCurrentMapStatisticsState) ProtoMessage() {}

func (x *RushBasketballTeamCurrentMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballTeamCurrentMapStatisticsState.ProtoReflect.Descriptor instead.
func (*RushBasketballTeamCurrentMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{15}
}

func (x *RushBasketballTeamCurrentMapStatisticsState) GetPointsTotal() uint32 {
	if x != nil {
		return x.PointsTotal
	}
	return 0
}

func (x *RushBasketballTeamCurrentMapStatisticsState) GetPointsHt() uint32 {
	if x != nil {
		return x.PointsHt
	}
	return 0
}

func (x *RushBasketballTeamCurrentMapStatisticsState) GetPeriodPoints() []*RushBasketballPeriodPoints {
	if x != nil {
		return x.PeriodPoints
	}
	return nil
}

func (x *RushBasketballTeamCurrentMapStatisticsState) GetThreePointers() uint32 {
	if x != nil {
		return x.ThreePointers
	}
	return 0
}

func (x *RushBasketballTeamCurrentMapStatisticsState) GetTwoPointers() uint32 {
	if x != nil {
		return x.TwoPointers
	}
	return 0
}

func (x *RushBasketballTeamCurrentMapStatisticsState) GetFreeThrowsSuccessful() uint32 {
	if x != nil {
		return x.FreeThrowsSuccessful
	}
	return 0
}

func (x *RushBasketballTeamCurrentMapStatisticsState) GetFreeThrowsMissed() uint32 {
	if x != nil {
		return x.FreeThrowsMissed
	}
	return 0
}

func (x *RushBasketballTeamCurrentMapStatisticsState) GetFouls() uint32 {
	if x != nil {
		return x.Fouls
	}
	return 0
}

type RushBasketballPeriodPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period RushBasketballPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=bragi.RushBasketballPeriod" json:"period,omitempty"`
	Points uint32               `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *RushBasketballPeriodPoints) Reset() {
	*x = RushBasketballPeriodPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballPeriodPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballPeriodPoints) ProtoMessage() {}

func (x *RushBasketballPeriodPoints) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballPeriodPoints.ProtoReflect.Descriptor instead.
func (*RushBasketballPeriodPoints) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{16}
}

func (x *RushBasketballPeriodPoints) GetPeriod() RushBasketballPeriod {
	if x != nil {
		return x.Period
	}
	return RushBasketballPeriod_RUSH_BASKETBALL_PERIOD_UNSPECIFIED
}

func (x *RushBasketballPeriodPoints) GetPoints() uint32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type RushBasketballMatchMessage_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*RushBasketballMatchMessage_Payload_Snapshot
	//	*RushBasketballMatchMessage_Payload_Update
	Payload isRushBasketballMatchMessage_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *RushBasketballMatchMessage_Payload) Reset() {
	*x = RushBasketballMatchMessage_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballMatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballMatchMessage_Payload) ProtoMessage() {}

func (x *RushBasketballMatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballMatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*RushBasketballMatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{0, 0}
}

func (m *RushBasketballMatchMessage_Payload) GetPayload() isRushBasketballMatchMessage_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RushBasketballMatchMessage_Payload) GetSnapshot() *RushBasketballMatchSnapshot {
	if x, ok := x.GetPayload().(*RushBasketballMatchMessage_Payload_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *RushBasketballMatchMessage_Payload) GetUpdate() *RushBasketballMatchUpdate {
	if x, ok := x.GetPayload().(*RushBasketballMatchMessage_Payload_Update); ok {
		return x.Update
	}
	return nil
}

type isRushBasketballMatchMessage_Payload_Payload interface {
	isRushBasketballMatchMessage_Payload_Payload()
}

type RushBasketballMatchMessage_Payload_Snapshot struct {
	// Initial snapshot.
	Snapshot *RushBasketballMatchSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type RushBasketballMatchMessage_Payload_Update struct {
	// Particular updates which are applied on property match_state in MatchState.
	Update *RushBasketballMatchUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*RushBasketballMatchMessage_Payload_Snapshot) isRushBasketballMatchMessage_Payload_Payload() {}

func (*RushBasketballMatchMessage_Payload_Update) isRushBasketballMatchMessage_Payload_Payload() {}

type RushBasketballMatchUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*RushBasketballMatchUpdate_Payload_MatchState
	//	*RushBasketballMatchUpdate_Payload_PartialUpdates
	Payload isRushBasketballMatchUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *RushBasketballMatchUpdate_Payload) Reset() {
	*x = RushBasketballMatchUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballMatchUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballMatchUpdate_Payload) ProtoMessage() {}

func (x *RushBasketballMatchUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballMatchUpdate_Payload.ProtoReflect.Descriptor instead.
func (*RushBasketballMatchUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{2, 0}
}

func (m *RushBasketballMatchUpdate_Payload) GetPayload() isRushBasketballMatchUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RushBasketballMatchUpdate_Payload) GetMatchState() *RushBasketballMatchState {
	if x, ok := x.GetPayload().(*RushBasketballMatchUpdate_Payload_MatchState); ok {
		return x.MatchState
	}
	return nil
}

func (x *RushBasketballMatchUpdate_Payload) GetPartialUpdates() *RushBasketballMatchStatePartialUpdates {
	if x, ok := x.GetPayload().(*RushBasketballMatchUpdate_Payload_PartialUpdates); ok {
		return x.PartialUpdates
	}
	return nil
}

type isRushBasketballMatchUpdate_Payload_Payload interface {
	isRushBasketballMatchUpdate_Payload_Payload()
}

type RushBasketballMatchUpdate_Payload_MatchState struct {
	// Complete match state.
	MatchState *RushBasketballMatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3,oneof"`
}

type RushBasketballMatchUpdate_Payload_PartialUpdates struct {
	// Partial update.
	PartialUpdates *RushBasketballMatchStatePartialUpdates `protobuf:"bytes,2,opt,name=partial_updates,json=partialUpdates,proto3,oneof"`
}

func (*RushBasketballMatchUpdate_Payload_MatchState) isRushBasketballMatchUpdate_Payload_Payload() {}

func (*RushBasketballMatchUpdate_Payload_PartialUpdates) isRushBasketballMatchUpdate_Payload_Payload() {
}

type RushBasketballTeamCurrentMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics
	//	*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player
	Payload isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) Reset() {
	*x = RushBasketballTeamCurrentMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_basketball_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushBasketballTeamCurrentMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_basketball_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushBasketballTeamCurrentMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*RushBasketballTeamCurrentMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_basketball_proto_rawDescGZIP(), []int{12, 0}
}

func (m *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) GetPayload() isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) GetMapStatistics() *RushBasketballTeamCurrentMapStatisticsState {
	if x, ok := x.GetPayload().(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics); ok {
		return x.MapStatistics
	}
	return nil
}

func (x *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) GetPlayer() *RushBasketballPlayerCurrentMapState {
	if x, ok := x.GetPayload().(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player); ok {
		return x.Player
	}
	return nil
}

type isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload interface {
	isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload()
}

type RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics struct {
	// Replaces "statistics" property in RushBasketballTeamCurrentMapState.
	MapStatistics *RushBasketballTeamCurrentMapStatisticsState `protobuf:"bytes,1,opt,name=map_statistics,json=mapStatistics,proto3,oneof"`
}

type RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player struct {
	// Replaces "player" property in RushBasketballTeamCurrentMapState.
	Player *RushBasketballPlayerCurrentMapState `protobuf:"bytes,2,opt,name=player,proto3,oneof"`
}

func (*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics) isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player) isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

var File_bragi_rush_basketball_proto protoreflect.FileDescriptor

var file_bragi_rush_basketball_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x03, 0x0a, 0x1a, 0x52, 0x75,
	0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x40, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x1b, 0x52, 0x75,
	0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x94, 0x02,
	0x0a, 0x19, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62,
	0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0xb2, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x58, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x70, 0x0a, 0x26, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x25, 0x52, 0x75, 0x73, 0x68, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x52, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61,
	0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xff, 0x02,
	0x0a, 0x18, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x39, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x22,
	0x59, 0x0a, 0x1b, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x1b, 0x52,
	0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52,
	0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xa2, 0x03, 0x0a, 0x2a,
	0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52,
	0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7d, 0x0a, 0x1f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x22, 0xa6, 0x03, 0x0a, 0x1d, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62,
	0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x62, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73,
	0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x21, 0x52, 0x75, 0x73,
	0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x62, 0x0a, 0x22, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61,
	0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6e, 0x12, 0x57, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68,
	0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xb7, 0x01, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5b, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73,
	0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x21, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x59, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65,
	0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x23, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x02, 0x0a, 0x2b, 0x52, 0x75, 0x73, 0x68, 0x42,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x48, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x62, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x77, 0x6f, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x77, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x72, 0x65, 0x65, 0x54, 0x68,
	0x72, 0x6f, 0x77, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65,
	0x54, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6f, 0x75, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6f, 0x75,
	0x6c, 0x73, 0x22, 0x69, 0x0a, 0x1a, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x62, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2a, 0xd5, 0x02,
	0x0a, 0x17, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x55, 0x53,
	0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41,
	0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b,
	0x45, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x31, 0x0a, 0x2d, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41,
	0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x57, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45,
	0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45,
	0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4f, 0x55, 0x4c, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x55, 0x53, 0x48, 0x5f,
	0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x06, 0x2a, 0xfb, 0x01, 0x0a, 0x14, 0x52, 0x75, 0x73, 0x68, 0x42, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c,
	0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42,
	0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x32,
	0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45,
	0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x52, 0x54, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x55, 0x53, 0x48,
	0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x23,
	0x0a, 0x1f, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c,
	0x4c, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x05, 0x42, 0x21, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x5a, 0x0e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67,
	0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bragi_rush_basketball_proto_rawDescOnce sync.Once
	file_bragi_rush_basketball_proto_rawDescData = file_bragi_rush_basketball_proto_rawDesc
)

func file_bragi_rush_basketball_proto_rawDescGZIP() []byte {
	file_bragi_rush_basketball_proto_rawDescOnce.Do(func() {
		file_bragi_rush_basketball_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_rush_basketball_proto_rawDescData)
	})
	return file_bragi_rush_basketball_proto_rawDescData
}

var file_bragi_rush_basketball_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bragi_rush_basketball_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bragi_rush_basketball_proto_goTypes = []interface{}{
	(RushBasketballEventType)(0),                           // 0: bragi.RushBasketballEventType
	(RushBasketballPeriod)(0),                              // 1: bragi.RushBasketballPeriod
	(*RushBasketballMatchMessage)(nil),                     // 2: bragi.RushBasketballMatchMessage
	(*RushBasketballMatchSnapshot)(nil),                    // 3: bragi.RushBasketballMatchSnapshot
	(*RushBasketballMatchUpdate)(nil),                      // 4: bragi.RushBasketballMatchUpdate
	(*RushBasketballMatchStatePartialUpdates)(nil),         // 5: bragi.RushBasketballMatchStatePartialUpdates
	(*RushBasketballMatchStatePartialUpdate)(nil),          // 6: bragi.RushBasketballMatchStatePartialUpdate
	(*RushBasketballMatchState)(nil),                       // 7: bragi.RushBasketballMatchState
	(*RushBasketballTimelineState)(nil),                    // 8: bragi.RushBasketballTimelineState
	(*RushBasketballTimelineEvent)(nil),                    // 9: bragi.RushBasketballTimelineEvent
	(*RushBasketballCurrentMapStatePartialUpdate)(nil),     // 10: bragi.RushBasketballCurrentMapStatePartialUpdate
	(*RushBasketballCurrentMapState)(nil),                  // 11: bragi.RushBasketballCurrentMapState
	(*RushBasketballCurrentMapTimeState)(nil),              // 12: bragi.RushBasketballCurrentMapTimeState
	(*RushBasketballCurrentMapScoreState)(nil),             // 13: bragi.RushBasketballCurrentMapScoreState
	(*RushBasketballTeamCurrentMapStatePartialUpdate)(nil), // 14: bragi.RushBasketballTeamCurrentMapStatePartialUpdate
	(*RushBasketballTeamCurrentMapState)(nil),              // 15: bragi.RushBasketballTeamCurrentMapState
	(*RushBasketballPlayerCurrentMapState)(nil),            // 16: bragi.RushBasketballPlayerCurrentMapState
	(*RushBasketballTeamCurrentMapStatisticsState)(nil),    // 17: bragi.RushBasketballTeamCurrentMapStatisticsState
	(*RushBasketballPeriodPoints)(nil),                     // 18: bragi.RushBasketballPeriodPoints
	(*RushBasketballMatchMessage_Payload)(nil),             // 19: bragi.RushBasketballMatchMessage.Payload
	(*RushBasketballMatchUpdate_Payload)(nil),              // 20: bragi.RushBasketballMatchUpdate.Payload
	nil, // 21: bragi.RushBasketballCurrentMapState.TeamsEntry
	(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload)(nil), // 22: bragi.RushBasketballTeamCurrentMapStatePartialUpdate.Payload
	(*timestamppb.Timestamp)(nil),                                  // 23: google.protobuf.Timestamp
	(DataStatus)(0),                                                // 24: bragi.DataStatus
	(*Announcement)(nil),                                           // 25: bragi.Announcement
	(BestOfType)(0),                                                // 26: bragi.BestOfType
	(*Team)(nil),                                                   // 27: bragi.Team
	(MatchStatusType)(0),                                           // 28: bragi.MatchStatusType
	(*durationpb.Duration)(nil),                                    // 29: google.protobuf.Duration
}
var file_bragi_rush_basketball_proto_depIdxs = []int32{
	23, // 0: bragi.RushBasketballMatchMessage.timestamp:type_name -> google.protobuf.Timestamp
	24, // 1: bragi.RushBasketballMatchMessage.data_status:type_name -> bragi.DataStatus
	19, // 2: bragi.RushBasketballMatchMessage.payload:type_name -> bragi.RushBasketballMatchMessage.Payload
	23, // 3: bragi.RushBasketballMatchSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	24, // 4: bragi.RushBasketballMatchSnapshot.data_status:type_name -> bragi.DataStatus
	25, // 5: bragi.RushBasketballMatchSnapshot.announcements:type_name -> bragi.Announcement
	7,  // 6: bragi.RushBasketballMatchSnapshot.match_state:type_name -> bragi.RushBasketballMatchState
	20, // 7: bragi.RushBasketballMatchUpdate.payload:type_name -> bragi.RushBasketballMatchUpdate.Payload
	6,  // 8: bragi.RushBasketballMatchStatePartialUpdates.updates:type_name -> bragi.RushBasketballMatchStatePartialUpdate
	11, // 9: bragi.RushBasketballMatchStatePartialUpdate.current_map_state:type_name -> bragi.RushBasketballCurrentMapState
	10, // 10: bragi.RushBasketballMatchStatePartialUpdate.current_map_state_partial_update:type_name -> bragi.RushBasketballCurrentMapStatePartialUpdate
	8,  // 11: bragi.RushBasketballMatchStatePartialUpdate.timeline:type_name -> bragi.RushBasketballTimelineState
	26, // 12: bragi.RushBasketballMatchState.match_type:type_name -> bragi.BestOfType
	27, // 13: bragi.RushBasketballMatchState.home_team:type_name -> bragi.Team
	27, // 14: bragi.RushBasketballMatchState.away_team:type_name -> bragi.Team
	28, // 15: bragi.RushBasketballMatchState.match_status:type_name -> bragi.MatchStatusType
	8,  // 16: bragi.RushBasketballMatchState.timeline:type_name -> bragi.RushBasketballTimelineState
	11, // 17: bragi.RushBasketballMatchState.current_map:type_name -> bragi.RushBasketballCurrentMapState
	9,  // 18: bragi.RushBasketballTimelineState.events:type_name -> bragi.RushBasketballTimelineEvent
	0,  // 19: bragi.RushBasketballTimelineEvent.event_type:type_name -> bragi.RushBasketballEventType
	29, // 20: bragi.RushBasketballTimelineEvent.remaining_time:type_name -> google.protobuf.Duration
	1,  // 21: bragi.RushBasketballTimelineEvent.period:type_name -> bragi.RushBasketballPeriod
	12, // 22: bragi.RushBasketballCurrentMapStatePartialUpdate.game_time:type_name -> bragi.RushBasketballCurrentMapTimeState
	13, // 23: bragi.RushBasketballCurrentMapStatePartialUpdate.score:type_name -> bragi.RushBasketballCurrentMapScoreState
	15, // 24: bragi.RushBasketballCurrentMapStatePartialUpdate.team_current_map_state:type_name -> bragi.RushBasketballTeamCurrentMapState
	14, // 25: bragi.RushBasketballCurrentMapStatePartialUpdate.team_current_map_partial_update:type_name -> bragi.RushBasketballTeamCurrentMapStatePartialUpdate
	1,  // 26: bragi.RushBasketballCurrentMapState.period:type_name -> bragi.RushBasketballPeriod
	12, // 27: bragi.RushBasketballCurrentMapState.game_time:type_name -> bragi.RushBasketballCurrentMapTimeState
	13, // 28: bragi.RushBasketballCurrentMapState.score:type_name -> bragi.RushBasketballCurrentMapScoreState
	21, // 29: bragi.RushBasketballCurrentMapState.teams:type_name -> bragi.RushBasketballCurrentMapState.TeamsEntry
	29, // 30: bragi.RushBasketballCurrentMapTimeState.remaining_time:type_name -> google.protobuf.Duration
	22, // 31: bragi.RushBasketballTeamCurrentMapStatePartialUpdate.payload:type_name -> bragi.RushBasketballTeamCurrentMapStatePartialUpdate.Payload
	17, // 32: bragi.RushBasketballTeamCurrentMapState.map_statistics:type_name -> bragi.RushBasketballTeamCurrentMapStatisticsState
	16, // 33: bragi.RushBasketballTeamCurrentMapState.player:type_name -> bragi.RushBasketballPlayerCurrentMapState
	18, // 34: bragi.RushBasketballTeamCurrentMapStatisticsState.period_points:type_name -> bragi.RushBasketballPeriodPoints
	1,  // 35: bragi.RushBasketballPeriodPoints.period:type_name -> bragi.RushBasketballPeriod
	3,  // 36: bragi.RushBasketballMatchMessage.Payload.snapshot:type_name -> bragi.RushBasketballMatchSnapshot
	4,  // 37: bragi.RushBasketballMatchMessage.Payload.update:type_name -> bragi.RushBasketballMatchUpdate
	7,  // 38: bragi.RushBasketballMatchUpdate.Payload.match_state:type_name -> bragi.RushBasketballMatchState
	5,  // 39: bragi.RushBasketballMatchUpdate.Payload.partial_updates:type_name -> bragi.RushBasketballMatchStatePartialUpdates
	15, // 40: bragi.RushBasketballCurrentMapState.TeamsEntry.value:type_name -> bragi.RushBasketballTeamCurrentMapState
	17, // 41: bragi.RushBasketballTeamCurrentMapStatePartialUpdate.Payload.map_statistics:type_name -> bragi.RushBasketballTeamCurrentMapStatisticsState
	16, // 42: bragi.RushBasketballTeamCurrentMapStatePartialUpdate.Payload.player:type_name -> bragi.RushBasketballPlayerCurrentMapState
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_bragi_rush_basketball_proto_init() }
func file_bragi_rush_basketball_proto_init() {
	if File_bragi_rush_basketball_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_rush_basketball_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballMatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballMatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballMatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballMatchStatePartialUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballMatchStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballTimelineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballTimelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballCurrentMapTimeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballCurrentMapScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballTeamCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballTeamCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballPlayerCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballTeamCurrentMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballPeriodPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballMatchMessage_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballMatchUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_basketball_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_rush_basketball_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RushBasketballMatchStatePartialUpdate_CurrentMapState)(nil),
		(*RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil),
		(*RushBasketballMatchStatePartialUpdate_Timeline)(nil),
	}
	file_bragi_rush_basketball_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RushBasketballCurrentMapStatePartialUpdate_GameTime)(nil),
		(*RushBasketballCurrentMapStatePartialUpdate_Score)(nil),
		(*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState)(nil),
		(*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)(nil),
	}
	file_bragi_rush_basketball_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*RushBasketballMatchMessage_Payload_Snapshot)(nil),
		(*RushBasketballMatchMessage_Payload_Update)(nil),
	}
	file_bragi_rush_basketball_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*RushBasketballMatchUpdate_Payload_MatchState)(nil),
		(*RushBasketballMatchUpdate_Payload_PartialUpdates)(nil),
	}
	file_bragi_rush_basketball_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics)(nil),
		(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_rush_basketball_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_rush_basketball_proto_goTypes,
		DependencyIndexes: file_bragi_rush_basketball_proto_depIdxs,
		EnumInfos:         file_bragi_rush_basketball_proto_enumTypes,
		MessageInfos:      file_bragi_rush_basketball_proto_msgTypes,
	}.Build()
	File_bragi_rush_basketball_proto = out.File
	file_bragi_rush_basketball_proto_rawDesc = nil
	file_bragi_rush_basketball_proto_goTypes = nil
	file_bragi_rush_basketball_proto_depIdxs = nil
}
