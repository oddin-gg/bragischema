// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: bragi/rush_basketball.proto

package bragi

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *RushBasketballMatchMessage_Payload) CloneVT() *RushBasketballMatchMessage_Payload {
	if m == nil {
		return (*RushBasketballMatchMessage_Payload)(nil)
	}
	r := new(RushBasketballMatchMessage_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushBasketballMatchMessage_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballMatchMessage_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballMatchMessage_Payload_Snapshot) CloneVT() isRushBasketballMatchMessage_Payload_Payload {
	if m == nil {
		return (*RushBasketballMatchMessage_Payload_Snapshot)(nil)
	}
	r := new(RushBasketballMatchMessage_Payload_Snapshot)
	r.Snapshot = m.Snapshot.CloneVT()
	return r
}

func (m *RushBasketballMatchMessage_Payload_Update) CloneVT() isRushBasketballMatchMessage_Payload_Payload {
	if m == nil {
		return (*RushBasketballMatchMessage_Payload_Update)(nil)
	}
	r := new(RushBasketballMatchMessage_Payload_Update)
	r.Update = m.Update.CloneVT()
	return r
}

func (m *RushBasketballMatchMessage) CloneVT() *RushBasketballMatchMessage {
	if m == nil {
		return (*RushBasketballMatchMessage)(nil)
	}
	r := new(RushBasketballMatchMessage)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballMatchMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballMatchSnapshot) CloneVT() *RushBasketballMatchSnapshot {
	if m == nil {
		return (*RushBasketballMatchSnapshot)(nil)
	}
	r := new(RushBasketballMatchSnapshot)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.MatchState = m.MatchState.CloneVT()
	r.Tournament = m.Tournament.CloneVT()
	if rhs := m.Announcements; rhs != nil {
		tmpContainer := make([]*Announcement, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Announcements = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballMatchSnapshot) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballMatchUpdate_Payload) CloneVT() *RushBasketballMatchUpdate_Payload {
	if m == nil {
		return (*RushBasketballMatchUpdate_Payload)(nil)
	}
	r := new(RushBasketballMatchUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushBasketballMatchUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballMatchUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballMatchUpdate_Payload_MatchState) CloneVT() isRushBasketballMatchUpdate_Payload_Payload {
	if m == nil {
		return (*RushBasketballMatchUpdate_Payload_MatchState)(nil)
	}
	r := new(RushBasketballMatchUpdate_Payload_MatchState)
	r.MatchState = m.MatchState.CloneVT()
	return r
}

func (m *RushBasketballMatchUpdate_Payload_PartialUpdates) CloneVT() isRushBasketballMatchUpdate_Payload_Payload {
	if m == nil {
		return (*RushBasketballMatchUpdate_Payload_PartialUpdates)(nil)
	}
	r := new(RushBasketballMatchUpdate_Payload_PartialUpdates)
	r.PartialUpdates = m.PartialUpdates.CloneVT()
	return r
}

func (m *RushBasketballMatchUpdate) CloneVT() *RushBasketballMatchUpdate {
	if m == nil {
		return (*RushBasketballMatchUpdate)(nil)
	}
	r := new(RushBasketballMatchUpdate)
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballMatchUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballMatchStatePartialUpdates) CloneVT() *RushBasketballMatchStatePartialUpdates {
	if m == nil {
		return (*RushBasketballMatchStatePartialUpdates)(nil)
	}
	r := new(RushBasketballMatchStatePartialUpdates)
	if rhs := m.Updates; rhs != nil {
		tmpContainer := make([]*RushBasketballMatchStatePartialUpdate, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Updates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballMatchStatePartialUpdates) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballMatchStatePartialUpdate) CloneVT() *RushBasketballMatchStatePartialUpdate {
	if m == nil {
		return (*RushBasketballMatchStatePartialUpdate)(nil)
	}
	r := new(RushBasketballMatchStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isRushBasketballMatchStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballMatchStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballMatchStatePartialUpdate_CurrentMapState) CloneVT() isRushBasketballMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushBasketballMatchStatePartialUpdate_CurrentMapState)(nil)
	}
	r := new(RushBasketballMatchStatePartialUpdate_CurrentMapState)
	r.CurrentMapState = m.CurrentMapState.CloneVT()
	return r
}

func (m *RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate) CloneVT() isRushBasketballMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil)
	}
	r := new(RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	r.CurrentMapStatePartialUpdate = m.CurrentMapStatePartialUpdate.CloneVT()
	return r
}

func (m *RushBasketballMatchStatePartialUpdate_Timeline) CloneVT() isRushBasketballMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushBasketballMatchStatePartialUpdate_Timeline)(nil)
	}
	r := new(RushBasketballMatchStatePartialUpdate_Timeline)
	r.Timeline = m.Timeline.CloneVT()
	return r
}

func (m *RushBasketballMatchState) CloneVT() *RushBasketballMatchState {
	if m == nil {
		return (*RushBasketballMatchState)(nil)
	}
	r := new(RushBasketballMatchState)
	r.MatchUrn = m.MatchUrn
	r.MatchType = m.MatchType
	r.HomeTeam = m.HomeTeam.CloneVT()
	r.AwayTeam = m.AwayTeam.CloneVT()
	r.MatchStatus = m.MatchStatus
	r.Timeline = m.Timeline.CloneVT()
	r.CurrentMap = m.CurrentMap.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballMatchState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballTimelineState) CloneVT() *RushBasketballTimelineState {
	if m == nil {
		return (*RushBasketballTimelineState)(nil)
	}
	r := new(RushBasketballTimelineState)
	if rhs := m.Events; rhs != nil {
		tmpContainer := make([]*RushBasketballTimelineEvent, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Events = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballTimelineState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballTimelineEvent) CloneVT() *RushBasketballTimelineEvent {
	if m == nil {
		return (*RushBasketballTimelineEvent)(nil)
	}
	r := new(RushBasketballTimelineEvent)
	r.TeamUrn = m.TeamUrn
	r.EventType = m.EventType
	r.RemainingTime = (*durationpb.Duration)((*durationpb1.Duration)(m.RemainingTime).CloneVT())
	r.Period = m.Period
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballTimelineEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballCurrentMapStatePartialUpdate) CloneVT() *RushBasketballCurrentMapStatePartialUpdate {
	if m == nil {
		return (*RushBasketballCurrentMapStatePartialUpdate)(nil)
	}
	r := new(RushBasketballCurrentMapStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isRushBasketballCurrentMapStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballCurrentMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballCurrentMapStatePartialUpdate_GameTime) CloneVT() isRushBasketballCurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*RushBasketballCurrentMapStatePartialUpdate_GameTime)(nil)
	}
	r := new(RushBasketballCurrentMapStatePartialUpdate_GameTime)
	r.GameTime = m.GameTime.CloneVT()
	return r
}

func (m *RushBasketballCurrentMapStatePartialUpdate_Score) CloneVT() isRushBasketballCurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*RushBasketballCurrentMapStatePartialUpdate_Score)(nil)
	}
	r := new(RushBasketballCurrentMapStatePartialUpdate_Score)
	r.Score = m.Score.CloneVT()
	return r
}

func (m *RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState) CloneVT() isRushBasketballCurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState)(nil)
	}
	r := new(RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState)
	r.TeamCurrentMapState = m.TeamCurrentMapState.CloneVT()
	return r
}

func (m *RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) CloneVT() isRushBasketballCurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)(nil)
	}
	r := new(RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)
	r.TeamCurrentMapPartialUpdate = m.TeamCurrentMapPartialUpdate.CloneVT()
	return r
}

func (m *RushBasketballCurrentMapState) CloneVT() *RushBasketballCurrentMapState {
	if m == nil {
		return (*RushBasketballCurrentMapState)(nil)
	}
	r := new(RushBasketballCurrentMapState)
	r.Period = m.Period
	r.GameTime = m.GameTime.CloneVT()
	r.Score = m.Score.CloneVT()
	r.MapPaused = m.MapPaused
	if rhs := m.Teams; rhs != nil {
		tmpContainer := make(map[string]*RushBasketballTeamCurrentMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Teams = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballCurrentMapTimeState) CloneVT() *RushBasketballCurrentMapTimeState {
	if m == nil {
		return (*RushBasketballCurrentMapTimeState)(nil)
	}
	r := new(RushBasketballCurrentMapTimeState)
	r.RemainingTime = (*durationpb.Duration)((*durationpb1.Duration)(m.RemainingTime).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballCurrentMapTimeState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballCurrentMapScoreState) CloneVT() *RushBasketballCurrentMapScoreState {
	if m == nil {
		return (*RushBasketballCurrentMapScoreState)(nil)
	}
	r := new(RushBasketballCurrentMapScoreState)
	r.HomeScore = m.HomeScore
	r.AwayScore = m.AwayScore
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballCurrentMapScoreState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) CloneVT() *RushBasketballTeamCurrentMapStatePartialUpdate_Payload {
	if m == nil {
		return (*RushBasketballTeamCurrentMapStatePartialUpdate_Payload)(nil)
	}
	r := new(RushBasketballTeamCurrentMapStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics) CloneVT() isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics)(nil)
	}
	r := new(RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics)
	r.MapStatistics = m.MapStatistics.CloneVT()
	return r
}

func (m *RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player) CloneVT() isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player)(nil)
	}
	r := new(RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player)
	r.Player = m.Player.CloneVT()
	return r
}

func (m *RushBasketballTeamCurrentMapStatePartialUpdate) CloneVT() *RushBasketballTeamCurrentMapStatePartialUpdate {
	if m == nil {
		return (*RushBasketballTeamCurrentMapStatePartialUpdate)(nil)
	}
	r := new(RushBasketballTeamCurrentMapStatePartialUpdate)
	r.TeamUrn = m.TeamUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballTeamCurrentMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballTeamCurrentMapState) CloneVT() *RushBasketballTeamCurrentMapState {
	if m == nil {
		return (*RushBasketballTeamCurrentMapState)(nil)
	}
	r := new(RushBasketballTeamCurrentMapState)
	r.TeamUrn = m.TeamUrn
	r.MapStatistics = m.MapStatistics.CloneVT()
	r.Player = m.Player.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballTeamCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballPlayerCurrentMapState) CloneVT() *RushBasketballPlayerCurrentMapState {
	if m == nil {
		return (*RushBasketballPlayerCurrentMapState)(nil)
	}
	r := new(RushBasketballPlayerCurrentMapState)
	r.PlayerUrn = m.PlayerUrn
	r.ExtName = m.ExtName
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballPlayerCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballTeamCurrentMapStatisticsState) CloneVT() *RushBasketballTeamCurrentMapStatisticsState {
	if m == nil {
		return (*RushBasketballTeamCurrentMapStatisticsState)(nil)
	}
	r := new(RushBasketballTeamCurrentMapStatisticsState)
	r.PointsTotal = m.PointsTotal
	r.PointsHt = m.PointsHt
	r.ThreePointers = m.ThreePointers
	r.TwoPointers = m.TwoPointers
	r.FreeThrowsSuccessful = m.FreeThrowsSuccessful
	r.FreeThrowsMissed = m.FreeThrowsMissed
	r.Fouls = m.Fouls
	if rhs := m.PeriodPoints; rhs != nil {
		tmpContainer := make([]*RushBasketballPeriodPoints, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PeriodPoints = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballTeamCurrentMapStatisticsState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushBasketballPeriodPoints) CloneVT() *RushBasketballPeriodPoints {
	if m == nil {
		return (*RushBasketballPeriodPoints)(nil)
	}
	r := new(RushBasketballPeriodPoints)
	r.Period = m.Period
	r.Points = m.Points
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushBasketballPeriodPoints) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *RushBasketballMatchMessage_Payload) EqualVT(that *RushBasketballMatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushBasketballMatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballMatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballMatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballMatchMessage_Payload_Snapshot) EqualVT(thatIface isRushBasketballMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*RushBasketballMatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &RushBasketballMatchSnapshot{}
		}
		if q == nil {
			q = &RushBasketballMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballMatchMessage_Payload_Update) EqualVT(thatIface isRushBasketballMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*RushBasketballMatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &RushBasketballMatchUpdate{}
		}
		if q == nil {
			q = &RushBasketballMatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballMatchMessage) EqualVT(that *RushBasketballMatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballMatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballMatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballMatchSnapshot) EqualVT(that *RushBasketballMatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballMatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballMatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballMatchUpdate_Payload) EqualVT(that *RushBasketballMatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushBasketballMatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballMatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballMatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballMatchUpdate_Payload_MatchState) EqualVT(thatIface isRushBasketballMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushBasketballMatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &RushBasketballMatchState{}
		}
		if q == nil {
			q = &RushBasketballMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballMatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isRushBasketballMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushBasketballMatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &RushBasketballMatchStatePartialUpdates{}
		}
		if q == nil {
			q = &RushBasketballMatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballMatchUpdate) EqualVT(that *RushBasketballMatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballMatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballMatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballMatchStatePartialUpdates) EqualVT(that *RushBasketballMatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushBasketballMatchStatePartialUpdate{}
			}
			if q == nil {
				q = &RushBasketballMatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballMatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballMatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballMatchStatePartialUpdate) EqualVT(that *RushBasketballMatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isRushBasketballMatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballMatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballMatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballMatchStatePartialUpdate_CurrentMapState) EqualVT(thatIface isRushBasketballMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushBasketballMatchStatePartialUpdate_CurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapState, that.CurrentMapState; p != q {
		if p == nil {
			p = &RushBasketballCurrentMapState{}
		}
		if q == nil {
			q = &RushBasketballCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate) EqualVT(thatIface isRushBasketballMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushBasketballMatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapStatePartialUpdate, that.CurrentMapStatePartialUpdate; p != q {
		if p == nil {
			p = &RushBasketballCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &RushBasketballCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballMatchStatePartialUpdate_Timeline) EqualVT(thatIface isRushBasketballMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushBasketballMatchStatePartialUpdate_Timeline)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Timeline, that.Timeline; p != q {
		if p == nil {
			p = &RushBasketballTimelineState{}
		}
		if q == nil {
			q = &RushBasketballTimelineState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballMatchState) EqualVT(that *RushBasketballMatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.Timeline.EqualVT(that.Timeline) {
		return false
	}
	if !this.CurrentMap.EqualVT(that.CurrentMap) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballMatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballMatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballTimelineState) EqualVT(that *RushBasketballTimelineState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushBasketballTimelineEvent{}
			}
			if q == nil {
				q = &RushBasketballTimelineEvent{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballTimelineState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballTimelineState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballTimelineEvent) EqualVT(that *RushBasketballTimelineEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.EventType != that.EventType {
		return false
	}
	if !(*durationpb1.Duration)(this.RemainingTime).EqualVT((*durationpb1.Duration)(that.RemainingTime)) {
		return false
	}
	if this.Period != that.Period {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballTimelineEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballTimelineEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballCurrentMapStatePartialUpdate) EqualVT(that *RushBasketballCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isRushBasketballCurrentMapStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballCurrentMapStatePartialUpdate_GameTime) EqualVT(thatIface isRushBasketballCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushBasketballCurrentMapStatePartialUpdate_GameTime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GameTime, that.GameTime; p != q {
		if p == nil {
			p = &RushBasketballCurrentMapTimeState{}
		}
		if q == nil {
			q = &RushBasketballCurrentMapTimeState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballCurrentMapStatePartialUpdate_Score) EqualVT(thatIface isRushBasketballCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushBasketballCurrentMapStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &RushBasketballCurrentMapScoreState{}
		}
		if q == nil {
			q = &RushBasketballCurrentMapScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState) EqualVT(thatIface isRushBasketballCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapState, that.TeamCurrentMapState; p != q {
		if p == nil {
			p = &RushBasketballTeamCurrentMapState{}
		}
		if q == nil {
			q = &RushBasketballTeamCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) EqualVT(thatIface isRushBasketballCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushBasketballCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapPartialUpdate, that.TeamCurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &RushBasketballTeamCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &RushBasketballTeamCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballCurrentMapState) EqualVT(that *RushBasketballCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Period != that.Period {
		return false
	}
	if !this.GameTime.EqualVT(that.GameTime) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MapPaused != that.MapPaused {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushBasketballTeamCurrentMapState{}
			}
			if q == nil {
				q = &RushBasketballTeamCurrentMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballCurrentMapTimeState) EqualVT(that *RushBasketballCurrentMapTimeState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.RemainingTime).EqualVT((*durationpb1.Duration)(that.RemainingTime)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballCurrentMapTimeState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballCurrentMapTimeState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballCurrentMapScoreState) EqualVT(that *RushBasketballCurrentMapScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballCurrentMapScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballCurrentMapScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) EqualVT(that *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballTeamCurrentMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics) EqualVT(thatIface isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_MapStatistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MapStatistics, that.MapStatistics; p != q {
		if p == nil {
			p = &RushBasketballTeamCurrentMapStatisticsState{}
		}
		if q == nil {
			q = &RushBasketballTeamCurrentMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player) EqualVT(thatIface isRushBasketballTeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushBasketballTeamCurrentMapStatePartialUpdate_Payload_Player)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Player, that.Player; p != q {
		if p == nil {
			p = &RushBasketballPlayerCurrentMapState{}
		}
		if q == nil {
			q = &RushBasketballPlayerCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushBasketballTeamCurrentMapStatePartialUpdate) EqualVT(that *RushBasketballTeamCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballTeamCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballTeamCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballTeamCurrentMapState) EqualVT(that *RushBasketballTeamCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.MapStatistics.EqualVT(that.MapStatistics) {
		return false
	}
	if !this.Player.EqualVT(that.Player) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballTeamCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballTeamCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballPlayerCurrentMapState) EqualVT(that *RushBasketballPlayerCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.ExtName != that.ExtName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballPlayerCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballPlayerCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballTeamCurrentMapStatisticsState) EqualVT(that *RushBasketballTeamCurrentMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PointsTotal != that.PointsTotal {
		return false
	}
	if this.PointsHt != that.PointsHt {
		return false
	}
	if len(this.PeriodPoints) != len(that.PeriodPoints) {
		return false
	}
	for i, vx := range this.PeriodPoints {
		vy := that.PeriodPoints[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushBasketballPeriodPoints{}
			}
			if q == nil {
				q = &RushBasketballPeriodPoints{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ThreePointers != that.ThreePointers {
		return false
	}
	if this.TwoPointers != that.TwoPointers {
		return false
	}
	if this.FreeThrowsSuccessful != that.FreeThrowsSuccessful {
		return false
	}
	if this.FreeThrowsMissed != that.FreeThrowsMissed {
		return false
	}
	if this.Fouls != that.Fouls {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballTeamCurrentMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballTeamCurrentMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushBasketballPeriodPoints) EqualVT(that *RushBasketballPeriodPoints) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Period != that.Period {
		return false
	}
	if this.Points != that.Points {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushBasketballPeriodPoints) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushBasketballPeriodPoints)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
