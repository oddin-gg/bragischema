// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v3.21.12
// source: bragi/rush_cricket.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RushCricketEventType int32

const (
	RushCricketEventType_RUSH_CRICKET_EVENT_TYPE_UNSPECIFIED   RushCricketEventType = 0
	RushCricketEventType_RUSH_CRICKET_EVENT_TYPE_BOUNDARY_FOUR RushCricketEventType = 1
	RushCricketEventType_RUSH_CRICKET_EVENT_TYPE_BOUNDARY_SIX  RushCricketEventType = 2
	RushCricketEventType_RUSH_CRICKET_EVENT_TYPE_WIDE_BALL     RushCricketEventType = 3
	RushCricketEventType_RUSH_CRICKET_EVENT_TYPE_NO_BALL       RushCricketEventType = 4
	RushCricketEventType_RUSH_CRICKET_EVENT_TYPE_WICKET        RushCricketEventType = 5
	RushCricketEventType_RUSH_CRICKET_EVENT_TYPE_PERIOD_CHANGE RushCricketEventType = 6
)

// Enum value maps for RushCricketEventType.
var (
	RushCricketEventType_name = map[int32]string{
		0: "RUSH_CRICKET_EVENT_TYPE_UNSPECIFIED",
		1: "RUSH_CRICKET_EVENT_TYPE_BOUNDARY_FOUR",
		2: "RUSH_CRICKET_EVENT_TYPE_BOUNDARY_SIX",
		3: "RUSH_CRICKET_EVENT_TYPE_WIDE_BALL",
		4: "RUSH_CRICKET_EVENT_TYPE_NO_BALL",
		5: "RUSH_CRICKET_EVENT_TYPE_WICKET",
		6: "RUSH_CRICKET_EVENT_TYPE_PERIOD_CHANGE",
	}
	RushCricketEventType_value = map[string]int32{
		"RUSH_CRICKET_EVENT_TYPE_UNSPECIFIED":   0,
		"RUSH_CRICKET_EVENT_TYPE_BOUNDARY_FOUR": 1,
		"RUSH_CRICKET_EVENT_TYPE_BOUNDARY_SIX":  2,
		"RUSH_CRICKET_EVENT_TYPE_WIDE_BALL":     3,
		"RUSH_CRICKET_EVENT_TYPE_NO_BALL":       4,
		"RUSH_CRICKET_EVENT_TYPE_WICKET":        5,
		"RUSH_CRICKET_EVENT_TYPE_PERIOD_CHANGE": 6,
	}
)

func (x RushCricketEventType) Enum() *RushCricketEventType {
	p := new(RushCricketEventType)
	*p = x
	return p
}

func (x RushCricketEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RushCricketEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_rush_cricket_proto_enumTypes[0].Descriptor()
}

func (RushCricketEventType) Type() protoreflect.EnumType {
	return &file_bragi_rush_cricket_proto_enumTypes[0]
}

func (x RushCricketEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RushCricketEventType.Descriptor instead.
func (RushCricketEventType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{0}
}

type RushCricketPeriod int32

const (
	RushCricketPeriod_RUSH_CRICKET_PERIOD_UNSPECIFIED RushCricketPeriod = 0
	RushCricketPeriod_RUSH_CRICKET_PERIOD_FIRST       RushCricketPeriod = 1
	RushCricketPeriod_RUSH_CRICKET_PERIOD_SECOND      RushCricketPeriod = 2
)

// Enum value maps for RushCricketPeriod.
var (
	RushCricketPeriod_name = map[int32]string{
		0: "RUSH_CRICKET_PERIOD_UNSPECIFIED",
		1: "RUSH_CRICKET_PERIOD_FIRST",
		2: "RUSH_CRICKET_PERIOD_SECOND",
	}
	RushCricketPeriod_value = map[string]int32{
		"RUSH_CRICKET_PERIOD_UNSPECIFIED": 0,
		"RUSH_CRICKET_PERIOD_FIRST":       1,
		"RUSH_CRICKET_PERIOD_SECOND":      2,
	}
)

func (x RushCricketPeriod) Enum() *RushCricketPeriod {
	p := new(RushCricketPeriod)
	*p = x
	return p
}

func (x RushCricketPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RushCricketPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_rush_cricket_proto_enumTypes[1].Descriptor()
}

func (RushCricketPeriod) Type() protoreflect.EnumType {
	return &file_bragi_rush_cricket_proto_enumTypes[1]
}

func (x RushCricketPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RushCricketPeriod.Descriptor instead.
func (RushCricketPeriod) EnumDescriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{1}
}

type RushCricketBoundaryRun int32

const (
	RushCricketBoundaryRun_RUSH_CRICKET_BOUNDARY_RUN_UNSPECIFIED RushCricketBoundaryRun = 0
	RushCricketBoundaryRun_RUSH_CRICKET_BOUNDARY_RUN_FOUR        RushCricketBoundaryRun = 1
	RushCricketBoundaryRun_RUSH_CRICKET_BOUNDARY_RUN_SIX         RushCricketBoundaryRun = 2
)

// Enum value maps for RushCricketBoundaryRun.
var (
	RushCricketBoundaryRun_name = map[int32]string{
		0: "RUSH_CRICKET_BOUNDARY_RUN_UNSPECIFIED",
		1: "RUSH_CRICKET_BOUNDARY_RUN_FOUR",
		2: "RUSH_CRICKET_BOUNDARY_RUN_SIX",
	}
	RushCricketBoundaryRun_value = map[string]int32{
		"RUSH_CRICKET_BOUNDARY_RUN_UNSPECIFIED": 0,
		"RUSH_CRICKET_BOUNDARY_RUN_FOUR":        1,
		"RUSH_CRICKET_BOUNDARY_RUN_SIX":         2,
	}
)

func (x RushCricketBoundaryRun) Enum() *RushCricketBoundaryRun {
	p := new(RushCricketBoundaryRun)
	*p = x
	return p
}

func (x RushCricketBoundaryRun) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RushCricketBoundaryRun) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_rush_cricket_proto_enumTypes[2].Descriptor()
}

func (RushCricketBoundaryRun) Type() protoreflect.EnumType {
	return &file_bragi_rush_cricket_proto_enumTypes[2]
}

func (x RushCricketBoundaryRun) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RushCricketBoundaryRun.Descriptor instead.
func (RushCricketBoundaryRun) EnumDescriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{2}
}

type RushCricketBowlerError int32

const (
	RushCricketBowlerError_RUSH_CRICKET_BOWLER_ERROR_UNSPECIFIED RushCricketBowlerError = 0
	RushCricketBowlerError_RUSH_CRICKET_BOWLER_ERROR_NO_BALL     RushCricketBowlerError = 1
	RushCricketBowlerError_RUSH_CRICKET_BOWLER_ERROR_WIDE        RushCricketBowlerError = 2
)

// Enum value maps for RushCricketBowlerError.
var (
	RushCricketBowlerError_name = map[int32]string{
		0: "RUSH_CRICKET_BOWLER_ERROR_UNSPECIFIED",
		1: "RUSH_CRICKET_BOWLER_ERROR_NO_BALL",
		2: "RUSH_CRICKET_BOWLER_ERROR_WIDE",
	}
	RushCricketBowlerError_value = map[string]int32{
		"RUSH_CRICKET_BOWLER_ERROR_UNSPECIFIED": 0,
		"RUSH_CRICKET_BOWLER_ERROR_NO_BALL":     1,
		"RUSH_CRICKET_BOWLER_ERROR_WIDE":        2,
	}
)

func (x RushCricketBowlerError) Enum() *RushCricketBowlerError {
	p := new(RushCricketBowlerError)
	*p = x
	return p
}

func (x RushCricketBowlerError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RushCricketBowlerError) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_rush_cricket_proto_enumTypes[3].Descriptor()
}

func (RushCricketBowlerError) Type() protoreflect.EnumType {
	return &file_bragi_rush_cricket_proto_enumTypes[3]
}

func (x RushCricketBowlerError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RushCricketBowlerError.Descriptor instead.
func (RushCricketBowlerError) EnumDescriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{3}
}

type RushCricketMatchMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// Message sequence.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Message timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Data status.
	DataStatus DataStatus `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	// Message payload.
	Payload       *RushCricketMatchMessage_Payload `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchMessage) Reset() {
	*x = RushCricketMatchMessage{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchMessage) ProtoMessage() {}

func (x *RushCricketMatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchMessage.ProtoReflect.Descriptor instead.
func (*RushCricketMatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{0}
}

func (x *RushCricketMatchMessage) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushCricketMatchMessage) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RushCricketMatchMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RushCricketMatchMessage) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *RushCricketMatchMessage) GetPayload() *RushCricketMatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushCricketMatchSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// Message sequence.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Message timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Data status.
	DataStatus DataStatus `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	// Control announcements.
	Announcements []*Announcement `protobuf:"bytes,5,rep,name=announcements,proto3" json:"announcements,omitempty"`
	// Match state.
	MatchState *RushCricketMatchState `protobuf:"bytes,6,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
	// Tournament details
	Tournament    *Tournament `protobuf:"bytes,7,opt,name=tournament,proto3" json:"tournament,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchSnapshot) Reset() {
	*x = RushCricketMatchSnapshot{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchSnapshot) ProtoMessage() {}

func (x *RushCricketMatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchSnapshot.ProtoReflect.Descriptor instead.
func (*RushCricketMatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{1}
}

func (x *RushCricketMatchSnapshot) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushCricketMatchSnapshot) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RushCricketMatchSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RushCricketMatchSnapshot) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *RushCricketMatchSnapshot) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *RushCricketMatchSnapshot) GetMatchState() *RushCricketMatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

func (x *RushCricketMatchSnapshot) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

type RushCricketMatchUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Update payload.
	Payload       *RushCricketMatchUpdate_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchUpdate) Reset() {
	*x = RushCricketMatchUpdate{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchUpdate) ProtoMessage() {}

func (x *RushCricketMatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchUpdate.ProtoReflect.Descriptor instead.
func (*RushCricketMatchUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{2}
}

func (x *RushCricketMatchUpdate) GetPayload() *RushCricketMatchUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushCricketMatchStatePartialUpdates struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partial updates.
	Updates       []*RushCricketMatchStatePartialUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchStatePartialUpdates) Reset() {
	*x = RushCricketMatchStatePartialUpdates{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchStatePartialUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchStatePartialUpdates) ProtoMessage() {}

func (x *RushCricketMatchStatePartialUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchStatePartialUpdates.ProtoReflect.Descriptor instead.
func (*RushCricketMatchStatePartialUpdates) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{3}
}

func (x *RushCricketMatchStatePartialUpdates) GetUpdates() []*RushCricketMatchStatePartialUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type RushCricketMatchStatePartialUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Update:
	//
	//	*RushCricketMatchStatePartialUpdate_Score
	//	*RushCricketMatchStatePartialUpdate_CurrentInning
	//	*RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate
	//	*RushCricketMatchStatePartialUpdate_Timeline
	Update        isRushCricketMatchStatePartialUpdate_Update `protobuf_oneof:"update"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchStatePartialUpdate) Reset() {
	*x = RushCricketMatchStatePartialUpdate{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchStatePartialUpdate) ProtoMessage() {}

func (x *RushCricketMatchStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushCricketMatchStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{4}
}

func (x *RushCricketMatchStatePartialUpdate) GetUpdate() isRushCricketMatchStatePartialUpdate_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *RushCricketMatchStatePartialUpdate) GetScore() *RushCricketMatchScoreState {
	if x != nil {
		if x, ok := x.Update.(*RushCricketMatchStatePartialUpdate_Score); ok {
			return x.Score
		}
	}
	return nil
}

func (x *RushCricketMatchStatePartialUpdate) GetCurrentInning() *RushCricketCurrentInningState {
	if x != nil {
		if x, ok := x.Update.(*RushCricketMatchStatePartialUpdate_CurrentInning); ok {
			return x.CurrentInning
		}
	}
	return nil
}

func (x *RushCricketMatchStatePartialUpdate) GetCurrentInningPartialUpdate() *RushCricketCurrentInningStatePartialUpdate {
	if x != nil {
		if x, ok := x.Update.(*RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate); ok {
			return x.CurrentInningPartialUpdate
		}
	}
	return nil
}

func (x *RushCricketMatchStatePartialUpdate) GetTimeline() *RushCricketTimelineState {
	if x != nil {
		if x, ok := x.Update.(*RushCricketMatchStatePartialUpdate_Timeline); ok {
			return x.Timeline
		}
	}
	return nil
}

type isRushCricketMatchStatePartialUpdate_Update interface {
	isRushCricketMatchStatePartialUpdate_Update()
}

type RushCricketMatchStatePartialUpdate_Score struct {
	// Replaces "score" property in RushCricketMatchState.
	Score *RushCricketMatchScoreState `protobuf:"bytes,1,opt,name=score,proto3,oneof"`
}

type RushCricketMatchStatePartialUpdate_CurrentInning struct {
	// Replaces "current_inning" property in RushCricketMatchState.
	CurrentInning *RushCricketCurrentInningState `protobuf:"bytes,2,opt,name=current_inning,json=currentInning,proto3,oneof"`
}

type RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate struct {
	// Apply partial update on "current_inning" property in RushCricketMatchState.
	CurrentInningPartialUpdate *RushCricketCurrentInningStatePartialUpdate `protobuf:"bytes,3,opt,name=current_inning_partial_update,json=currentInningPartialUpdate,proto3,oneof"`
}

type RushCricketMatchStatePartialUpdate_Timeline struct {
	// Replaces "timeline" property in RushCricketMatchState.
	Timeline *RushCricketTimelineState `protobuf:"bytes,4,opt,name=timeline,proto3,oneof"`
}

func (*RushCricketMatchStatePartialUpdate_Score) isRushCricketMatchStatePartialUpdate_Update() {}

func (*RushCricketMatchStatePartialUpdate_CurrentInning) isRushCricketMatchStatePartialUpdate_Update() {
}

func (*RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate) isRushCricketMatchStatePartialUpdate_Update() {
}

func (*RushCricketMatchStatePartialUpdate_Timeline) isRushCricketMatchStatePartialUpdate_Update() {}

type RushCricketMatchState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// BO type.
	MatchType BestOfType `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=bragi.BestOfType" json:"match_type,omitempty"`
	// Home team.
	HomeTeam *Team `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	// Away team.
	AwayTeam *Team `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	// Match score - number of maps won.
	Score *RushCricketMatchScoreState `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	// Match status.
	MatchStatus MatchStatusType `protobuf:"varint,6,opt,name=match_status,json=matchStatus,proto3,enum=bragi.MatchStatusType" json:"match_status,omitempty"`
	// Timeline state.
	Timeline *RushCricketTimelineState `protobuf:"bytes,7,opt,name=timeline,proto3" json:"timeline,omitempty"`
	// Current inning state.
	CurrentInning *RushCricketCurrentInningState `protobuf:"bytes,8,opt,name=current_inning,json=currentInning,proto3" json:"current_inning,omitempty"`
	// Winning team urn.
	WinTeamUrn    string `protobuf:"bytes,9,opt,name=win_team_urn,json=winTeamUrn,proto3" json:"win_team_urn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchState) Reset() {
	*x = RushCricketMatchState{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchState) ProtoMessage() {}

func (x *RushCricketMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchState.ProtoReflect.Descriptor instead.
func (*RushCricketMatchState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{5}
}

func (x *RushCricketMatchState) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushCricketMatchState) GetMatchType() BestOfType {
	if x != nil {
		return x.MatchType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *RushCricketMatchState) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *RushCricketMatchState) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *RushCricketMatchState) GetScore() *RushCricketMatchScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *RushCricketMatchState) GetMatchStatus() MatchStatusType {
	if x != nil {
		return x.MatchStatus
	}
	return MatchStatusType_MATCH_STATUS_TYPE_UNSPECIFIED
}

func (x *RushCricketMatchState) GetTimeline() *RushCricketTimelineState {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *RushCricketMatchState) GetCurrentInning() *RushCricketCurrentInningState {
	if x != nil {
		return x.CurrentInning
	}
	return nil
}

func (x *RushCricketMatchState) GetWinTeamUrn() string {
	if x != nil {
		return x.WinTeamUrn
	}
	return ""
}

type RushCricketMatchScoreState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of maps won by home team.
	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	// Number of maps won by away team.
	AwayScore     uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchScoreState) Reset() {
	*x = RushCricketMatchScoreState{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchScoreState) ProtoMessage() {}

func (x *RushCricketMatchScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchScoreState.ProtoReflect.Descriptor instead.
func (*RushCricketMatchScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{6}
}

func (x *RushCricketMatchScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *RushCricketMatchScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type RushCricketCurrentMapScoreState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of home runs.
	HomeRuns uint32 `protobuf:"varint,1,opt,name=home_runs,json=homeRuns,proto3" json:"home_runs,omitempty"`
	// Number of away runs.
	AwayRuns      uint32 `protobuf:"varint,2,opt,name=away_runs,json=awayRuns,proto3" json:"away_runs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketCurrentMapScoreState) Reset() {
	*x = RushCricketCurrentMapScoreState{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketCurrentMapScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketCurrentMapScoreState) ProtoMessage() {}

func (x *RushCricketCurrentMapScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketCurrentMapScoreState.ProtoReflect.Descriptor instead.
func (*RushCricketCurrentMapScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{7}
}

func (x *RushCricketCurrentMapScoreState) GetHomeRuns() uint32 {
	if x != nil {
		return x.HomeRuns
	}
	return 0
}

func (x *RushCricketCurrentMapScoreState) GetAwayRuns() uint32 {
	if x != nil {
		return x.AwayRuns
	}
	return 0
}

type RushCricketTimelineState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeline events.
	Events        []*RushCricketTimelineEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketTimelineState) Reset() {
	*x = RushCricketTimelineState{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketTimelineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketTimelineState) ProtoMessage() {}

func (x *RushCricketTimelineState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketTimelineState.ProtoReflect.Descriptor instead.
func (*RushCricketTimelineState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{8}
}

func (x *RushCricketTimelineState) GetEvents() []*RushCricketTimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RushCricketTimelineEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Team urn.
	TeamUrn string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	// Event type.
	EventType RushCricketEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=bragi.RushCricketEventType" json:"event_type,omitempty"`
	// Ball state details.
	BallState *RushCricketBallState `protobuf:"bytes,3,opt,name=ball_state,json=ballState,proto3" json:"ball_state,omitempty"`
	// Runs scored in this event
	Runs uint32 `protobuf:"varint,4,opt,name=runs,proto3" json:"runs,omitempty"`
	// Boundary type if applicable
	BoundaryRun RushCricketBoundaryRun `protobuf:"varint,5,opt,name=boundary_run,json=boundaryRun,proto3,enum=bragi.RushCricketBoundaryRun" json:"boundary_run,omitempty"`
	// Bowler error if applicable
	BowlerError   RushCricketBowlerError `protobuf:"varint,6,opt,name=bowler_error,json=bowlerError,proto3,enum=bragi.RushCricketBowlerError" json:"bowler_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketTimelineEvent) Reset() {
	*x = RushCricketTimelineEvent{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketTimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketTimelineEvent) ProtoMessage() {}

func (x *RushCricketTimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketTimelineEvent.ProtoReflect.Descriptor instead.
func (*RushCricketTimelineEvent) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{9}
}

func (x *RushCricketTimelineEvent) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushCricketTimelineEvent) GetEventType() RushCricketEventType {
	if x != nil {
		return x.EventType
	}
	return RushCricketEventType_RUSH_CRICKET_EVENT_TYPE_UNSPECIFIED
}

func (x *RushCricketTimelineEvent) GetBallState() *RushCricketBallState {
	if x != nil {
		return x.BallState
	}
	return nil
}

func (x *RushCricketTimelineEvent) GetRuns() uint32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *RushCricketTimelineEvent) GetBoundaryRun() RushCricketBoundaryRun {
	if x != nil {
		return x.BoundaryRun
	}
	return RushCricketBoundaryRun_RUSH_CRICKET_BOUNDARY_RUN_UNSPECIFIED
}

func (x *RushCricketTimelineEvent) GetBowlerError() RushCricketBowlerError {
	if x != nil {
		return x.BowlerError
	}
	return RushCricketBowlerError_RUSH_CRICKET_BOWLER_ERROR_UNSPECIFIED
}

type RushCricketCurrentInningStatePartialUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Update:
	//
	//	*RushCricketCurrentInningStatePartialUpdate_Over
	//	*RushCricketCurrentInningStatePartialUpdate_Ball
	//	*RushCricketCurrentInningStatePartialUpdate_Runs
	//	*RushCricketCurrentInningStatePartialUpdate_OversPlayed
	//	*RushCricketCurrentInningStatePartialUpdate_Target
	//	*RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate
	Update        isRushCricketCurrentInningStatePartialUpdate_Update `protobuf_oneof:"update"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketCurrentInningStatePartialUpdate) Reset() {
	*x = RushCricketCurrentInningStatePartialUpdate{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketCurrentInningStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketCurrentInningStatePartialUpdate) ProtoMessage() {}

func (x *RushCricketCurrentInningStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketCurrentInningStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushCricketCurrentInningStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{10}
}

func (x *RushCricketCurrentInningStatePartialUpdate) GetUpdate() isRushCricketCurrentInningStatePartialUpdate_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *RushCricketCurrentInningStatePartialUpdate) GetOver() uint32 {
	if x != nil {
		if x, ok := x.Update.(*RushCricketCurrentInningStatePartialUpdate_Over); ok {
			return x.Over
		}
	}
	return 0
}

func (x *RushCricketCurrentInningStatePartialUpdate) GetBall() uint32 {
	if x != nil {
		if x, ok := x.Update.(*RushCricketCurrentInningStatePartialUpdate_Ball); ok {
			return x.Ball
		}
	}
	return 0
}

func (x *RushCricketCurrentInningStatePartialUpdate) GetRuns() uint32 {
	if x != nil {
		if x, ok := x.Update.(*RushCricketCurrentInningStatePartialUpdate_Runs); ok {
			return x.Runs
		}
	}
	return 0
}

func (x *RushCricketCurrentInningStatePartialUpdate) GetOversPlayed() float32 {
	if x != nil {
		if x, ok := x.Update.(*RushCricketCurrentInningStatePartialUpdate_OversPlayed); ok {
			return x.OversPlayed
		}
	}
	return 0
}

func (x *RushCricketCurrentInningStatePartialUpdate) GetTarget() *RushCricketTarget {
	if x != nil {
		if x, ok := x.Update.(*RushCricketCurrentInningStatePartialUpdate_Target); ok {
			return x.Target
		}
	}
	return nil
}

func (x *RushCricketCurrentInningStatePartialUpdate) GetTeamCurrentInningPartialUpdate() *RushCricketTeamCurrentInningStatePartialUpdate {
	if x != nil {
		if x, ok := x.Update.(*RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate); ok {
			return x.TeamCurrentInningPartialUpdate
		}
	}
	return nil
}

type isRushCricketCurrentInningStatePartialUpdate_Update interface {
	isRushCricketCurrentInningStatePartialUpdate_Update()
}

type RushCricketCurrentInningStatePartialUpdate_Over struct {
	// Replaces "number" property in RushCricketCurrentInningState.
	Over uint32 `protobuf:"varint,1,opt,name=over,proto3,oneof"`
}

type RushCricketCurrentInningStatePartialUpdate_Ball struct {
	// Replaces "ball" property in RushCricketCurrentInningState.
	Ball uint32 `protobuf:"varint,2,opt,name=ball,proto3,oneof"`
}

type RushCricketCurrentInningStatePartialUpdate_Runs struct {
	// Replaces "runs" property in RushCricketCurrentInningState.
	Runs uint32 `protobuf:"varint,3,opt,name=runs,proto3,oneof"`
}

type RushCricketCurrentInningStatePartialUpdate_OversPlayed struct {
	// Replaces "overs_played" property in RushCricketCurrentInningState.
	OversPlayed float32 `protobuf:"fixed32,4,opt,name=overs_played,json=oversPlayed,proto3,oneof"`
}

type RushCricketCurrentInningStatePartialUpdate_Target struct {
	// Replaces "target" property in RushCricketCurrentInningState.
	Target *RushCricketTarget `protobuf:"bytes,5,opt,name=target,proto3,oneof"`
}

type RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate struct {
	// Apply partial update on team state in RushCricketCurrentInningState.
	TeamCurrentInningPartialUpdate *RushCricketTeamCurrentInningStatePartialUpdate `protobuf:"bytes,6,opt,name=team_current_inning_partial_update,json=teamCurrentInningPartialUpdate,proto3,oneof"`
}

func (*RushCricketCurrentInningStatePartialUpdate_Over) isRushCricketCurrentInningStatePartialUpdate_Update() {
}

func (*RushCricketCurrentInningStatePartialUpdate_Ball) isRushCricketCurrentInningStatePartialUpdate_Update() {
}

func (*RushCricketCurrentInningStatePartialUpdate_Runs) isRushCricketCurrentInningStatePartialUpdate_Update() {
}

func (*RushCricketCurrentInningStatePartialUpdate_OversPlayed) isRushCricketCurrentInningStatePartialUpdate_Update() {
}

func (*RushCricketCurrentInningStatePartialUpdate_Target) isRushCricketCurrentInningStatePartialUpdate_Update() {
}

func (*RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate) isRushCricketCurrentInningStatePartialUpdate_Update() {
}

type RushCricketTeamCurrentInningStatePartialUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Team urn.
	TeamUrn string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	// Update payload.
	Payload       *RushCricketTeamCurrentInningStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketTeamCurrentInningStatePartialUpdate) Reset() {
	*x = RushCricketTeamCurrentInningStatePartialUpdate{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketTeamCurrentInningStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketTeamCurrentInningStatePartialUpdate) ProtoMessage() {}

func (x *RushCricketTeamCurrentInningStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketTeamCurrentInningStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushCricketTeamCurrentInningStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{11}
}

func (x *RushCricketTeamCurrentInningStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushCricketTeamCurrentInningStatePartialUpdate) GetPayload() *RushCricketTeamCurrentInningStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushCricketPlayerCurrentMapState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Player urn.
	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	// Player ext name.
	ExtName       string `protobuf:"bytes,2,opt,name=ext_name,json=extName,proto3" json:"ext_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketPlayerCurrentMapState) Reset() {
	*x = RushCricketPlayerCurrentMapState{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketPlayerCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketPlayerCurrentMapState) ProtoMessage() {}

func (x *RushCricketPlayerCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketPlayerCurrentMapState.ProtoReflect.Descriptor instead.
func (*RushCricketPlayerCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{12}
}

func (x *RushCricketPlayerCurrentMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *RushCricketPlayerCurrentMapState) GetExtName() string {
	if x != nil {
		return x.ExtName
	}
	return ""
}

type RushCricketBallState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Inning number
	Inning uint32 `protobuf:"varint,1,opt,name=inning,proto3" json:"inning,omitempty"`
	// Over number
	Over uint32 `protobuf:"varint,2,opt,name=over,proto3" json:"over,omitempty"`
	// Ball number
	Ball uint32 `protobuf:"varint,3,opt,name=ball,proto3" json:"ball,omitempty"`
	// If this was an extra ball
	IsExtra bool `protobuf:"varint,4,opt,name=is_extra,json=isExtra,proto3" json:"is_extra,omitempty"`
	// Ball order within inning
	BallOrderWithinInning uint32 `protobuf:"varint,5,opt,name=ball_order_within_inning,json=ballOrderWithinInning,proto3" json:"ball_order_within_inning,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RushCricketBallState) Reset() {
	*x = RushCricketBallState{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketBallState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketBallState) ProtoMessage() {}

func (x *RushCricketBallState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketBallState.ProtoReflect.Descriptor instead.
func (*RushCricketBallState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{13}
}

func (x *RushCricketBallState) GetInning() uint32 {
	if x != nil {
		return x.Inning
	}
	return 0
}

func (x *RushCricketBallState) GetOver() uint32 {
	if x != nil {
		return x.Over
	}
	return 0
}

func (x *RushCricketBallState) GetBall() uint32 {
	if x != nil {
		return x.Ball
	}
	return 0
}

func (x *RushCricketBallState) GetIsExtra() bool {
	if x != nil {
		return x.IsExtra
	}
	return false
}

func (x *RushCricketBallState) GetBallOrderWithinInning() uint32 {
	if x != nil {
		return x.BallOrderWithinInning
	}
	return 0
}

type RushCricketCurrentInningState struct {
	state          protoimpl.MessageState                        `protogen:"open.v1"`
	Number         uint32                                        `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Over           uint32                                        `protobuf:"varint,2,opt,name=over,proto3" json:"over,omitempty"`
	Ball           uint32                                        `protobuf:"varint,3,opt,name=ball,proto3" json:"ball,omitempty"`
	BattingTeamUrn string                                        `protobuf:"bytes,4,opt,name=batting_team_urn,json=battingTeamUrn,proto3" json:"batting_team_urn,omitempty"`
	Runs           uint32                                        `protobuf:"varint,5,opt,name=runs,proto3" json:"runs,omitempty"`
	OversPlayed    float32                                       `protobuf:"fixed32,6,opt,name=overs_played,json=oversPlayed,proto3" json:"overs_played,omitempty"`
	GamePaused     bool                                          `protobuf:"varint,7,opt,name=game_paused,json=gamePaused,proto3" json:"game_paused,omitempty"`
	Teams          map[string]*RushCricketTeamCurrentInningState `protobuf:"bytes,8,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Target         *RushCricketTarget                            `protobuf:"bytes,9,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RushCricketCurrentInningState) Reset() {
	*x = RushCricketCurrentInningState{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketCurrentInningState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketCurrentInningState) ProtoMessage() {}

func (x *RushCricketCurrentInningState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketCurrentInningState.ProtoReflect.Descriptor instead.
func (*RushCricketCurrentInningState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{14}
}

func (x *RushCricketCurrentInningState) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *RushCricketCurrentInningState) GetOver() uint32 {
	if x != nil {
		return x.Over
	}
	return 0
}

func (x *RushCricketCurrentInningState) GetBall() uint32 {
	if x != nil {
		return x.Ball
	}
	return 0
}

func (x *RushCricketCurrentInningState) GetBattingTeamUrn() string {
	if x != nil {
		return x.BattingTeamUrn
	}
	return ""
}

func (x *RushCricketCurrentInningState) GetRuns() uint32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *RushCricketCurrentInningState) GetOversPlayed() float32 {
	if x != nil {
		return x.OversPlayed
	}
	return 0
}

func (x *RushCricketCurrentInningState) GetGamePaused() bool {
	if x != nil {
		return x.GamePaused
	}
	return false
}

func (x *RushCricketCurrentInningState) GetTeams() map[string]*RushCricketTeamCurrentInningState {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *RushCricketCurrentInningState) GetTarget() *RushCricketTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type RushCricketTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamUrn       string                 `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Runs          uint32                 `protobuf:"varint,2,opt,name=runs,proto3" json:"runs,omitempty"`
	Overs         float32                `protobuf:"fixed32,3,opt,name=overs,proto3" json:"overs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketTarget) Reset() {
	*x = RushCricketTarget{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketTarget) ProtoMessage() {}

func (x *RushCricketTarget) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketTarget.ProtoReflect.Descriptor instead.
func (*RushCricketTarget) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{15}
}

func (x *RushCricketTarget) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushCricketTarget) GetRuns() uint32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *RushCricketTarget) GetOvers() float32 {
	if x != nil {
		return x.Overs
	}
	return 0
}

type RushCricketTeamCurrentInningState struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	Runs           uint32                            `protobuf:"varint,1,opt,name=runs,proto3" json:"runs,omitempty"`
	Wickets        uint32                            `protobuf:"varint,2,opt,name=wickets,proto3" json:"wickets,omitempty"`
	BoundariesFour uint32                            `protobuf:"varint,3,opt,name=boundaries_four,json=boundariesFour,proto3" json:"boundaries_four,omitempty"`
	BoundariesSix  uint32                            `protobuf:"varint,4,opt,name=boundaries_six,json=boundariesSix,proto3" json:"boundaries_six,omitempty"`
	WideBalls      uint32                            `protobuf:"varint,5,opt,name=wide_balls,json=wideBalls,proto3" json:"wide_balls,omitempty"`
	NoBalls        uint32                            `protobuf:"varint,6,opt,name=no_balls,json=noBalls,proto3" json:"no_balls,omitempty"`
	OversPlayed    float32                           `protobuf:"fixed32,7,opt,name=overs_played,json=oversPlayed,proto3" json:"overs_played,omitempty"`
	Player         *RushCricketPlayerCurrentMapState `protobuf:"bytes,8,opt,name=player,proto3" json:"player,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RushCricketTeamCurrentInningState) Reset() {
	*x = RushCricketTeamCurrentInningState{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketTeamCurrentInningState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketTeamCurrentInningState) ProtoMessage() {}

func (x *RushCricketTeamCurrentInningState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketTeamCurrentInningState.ProtoReflect.Descriptor instead.
func (*RushCricketTeamCurrentInningState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{16}
}

func (x *RushCricketTeamCurrentInningState) GetRuns() uint32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *RushCricketTeamCurrentInningState) GetWickets() uint32 {
	if x != nil {
		return x.Wickets
	}
	return 0
}

func (x *RushCricketTeamCurrentInningState) GetBoundariesFour() uint32 {
	if x != nil {
		return x.BoundariesFour
	}
	return 0
}

func (x *RushCricketTeamCurrentInningState) GetBoundariesSix() uint32 {
	if x != nil {
		return x.BoundariesSix
	}
	return 0
}

func (x *RushCricketTeamCurrentInningState) GetWideBalls() uint32 {
	if x != nil {
		return x.WideBalls
	}
	return 0
}

func (x *RushCricketTeamCurrentInningState) GetNoBalls() uint32 {
	if x != nil {
		return x.NoBalls
	}
	return 0
}

func (x *RushCricketTeamCurrentInningState) GetOversPlayed() float32 {
	if x != nil {
		return x.OversPlayed
	}
	return 0
}

func (x *RushCricketTeamCurrentInningState) GetPlayer() *RushCricketPlayerCurrentMapState {
	if x != nil {
		return x.Player
	}
	return nil
}

type RushCricketMatchMessage_Payload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*RushCricketMatchMessage_Payload_Snapshot
	//	*RushCricketMatchMessage_Payload_Update
	Payload       isRushCricketMatchMessage_Payload_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchMessage_Payload) Reset() {
	*x = RushCricketMatchMessage_Payload{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchMessage_Payload) ProtoMessage() {}

func (x *RushCricketMatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*RushCricketMatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RushCricketMatchMessage_Payload) GetPayload() isRushCricketMatchMessage_Payload_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RushCricketMatchMessage_Payload) GetSnapshot() *RushCricketMatchSnapshot {
	if x != nil {
		if x, ok := x.Payload.(*RushCricketMatchMessage_Payload_Snapshot); ok {
			return x.Snapshot
		}
	}
	return nil
}

func (x *RushCricketMatchMessage_Payload) GetUpdate() *RushCricketMatchUpdate {
	if x != nil {
		if x, ok := x.Payload.(*RushCricketMatchMessage_Payload_Update); ok {
			return x.Update
		}
	}
	return nil
}

type isRushCricketMatchMessage_Payload_Payload interface {
	isRushCricketMatchMessage_Payload_Payload()
}

type RushCricketMatchMessage_Payload_Snapshot struct {
	// Initial snapshot.
	Snapshot *RushCricketMatchSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type RushCricketMatchMessage_Payload_Update struct {
	// Particular updates which are applied on property match_state in MatchState.
	Update *RushCricketMatchUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*RushCricketMatchMessage_Payload_Snapshot) isRushCricketMatchMessage_Payload_Payload() {}

func (*RushCricketMatchMessage_Payload_Update) isRushCricketMatchMessage_Payload_Payload() {}

type RushCricketMatchUpdate_Payload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*RushCricketMatchUpdate_Payload_MatchState
	//	*RushCricketMatchUpdate_Payload_PartialUpdates
	Payload       isRushCricketMatchUpdate_Payload_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketMatchUpdate_Payload) Reset() {
	*x = RushCricketMatchUpdate_Payload{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketMatchUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketMatchUpdate_Payload) ProtoMessage() {}

func (x *RushCricketMatchUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketMatchUpdate_Payload.ProtoReflect.Descriptor instead.
func (*RushCricketMatchUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RushCricketMatchUpdate_Payload) GetPayload() isRushCricketMatchUpdate_Payload_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RushCricketMatchUpdate_Payload) GetMatchState() *RushCricketMatchState {
	if x != nil {
		if x, ok := x.Payload.(*RushCricketMatchUpdate_Payload_MatchState); ok {
			return x.MatchState
		}
	}
	return nil
}

func (x *RushCricketMatchUpdate_Payload) GetPartialUpdates() *RushCricketMatchStatePartialUpdates {
	if x != nil {
		if x, ok := x.Payload.(*RushCricketMatchUpdate_Payload_PartialUpdates); ok {
			return x.PartialUpdates
		}
	}
	return nil
}

type isRushCricketMatchUpdate_Payload_Payload interface {
	isRushCricketMatchUpdate_Payload_Payload()
}

type RushCricketMatchUpdate_Payload_MatchState struct {
	// Complete match state.
	MatchState *RushCricketMatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3,oneof"`
}

type RushCricketMatchUpdate_Payload_PartialUpdates struct {
	// Partial update.
	PartialUpdates *RushCricketMatchStatePartialUpdates `protobuf:"bytes,2,opt,name=partial_updates,json=partialUpdates,proto3,oneof"`
}

func (*RushCricketMatchUpdate_Payload_MatchState) isRushCricketMatchUpdate_Payload_Payload() {}

func (*RushCricketMatchUpdate_Payload_PartialUpdates) isRushCricketMatchUpdate_Payload_Payload() {}

type RushCricketTeamCurrentInningStatePartialUpdate_Payload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState
	Payload       isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RushCricketTeamCurrentInningStatePartialUpdate_Payload) Reset() {
	*x = RushCricketTeamCurrentInningStatePartialUpdate_Payload{}
	mi := &file_bragi_rush_cricket_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RushCricketTeamCurrentInningStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushCricketTeamCurrentInningStatePartialUpdate_Payload) ProtoMessage() {}

func (x *RushCricketTeamCurrentInningStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_cricket_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushCricketTeamCurrentInningStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*RushCricketTeamCurrentInningStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_cricket_proto_rawDescGZIP(), []int{11, 0}
}

func (x *RushCricketTeamCurrentInningStatePartialUpdate_Payload) GetPayload() isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RushCricketTeamCurrentInningStatePartialUpdate_Payload) GetTeamCurrentInningState() *RushCricketTeamCurrentInningState {
	if x != nil {
		if x, ok := x.Payload.(*RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState); ok {
			return x.TeamCurrentInningState
		}
	}
	return nil
}

type isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload interface {
	isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload()
}

type RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState struct {
	// Replaces team state in RushCricketCurrentInningState.
	TeamCurrentInningState *RushCricketTeamCurrentInningState `protobuf:"bytes,1,opt,name=team_current_inning_state,json=teamCurrentInningState,proto3,oneof"`
}

func (*RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState) isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload() {
}

var File_bragi_rush_cricket_proto protoreflect.FileDescriptor

var file_bragi_rush_cricket_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x63, 0x72, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x03, 0x0a, 0x17, 0x52, 0x75, 0x73, 0x68, 0x43,
	0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x8c, 0x01, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52,
	0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x18, 0x52,
	0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x16,
	0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xac, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6a, 0x0a, 0x23, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x22, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x76, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0xda, 0x03, 0x0a, 0x15, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72,
	0x6e, 0x22, 0x5a, 0x0a, 0x1a, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5b, 0x0a,
	0x1f, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x18, 0x52, 0x75,
	0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52,
	0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xc5, 0x02, 0x0a, 0x18, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72,
	0x75, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x6f, 0x77, 0x6c, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x62, 0x6f, 0x77, 0x6c,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd7, 0x02, 0x0a, 0x2a, 0x52, 0x75, 0x73, 0x68,
	0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04,
	0x62, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61,
	0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x83, 0x01, 0x0a, 0x22, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0xa1, 0x02, 0x0a, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12,
	0x57, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x7b, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x65, 0x0a, 0x19, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52,
	0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5c, 0x0a, 0x20, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x62, 0x61, 0x6c, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0xbe, 0x03, 0x0a, 0x1d, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x61,
	0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x75, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68,
	0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x62, 0x0a,
	0x0a, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x58, 0x0a, 0x11, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x21,
	0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x53, 0x69, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x64, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6e, 0x6f, 0x42, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2a, 0xaf, 0x02,
	0x0a, 0x14, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43,
	0x52, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x29, 0x0a, 0x25, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x41, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x55,
	0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x53,
	0x49, 0x58, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x52,
	0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x04,
	0x12, 0x22, 0x0a, 0x1e, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x43, 0x4b,
	0x45, 0x54, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x2a,
	0x77, 0x0a, 0x11, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x55, 0x53,
	0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x55, 0x53, 0x48,
	0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x8a, 0x01, 0x0a, 0x16, 0x52, 0x75, 0x73,
	0x68, 0x43, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x55, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x46, 0x4f, 0x55, 0x52,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x5f,
	0x53, 0x49, 0x58, 0x10, 0x02, 0x2a, 0x8e, 0x01, 0x0a, 0x16, 0x52, 0x75, 0x73, 0x68, 0x43, 0x72,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x29, 0x0a, 0x25, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x42, 0x4f, 0x57, 0x4c, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52,
	0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x57, 0x4c,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x42, 0x41, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x52, 0x49, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x42, 0x4f, 0x57, 0x4c, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x57, 0x49, 0x44, 0x45, 0x10, 0x02, 0x42, 0x21, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64,
	0x64, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x5a, 0x0e, 0x6f, 0x64, 0x64, 0x69, 0x6e,
	0x2e, 0x67, 0x67, 0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bragi_rush_cricket_proto_rawDescOnce sync.Once
	file_bragi_rush_cricket_proto_rawDescData = file_bragi_rush_cricket_proto_rawDesc
)

func file_bragi_rush_cricket_proto_rawDescGZIP() []byte {
	file_bragi_rush_cricket_proto_rawDescOnce.Do(func() {
		file_bragi_rush_cricket_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_rush_cricket_proto_rawDescData)
	})
	return file_bragi_rush_cricket_proto_rawDescData
}

var file_bragi_rush_cricket_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bragi_rush_cricket_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bragi_rush_cricket_proto_goTypes = []any{
	(RushCricketEventType)(0),                                      // 0: bragi.RushCricketEventType
	(RushCricketPeriod)(0),                                         // 1: bragi.RushCricketPeriod
	(RushCricketBoundaryRun)(0),                                    // 2: bragi.RushCricketBoundaryRun
	(RushCricketBowlerError)(0),                                    // 3: bragi.RushCricketBowlerError
	(*RushCricketMatchMessage)(nil),                                // 4: bragi.RushCricketMatchMessage
	(*RushCricketMatchSnapshot)(nil),                               // 5: bragi.RushCricketMatchSnapshot
	(*RushCricketMatchUpdate)(nil),                                 // 6: bragi.RushCricketMatchUpdate
	(*RushCricketMatchStatePartialUpdates)(nil),                    // 7: bragi.RushCricketMatchStatePartialUpdates
	(*RushCricketMatchStatePartialUpdate)(nil),                     // 8: bragi.RushCricketMatchStatePartialUpdate
	(*RushCricketMatchState)(nil),                                  // 9: bragi.RushCricketMatchState
	(*RushCricketMatchScoreState)(nil),                             // 10: bragi.RushCricketMatchScoreState
	(*RushCricketCurrentMapScoreState)(nil),                        // 11: bragi.RushCricketCurrentMapScoreState
	(*RushCricketTimelineState)(nil),                               // 12: bragi.RushCricketTimelineState
	(*RushCricketTimelineEvent)(nil),                               // 13: bragi.RushCricketTimelineEvent
	(*RushCricketCurrentInningStatePartialUpdate)(nil),             // 14: bragi.RushCricketCurrentInningStatePartialUpdate
	(*RushCricketTeamCurrentInningStatePartialUpdate)(nil),         // 15: bragi.RushCricketTeamCurrentInningStatePartialUpdate
	(*RushCricketPlayerCurrentMapState)(nil),                       // 16: bragi.RushCricketPlayerCurrentMapState
	(*RushCricketBallState)(nil),                                   // 17: bragi.RushCricketBallState
	(*RushCricketCurrentInningState)(nil),                          // 18: bragi.RushCricketCurrentInningState
	(*RushCricketTarget)(nil),                                      // 19: bragi.RushCricketTarget
	(*RushCricketTeamCurrentInningState)(nil),                      // 20: bragi.RushCricketTeamCurrentInningState
	(*RushCricketMatchMessage_Payload)(nil),                        // 21: bragi.RushCricketMatchMessage.Payload
	(*RushCricketMatchUpdate_Payload)(nil),                         // 22: bragi.RushCricketMatchUpdate.Payload
	(*RushCricketTeamCurrentInningStatePartialUpdate_Payload)(nil), // 23: bragi.RushCricketTeamCurrentInningStatePartialUpdate.Payload
	nil,                           // 24: bragi.RushCricketCurrentInningState.TeamsEntry
	(*timestamppb.Timestamp)(nil), // 25: google.protobuf.Timestamp
	(DataStatus)(0),               // 26: bragi.DataStatus
	(*Announcement)(nil),          // 27: bragi.Announcement
	(*Tournament)(nil),            // 28: bragi.Tournament
	(BestOfType)(0),               // 29: bragi.BestOfType
	(*Team)(nil),                  // 30: bragi.Team
	(MatchStatusType)(0),          // 31: bragi.MatchStatusType
}
var file_bragi_rush_cricket_proto_depIdxs = []int32{
	25, // 0: bragi.RushCricketMatchMessage.timestamp:type_name -> google.protobuf.Timestamp
	26, // 1: bragi.RushCricketMatchMessage.data_status:type_name -> bragi.DataStatus
	21, // 2: bragi.RushCricketMatchMessage.payload:type_name -> bragi.RushCricketMatchMessage.Payload
	25, // 3: bragi.RushCricketMatchSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	26, // 4: bragi.RushCricketMatchSnapshot.data_status:type_name -> bragi.DataStatus
	27, // 5: bragi.RushCricketMatchSnapshot.announcements:type_name -> bragi.Announcement
	9,  // 6: bragi.RushCricketMatchSnapshot.match_state:type_name -> bragi.RushCricketMatchState
	28, // 7: bragi.RushCricketMatchSnapshot.tournament:type_name -> bragi.Tournament
	22, // 8: bragi.RushCricketMatchUpdate.payload:type_name -> bragi.RushCricketMatchUpdate.Payload
	8,  // 9: bragi.RushCricketMatchStatePartialUpdates.updates:type_name -> bragi.RushCricketMatchStatePartialUpdate
	10, // 10: bragi.RushCricketMatchStatePartialUpdate.score:type_name -> bragi.RushCricketMatchScoreState
	18, // 11: bragi.RushCricketMatchStatePartialUpdate.current_inning:type_name -> bragi.RushCricketCurrentInningState
	14, // 12: bragi.RushCricketMatchStatePartialUpdate.current_inning_partial_update:type_name -> bragi.RushCricketCurrentInningStatePartialUpdate
	12, // 13: bragi.RushCricketMatchStatePartialUpdate.timeline:type_name -> bragi.RushCricketTimelineState
	29, // 14: bragi.RushCricketMatchState.match_type:type_name -> bragi.BestOfType
	30, // 15: bragi.RushCricketMatchState.home_team:type_name -> bragi.Team
	30, // 16: bragi.RushCricketMatchState.away_team:type_name -> bragi.Team
	10, // 17: bragi.RushCricketMatchState.score:type_name -> bragi.RushCricketMatchScoreState
	31, // 18: bragi.RushCricketMatchState.match_status:type_name -> bragi.MatchStatusType
	12, // 19: bragi.RushCricketMatchState.timeline:type_name -> bragi.RushCricketTimelineState
	18, // 20: bragi.RushCricketMatchState.current_inning:type_name -> bragi.RushCricketCurrentInningState
	13, // 21: bragi.RushCricketTimelineState.events:type_name -> bragi.RushCricketTimelineEvent
	0,  // 22: bragi.RushCricketTimelineEvent.event_type:type_name -> bragi.RushCricketEventType
	17, // 23: bragi.RushCricketTimelineEvent.ball_state:type_name -> bragi.RushCricketBallState
	2,  // 24: bragi.RushCricketTimelineEvent.boundary_run:type_name -> bragi.RushCricketBoundaryRun
	3,  // 25: bragi.RushCricketTimelineEvent.bowler_error:type_name -> bragi.RushCricketBowlerError
	19, // 26: bragi.RushCricketCurrentInningStatePartialUpdate.target:type_name -> bragi.RushCricketTarget
	15, // 27: bragi.RushCricketCurrentInningStatePartialUpdate.team_current_inning_partial_update:type_name -> bragi.RushCricketTeamCurrentInningStatePartialUpdate
	23, // 28: bragi.RushCricketTeamCurrentInningStatePartialUpdate.payload:type_name -> bragi.RushCricketTeamCurrentInningStatePartialUpdate.Payload
	24, // 29: bragi.RushCricketCurrentInningState.teams:type_name -> bragi.RushCricketCurrentInningState.TeamsEntry
	19, // 30: bragi.RushCricketCurrentInningState.target:type_name -> bragi.RushCricketTarget
	16, // 31: bragi.RushCricketTeamCurrentInningState.player:type_name -> bragi.RushCricketPlayerCurrentMapState
	5,  // 32: bragi.RushCricketMatchMessage.Payload.snapshot:type_name -> bragi.RushCricketMatchSnapshot
	6,  // 33: bragi.RushCricketMatchMessage.Payload.update:type_name -> bragi.RushCricketMatchUpdate
	9,  // 34: bragi.RushCricketMatchUpdate.Payload.match_state:type_name -> bragi.RushCricketMatchState
	7,  // 35: bragi.RushCricketMatchUpdate.Payload.partial_updates:type_name -> bragi.RushCricketMatchStatePartialUpdates
	20, // 36: bragi.RushCricketTeamCurrentInningStatePartialUpdate.Payload.team_current_inning_state:type_name -> bragi.RushCricketTeamCurrentInningState
	20, // 37: bragi.RushCricketCurrentInningState.TeamsEntry.value:type_name -> bragi.RushCricketTeamCurrentInningState
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_bragi_rush_cricket_proto_init() }
func file_bragi_rush_cricket_proto_init() {
	if File_bragi_rush_cricket_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	file_bragi_rush_cricket_proto_msgTypes[4].OneofWrappers = []any{
		(*RushCricketMatchStatePartialUpdate_Score)(nil),
		(*RushCricketMatchStatePartialUpdate_CurrentInning)(nil),
		(*RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate)(nil),
		(*RushCricketMatchStatePartialUpdate_Timeline)(nil),
	}
	file_bragi_rush_cricket_proto_msgTypes[10].OneofWrappers = []any{
		(*RushCricketCurrentInningStatePartialUpdate_Over)(nil),
		(*RushCricketCurrentInningStatePartialUpdate_Ball)(nil),
		(*RushCricketCurrentInningStatePartialUpdate_Runs)(nil),
		(*RushCricketCurrentInningStatePartialUpdate_OversPlayed)(nil),
		(*RushCricketCurrentInningStatePartialUpdate_Target)(nil),
		(*RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate)(nil),
	}
	file_bragi_rush_cricket_proto_msgTypes[17].OneofWrappers = []any{
		(*RushCricketMatchMessage_Payload_Snapshot)(nil),
		(*RushCricketMatchMessage_Payload_Update)(nil),
	}
	file_bragi_rush_cricket_proto_msgTypes[18].OneofWrappers = []any{
		(*RushCricketMatchUpdate_Payload_MatchState)(nil),
		(*RushCricketMatchUpdate_Payload_PartialUpdates)(nil),
	}
	file_bragi_rush_cricket_proto_msgTypes[19].OneofWrappers = []any{
		(*RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_rush_cricket_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_rush_cricket_proto_goTypes,
		DependencyIndexes: file_bragi_rush_cricket_proto_depIdxs,
		EnumInfos:         file_bragi_rush_cricket_proto_enumTypes,
		MessageInfos:      file_bragi_rush_cricket_proto_msgTypes,
	}.Build()
	File_bragi_rush_cricket_proto = out.File
	file_bragi_rush_cricket_proto_rawDesc = nil
	file_bragi_rush_cricket_proto_goTypes = nil
	file_bragi_rush_cricket_proto_depIdxs = nil
}
