// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.1-0.20241121165744-79df5c4772f2
// source: bragi/rush_cricket.proto

package bragi

import (
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *RushCricketMatchMessage_Payload) CloneVT() *RushCricketMatchMessage_Payload {
	if m == nil {
		return (*RushCricketMatchMessage_Payload)(nil)
	}
	r := new(RushCricketMatchMessage_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushCricketMatchMessage_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchMessage_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketMatchMessage_Payload_Snapshot) CloneVT() isRushCricketMatchMessage_Payload_Payload {
	if m == nil {
		return (*RushCricketMatchMessage_Payload_Snapshot)(nil)
	}
	r := new(RushCricketMatchMessage_Payload_Snapshot)
	r.Snapshot = m.Snapshot.CloneVT()
	return r
}

func (m *RushCricketMatchMessage_Payload_Update) CloneVT() isRushCricketMatchMessage_Payload_Payload {
	if m == nil {
		return (*RushCricketMatchMessage_Payload_Update)(nil)
	}
	r := new(RushCricketMatchMessage_Payload_Update)
	r.Update = m.Update.CloneVT()
	return r
}

func (m *RushCricketMatchMessage) CloneVT() *RushCricketMatchMessage {
	if m == nil {
		return (*RushCricketMatchMessage)(nil)
	}
	r := new(RushCricketMatchMessage)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketMatchSnapshot) CloneVT() *RushCricketMatchSnapshot {
	if m == nil {
		return (*RushCricketMatchSnapshot)(nil)
	}
	r := new(RushCricketMatchSnapshot)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.MatchState = m.MatchState.CloneVT()
	r.Tournament = m.Tournament.CloneVT()
	if rhs := m.Announcements; rhs != nil {
		tmpContainer := make([]*Announcement, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Announcements = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchSnapshot) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketMatchUpdate_Payload) CloneVT() *RushCricketMatchUpdate_Payload {
	if m == nil {
		return (*RushCricketMatchUpdate_Payload)(nil)
	}
	r := new(RushCricketMatchUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushCricketMatchUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketMatchUpdate_Payload_MatchState) CloneVT() isRushCricketMatchUpdate_Payload_Payload {
	if m == nil {
		return (*RushCricketMatchUpdate_Payload_MatchState)(nil)
	}
	r := new(RushCricketMatchUpdate_Payload_MatchState)
	r.MatchState = m.MatchState.CloneVT()
	return r
}

func (m *RushCricketMatchUpdate_Payload_PartialUpdates) CloneVT() isRushCricketMatchUpdate_Payload_Payload {
	if m == nil {
		return (*RushCricketMatchUpdate_Payload_PartialUpdates)(nil)
	}
	r := new(RushCricketMatchUpdate_Payload_PartialUpdates)
	r.PartialUpdates = m.PartialUpdates.CloneVT()
	return r
}

func (m *RushCricketMatchUpdate) CloneVT() *RushCricketMatchUpdate {
	if m == nil {
		return (*RushCricketMatchUpdate)(nil)
	}
	r := new(RushCricketMatchUpdate)
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketMatchStatePartialUpdates) CloneVT() *RushCricketMatchStatePartialUpdates {
	if m == nil {
		return (*RushCricketMatchStatePartialUpdates)(nil)
	}
	r := new(RushCricketMatchStatePartialUpdates)
	if rhs := m.Updates; rhs != nil {
		tmpContainer := make([]*RushCricketMatchStatePartialUpdate, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Updates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchStatePartialUpdates) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketMatchStatePartialUpdate) CloneVT() *RushCricketMatchStatePartialUpdate {
	if m == nil {
		return (*RushCricketMatchStatePartialUpdate)(nil)
	}
	r := new(RushCricketMatchStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isRushCricketMatchStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketMatchStatePartialUpdate_Score) CloneVT() isRushCricketMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketMatchStatePartialUpdate_Score)(nil)
	}
	r := new(RushCricketMatchStatePartialUpdate_Score)
	r.Score = m.Score.CloneVT()
	return r
}

func (m *RushCricketMatchStatePartialUpdate_CurrentInning) CloneVT() isRushCricketMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketMatchStatePartialUpdate_CurrentInning)(nil)
	}
	r := new(RushCricketMatchStatePartialUpdate_CurrentInning)
	r.CurrentInning = m.CurrentInning.CloneVT()
	return r
}

func (m *RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate) CloneVT() isRushCricketMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate)(nil)
	}
	r := new(RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate)
	r.CurrentInningPartialUpdate = m.CurrentInningPartialUpdate.CloneVT()
	return r
}

func (m *RushCricketMatchStatePartialUpdate_Timeline) CloneVT() isRushCricketMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketMatchStatePartialUpdate_Timeline)(nil)
	}
	r := new(RushCricketMatchStatePartialUpdate_Timeline)
	r.Timeline = m.Timeline.CloneVT()
	return r
}

func (m *RushCricketMatchState) CloneVT() *RushCricketMatchState {
	if m == nil {
		return (*RushCricketMatchState)(nil)
	}
	r := new(RushCricketMatchState)
	r.MatchUrn = m.MatchUrn
	r.MatchType = m.MatchType
	r.HomeTeam = m.HomeTeam.CloneVT()
	r.AwayTeam = m.AwayTeam.CloneVT()
	r.Score = m.Score.CloneVT()
	r.MatchStatus = m.MatchStatus
	r.Timeline = m.Timeline.CloneVT()
	r.CurrentInning = m.CurrentInning.CloneVT()
	r.WinTeamUrn = m.WinTeamUrn
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketMatchScoreState) CloneVT() *RushCricketMatchScoreState {
	if m == nil {
		return (*RushCricketMatchScoreState)(nil)
	}
	r := new(RushCricketMatchScoreState)
	r.HomeScore = m.HomeScore
	r.AwayScore = m.AwayScore
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketMatchScoreState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketCurrentMapScoreState) CloneVT() *RushCricketCurrentMapScoreState {
	if m == nil {
		return (*RushCricketCurrentMapScoreState)(nil)
	}
	r := new(RushCricketCurrentMapScoreState)
	r.HomeRuns = m.HomeRuns
	r.AwayRuns = m.AwayRuns
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketCurrentMapScoreState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketTimelineState) CloneVT() *RushCricketTimelineState {
	if m == nil {
		return (*RushCricketTimelineState)(nil)
	}
	r := new(RushCricketTimelineState)
	if rhs := m.Events; rhs != nil {
		tmpContainer := make([]*RushCricketTimelineEvent, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Events = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketTimelineState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketTimelineEvent) CloneVT() *RushCricketTimelineEvent {
	if m == nil {
		return (*RushCricketTimelineEvent)(nil)
	}
	r := new(RushCricketTimelineEvent)
	r.TeamUrn = m.TeamUrn
	r.EventType = m.EventType
	r.BallState = m.BallState.CloneVT()
	r.Runs = m.Runs
	r.BoundaryRun = m.BoundaryRun
	r.BowlerError = m.BowlerError
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketTimelineEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketCurrentInningStatePartialUpdate) CloneVT() *RushCricketCurrentInningStatePartialUpdate {
	if m == nil {
		return (*RushCricketCurrentInningStatePartialUpdate)(nil)
	}
	r := new(RushCricketCurrentInningStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isRushCricketCurrentInningStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketCurrentInningStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketCurrentInningStatePartialUpdate_Over) CloneVT() isRushCricketCurrentInningStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketCurrentInningStatePartialUpdate_Over)(nil)
	}
	r := new(RushCricketCurrentInningStatePartialUpdate_Over)
	r.Over = m.Over
	return r
}

func (m *RushCricketCurrentInningStatePartialUpdate_Ball) CloneVT() isRushCricketCurrentInningStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketCurrentInningStatePartialUpdate_Ball)(nil)
	}
	r := new(RushCricketCurrentInningStatePartialUpdate_Ball)
	r.Ball = m.Ball
	return r
}

func (m *RushCricketCurrentInningStatePartialUpdate_Runs) CloneVT() isRushCricketCurrentInningStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketCurrentInningStatePartialUpdate_Runs)(nil)
	}
	r := new(RushCricketCurrentInningStatePartialUpdate_Runs)
	r.Runs = m.Runs
	return r
}

func (m *RushCricketCurrentInningStatePartialUpdate_OversPlayed) CloneVT() isRushCricketCurrentInningStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketCurrentInningStatePartialUpdate_OversPlayed)(nil)
	}
	r := new(RushCricketCurrentInningStatePartialUpdate_OversPlayed)
	r.OversPlayed = m.OversPlayed
	return r
}

func (m *RushCricketCurrentInningStatePartialUpdate_Target) CloneVT() isRushCricketCurrentInningStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketCurrentInningStatePartialUpdate_Target)(nil)
	}
	r := new(RushCricketCurrentInningStatePartialUpdate_Target)
	r.Target = m.Target.CloneVT()
	return r
}

func (m *RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate) CloneVT() isRushCricketCurrentInningStatePartialUpdate_Update {
	if m == nil {
		return (*RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate)(nil)
	}
	r := new(RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate)
	r.TeamCurrentInningPartialUpdate = m.TeamCurrentInningPartialUpdate.CloneVT()
	return r
}

func (m *RushCricketTeamCurrentInningStatePartialUpdate_Payload) CloneVT() *RushCricketTeamCurrentInningStatePartialUpdate_Payload {
	if m == nil {
		return (*RushCricketTeamCurrentInningStatePartialUpdate_Payload)(nil)
	}
	r := new(RushCricketTeamCurrentInningStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketTeamCurrentInningStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState) CloneVT() isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState)(nil)
	}
	r := new(RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState)
	r.TeamCurrentInningState = m.TeamCurrentInningState.CloneVT()
	return r
}

func (m *RushCricketTeamCurrentInningStatePartialUpdate) CloneVT() *RushCricketTeamCurrentInningStatePartialUpdate {
	if m == nil {
		return (*RushCricketTeamCurrentInningStatePartialUpdate)(nil)
	}
	r := new(RushCricketTeamCurrentInningStatePartialUpdate)
	r.TeamUrn = m.TeamUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketTeamCurrentInningStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketPlayerCurrentMapState) CloneVT() *RushCricketPlayerCurrentMapState {
	if m == nil {
		return (*RushCricketPlayerCurrentMapState)(nil)
	}
	r := new(RushCricketPlayerCurrentMapState)
	r.PlayerUrn = m.PlayerUrn
	r.ExtName = m.ExtName
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketPlayerCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketBallState) CloneVT() *RushCricketBallState {
	if m == nil {
		return (*RushCricketBallState)(nil)
	}
	r := new(RushCricketBallState)
	r.Inning = m.Inning
	r.Over = m.Over
	r.Ball = m.Ball
	r.IsExtra = m.IsExtra
	r.BallOrderWithinInning = m.BallOrderWithinInning
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketBallState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketCurrentInningState) CloneVT() *RushCricketCurrentInningState {
	if m == nil {
		return (*RushCricketCurrentInningState)(nil)
	}
	r := new(RushCricketCurrentInningState)
	r.Number = m.Number
	r.Over = m.Over
	r.Ball = m.Ball
	r.BattingTeamUrn = m.BattingTeamUrn
	r.Runs = m.Runs
	r.OversPlayed = m.OversPlayed
	r.GamePaused = m.GamePaused
	r.Target = m.Target.CloneVT()
	if rhs := m.Teams; rhs != nil {
		tmpContainer := make(map[string]*RushCricketTeamCurrentInningState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Teams = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketCurrentInningState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketTarget) CloneVT() *RushCricketTarget {
	if m == nil {
		return (*RushCricketTarget)(nil)
	}
	r := new(RushCricketTarget)
	r.TeamUrn = m.TeamUrn
	r.Runs = m.Runs
	r.Overs = m.Overs
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketTarget) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushCricketTeamCurrentInningState) CloneVT() *RushCricketTeamCurrentInningState {
	if m == nil {
		return (*RushCricketTeamCurrentInningState)(nil)
	}
	r := new(RushCricketTeamCurrentInningState)
	r.Runs = m.Runs
	r.Wickets = m.Wickets
	r.BoundariesFour = m.BoundariesFour
	r.BoundariesSix = m.BoundariesSix
	r.WideBalls = m.WideBalls
	r.NoBalls = m.NoBalls
	r.OversPlayed = m.OversPlayed
	r.Player = m.Player.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushCricketTeamCurrentInningState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *RushCricketMatchMessage_Payload) EqualVT(that *RushCricketMatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushCricketMatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchMessage_Payload_Snapshot) EqualVT(thatIface isRushCricketMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketMatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &RushCricketMatchSnapshot{}
		}
		if q == nil {
			q = &RushCricketMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchMessage_Payload_Update) EqualVT(thatIface isRushCricketMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketMatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &RushCricketMatchUpdate{}
		}
		if q == nil {
			q = &RushCricketMatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchMessage) EqualVT(that *RushCricketMatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchSnapshot) EqualVT(that *RushCricketMatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchUpdate_Payload) EqualVT(that *RushCricketMatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushCricketMatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchUpdate_Payload_MatchState) EqualVT(thatIface isRushCricketMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketMatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &RushCricketMatchState{}
		}
		if q == nil {
			q = &RushCricketMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isRushCricketMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketMatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &RushCricketMatchStatePartialUpdates{}
		}
		if q == nil {
			q = &RushCricketMatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchUpdate) EqualVT(that *RushCricketMatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchStatePartialUpdates) EqualVT(that *RushCricketMatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushCricketMatchStatePartialUpdate{}
			}
			if q == nil {
				q = &RushCricketMatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchStatePartialUpdate) EqualVT(that *RushCricketMatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isRushCricketMatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchStatePartialUpdate_Score) EqualVT(thatIface isRushCricketMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketMatchStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &RushCricketMatchScoreState{}
		}
		if q == nil {
			q = &RushCricketMatchScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchStatePartialUpdate_CurrentInning) EqualVT(thatIface isRushCricketMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketMatchStatePartialUpdate_CurrentInning)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentInning, that.CurrentInning; p != q {
		if p == nil {
			p = &RushCricketCurrentInningState{}
		}
		if q == nil {
			q = &RushCricketCurrentInningState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate) EqualVT(thatIface isRushCricketMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentInningPartialUpdate, that.CurrentInningPartialUpdate; p != q {
		if p == nil {
			p = &RushCricketCurrentInningStatePartialUpdate{}
		}
		if q == nil {
			q = &RushCricketCurrentInningStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchStatePartialUpdate_Timeline) EqualVT(thatIface isRushCricketMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketMatchStatePartialUpdate_Timeline)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Timeline, that.Timeline; p != q {
		if p == nil {
			p = &RushCricketTimelineState{}
		}
		if q == nil {
			q = &RushCricketTimelineState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchState) EqualVT(that *RushCricketMatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.Timeline.EqualVT(that.Timeline) {
		return false
	}
	if !this.CurrentInning.EqualVT(that.CurrentInning) {
		return false
	}
	if this.WinTeamUrn != that.WinTeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchScoreState) EqualVT(that *RushCricketMatchScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketCurrentMapScoreState) EqualVT(that *RushCricketCurrentMapScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeRuns != that.HomeRuns {
		return false
	}
	if this.AwayRuns != that.AwayRuns {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketCurrentMapScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketCurrentMapScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTimelineState) EqualVT(that *RushCricketTimelineState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushCricketTimelineEvent{}
			}
			if q == nil {
				q = &RushCricketTimelineEvent{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTimelineState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTimelineState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTimelineEvent) EqualVT(that *RushCricketTimelineEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.EventType != that.EventType {
		return false
	}
	if !this.BallState.EqualVT(that.BallState) {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	if this.BoundaryRun != that.BoundaryRun {
		return false
	}
	if this.BowlerError != that.BowlerError {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTimelineEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTimelineEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketCurrentInningStatePartialUpdate) EqualVT(that *RushCricketCurrentInningStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isRushCricketCurrentInningStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketCurrentInningStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketCurrentInningStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketCurrentInningStatePartialUpdate_Over) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_Over)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Over != that.Over {
		return false
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_Ball) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_Ball)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Ball != that.Ball {
		return false
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_Runs) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_Runs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_OversPlayed) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_OversPlayed)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.OversPlayed != that.OversPlayed {
		return false
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_Target) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_Target)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Target, that.Target; p != q {
		if p == nil {
			p = &RushCricketTarget{}
		}
		if q == nil {
			q = &RushCricketTarget{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentInningPartialUpdate, that.TeamCurrentInningPartialUpdate; p != q {
		if p == nil {
			p = &RushCricketTeamCurrentInningStatePartialUpdate{}
		}
		if q == nil {
			q = &RushCricketTeamCurrentInningStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketTeamCurrentInningStatePartialUpdate_Payload) EqualVT(that *RushCricketTeamCurrentInningStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTeamCurrentInningStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTeamCurrentInningStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState) EqualVT(thatIface isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentInningState, that.TeamCurrentInningState; p != q {
		if p == nil {
			p = &RushCricketTeamCurrentInningState{}
		}
		if q == nil {
			q = &RushCricketTeamCurrentInningState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketTeamCurrentInningStatePartialUpdate) EqualVT(that *RushCricketTeamCurrentInningStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTeamCurrentInningStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTeamCurrentInningStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketPlayerCurrentMapState) EqualVT(that *RushCricketPlayerCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.ExtName != that.ExtName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketPlayerCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketPlayerCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketBallState) EqualVT(that *RushCricketBallState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Inning != that.Inning {
		return false
	}
	if this.Over != that.Over {
		return false
	}
	if this.Ball != that.Ball {
		return false
	}
	if this.IsExtra != that.IsExtra {
		return false
	}
	if this.BallOrderWithinInning != that.BallOrderWithinInning {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketBallState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketBallState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketCurrentInningState) EqualVT(that *RushCricketCurrentInningState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Number != that.Number {
		return false
	}
	if this.Over != that.Over {
		return false
	}
	if this.Ball != that.Ball {
		return false
	}
	if this.BattingTeamUrn != that.BattingTeamUrn {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	if this.OversPlayed != that.OversPlayed {
		return false
	}
	if this.GamePaused != that.GamePaused {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushCricketTeamCurrentInningState{}
			}
			if q == nil {
				q = &RushCricketTeamCurrentInningState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketCurrentInningState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketCurrentInningState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTarget) EqualVT(that *RushCricketTarget) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	if this.Overs != that.Overs {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTarget) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTarget)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTeamCurrentInningState) EqualVT(that *RushCricketTeamCurrentInningState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	if this.Wickets != that.Wickets {
		return false
	}
	if this.BoundariesFour != that.BoundariesFour {
		return false
	}
	if this.BoundariesSix != that.BoundariesSix {
		return false
	}
	if this.WideBalls != that.WideBalls {
		return false
	}
	if this.NoBalls != that.NoBalls {
		return false
	}
	if this.OversPlayed != that.OversPlayed {
		return false
	}
	if !this.Player.EqualVT(that.Player) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTeamCurrentInningState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTeamCurrentInningState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
