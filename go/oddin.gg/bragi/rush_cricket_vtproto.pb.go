// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.1-0.20241121165744-79df5c4772f2
// source: bragi/rush_cricket.proto

package bragi

import (
	timestamppb "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (this *RushCricketMatchMessage_Payload) EqualVT(that *RushCricketMatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushCricketMatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchMessage_Payload_Snapshot) EqualVT(thatIface isRushCricketMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketMatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &RushCricketMatchSnapshot{}
		}
		if q == nil {
			q = &RushCricketMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchMessage_Payload_Update) EqualVT(thatIface isRushCricketMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketMatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &RushCricketMatchUpdate{}
		}
		if q == nil {
			q = &RushCricketMatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchMessage) EqualVT(that *RushCricketMatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchSnapshot) EqualVT(that *RushCricketMatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchUpdate_Payload) EqualVT(that *RushCricketMatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushCricketMatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchUpdate_Payload_MatchState) EqualVT(thatIface isRushCricketMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketMatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &RushCricketMatchState{}
		}
		if q == nil {
			q = &RushCricketMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isRushCricketMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketMatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &RushCricketMatchStatePartialUpdates{}
		}
		if q == nil {
			q = &RushCricketMatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchUpdate) EqualVT(that *RushCricketMatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchStatePartialUpdates) EqualVT(that *RushCricketMatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushCricketMatchStatePartialUpdate{}
			}
			if q == nil {
				q = &RushCricketMatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchStatePartialUpdate) EqualVT(that *RushCricketMatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isRushCricketMatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchStatePartialUpdate_Score) EqualVT(thatIface isRushCricketMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketMatchStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &RushCricketMatchScoreState{}
		}
		if q == nil {
			q = &RushCricketMatchScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchStatePartialUpdate_CurrentInning) EqualVT(thatIface isRushCricketMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketMatchStatePartialUpdate_CurrentInning)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentInning, that.CurrentInning; p != q {
		if p == nil {
			p = &RushCricketCurrentInningState{}
		}
		if q == nil {
			q = &RushCricketCurrentInningState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate) EqualVT(thatIface isRushCricketMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketMatchStatePartialUpdate_CurrentInningPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentInningPartialUpdate, that.CurrentInningPartialUpdate; p != q {
		if p == nil {
			p = &RushCricketCurrentInningStatePartialUpdate{}
		}
		if q == nil {
			q = &RushCricketCurrentInningStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchStatePartialUpdate_Timeline) EqualVT(thatIface isRushCricketMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketMatchStatePartialUpdate_Timeline)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Timeline, that.Timeline; p != q {
		if p == nil {
			p = &RushCricketTimelineState{}
		}
		if q == nil {
			q = &RushCricketTimelineState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketMatchState) EqualVT(that *RushCricketMatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.Timeline.EqualVT(that.Timeline) {
		return false
	}
	if !this.CurrentInning.EqualVT(that.CurrentInning) {
		return false
	}
	if this.WinTeamUrn != that.WinTeamUrn {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketMatchScoreState) EqualVT(that *RushCricketMatchScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketMatchScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketMatchScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketCurrentMapScoreState) EqualVT(that *RushCricketCurrentMapScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeRuns != that.HomeRuns {
		return false
	}
	if this.AwayRuns != that.AwayRuns {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketCurrentMapScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketCurrentMapScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTimelineState) EqualVT(that *RushCricketTimelineState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushCricketTimelineEvent{}
			}
			if q == nil {
				q = &RushCricketTimelineEvent{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTimelineState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTimelineState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTimelineEvent) EqualVT(that *RushCricketTimelineEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.EventType != that.EventType {
		return false
	}
	if !this.BallState.EqualVT(that.BallState) {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	if this.BoundaryRun != that.BoundaryRun {
		return false
	}
	if this.BowlerError != that.BowlerError {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTimelineEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTimelineEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketCurrentInningStatePartialUpdate) EqualVT(that *RushCricketCurrentInningStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isRushCricketCurrentInningStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketCurrentInningStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketCurrentInningStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketCurrentInningStatePartialUpdate_Over) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_Over)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Over != that.Over {
		return false
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_Ball) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_Ball)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Ball != that.Ball {
		return false
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_Runs) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_Runs)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_OversPlayed) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_OversPlayed)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.OversPlayed != that.OversPlayed {
		return false
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_Target) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_Target)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Target, that.Target; p != q {
		if p == nil {
			p = &RushCricketTarget{}
		}
		if q == nil {
			q = &RushCricketTarget{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate) EqualVT(thatIface isRushCricketCurrentInningStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushCricketCurrentInningStatePartialUpdate_TeamCurrentInningPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentInningPartialUpdate, that.TeamCurrentInningPartialUpdate; p != q {
		if p == nil {
			p = &RushCricketTeamCurrentInningStatePartialUpdate{}
		}
		if q == nil {
			q = &RushCricketTeamCurrentInningStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketTeamCurrentInningStatePartialUpdate_Payload) EqualVT(that *RushCricketTeamCurrentInningStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTeamCurrentInningStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTeamCurrentInningStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState) EqualVT(thatIface isRushCricketTeamCurrentInningStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushCricketTeamCurrentInningStatePartialUpdate_Payload_TeamCurrentInningState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentInningState, that.TeamCurrentInningState; p != q {
		if p == nil {
			p = &RushCricketTeamCurrentInningState{}
		}
		if q == nil {
			q = &RushCricketTeamCurrentInningState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushCricketTeamCurrentInningStatePartialUpdate) EqualVT(that *RushCricketTeamCurrentInningStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTeamCurrentInningStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTeamCurrentInningStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketPlayerCurrentMapState) EqualVT(that *RushCricketPlayerCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.ExtName != that.ExtName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketPlayerCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketPlayerCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketBallState) EqualVT(that *RushCricketBallState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Inning != that.Inning {
		return false
	}
	if this.Over != that.Over {
		return false
	}
	if this.Ball != that.Ball {
		return false
	}
	if this.IsExtra != that.IsExtra {
		return false
	}
	if this.BallOrderWithinInning != that.BallOrderWithinInning {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketBallState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketBallState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketCurrentInningState) EqualVT(that *RushCricketCurrentInningState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Number != that.Number {
		return false
	}
	if this.Over != that.Over {
		return false
	}
	if this.Ball != that.Ball {
		return false
	}
	if this.BattingTeamUrn != that.BattingTeamUrn {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	if this.OversPlayed != that.OversPlayed {
		return false
	}
	if this.GamePaused != that.GamePaused {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushCricketTeamCurrentInningState{}
			}
			if q == nil {
				q = &RushCricketTeamCurrentInningState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketCurrentInningState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketCurrentInningState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTarget) EqualVT(that *RushCricketTarget) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	if this.Overs != that.Overs {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTarget) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTarget)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushCricketTeamCurrentInningState) EqualVT(that *RushCricketTeamCurrentInningState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Runs != that.Runs {
		return false
	}
	if this.Wickets != that.Wickets {
		return false
	}
	if this.BoundariesFour != that.BoundariesFour {
		return false
	}
	if this.BoundariesSix != that.BoundariesSix {
		return false
	}
	if this.WideBalls != that.WideBalls {
		return false
	}
	if this.NoBalls != that.NoBalls {
		return false
	}
	if this.OversPlayed != that.OversPlayed {
		return false
	}
	if !this.Player.EqualVT(that.Player) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushCricketTeamCurrentInningState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushCricketTeamCurrentInningState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
