// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: bragi/rush_soccer.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RushSoccerEventType int32

const (
	RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_UNSPECIFIED   RushSoccerEventType = 0
	RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_GOAL          RushSoccerEventType = 1
	RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_PENALTY       RushSoccerEventType = 2
	RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_RED_CARD      RushSoccerEventType = 3
	RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_YELLOW_CARD   RushSoccerEventType = 4
	RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_FREE_KICK     RushSoccerEventType = 5
	RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_CORNER_KICK   RushSoccerEventType = 6
	RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_PERIOD_CHANGE RushSoccerEventType = 7
)

// Enum value maps for RushSoccerEventType.
var (
	RushSoccerEventType_name = map[int32]string{
		0: "RUSH_SOCCER_EVENT_TYPE_UNSPECIFIED",
		1: "RUSH_SOCCER_EVENT_TYPE_GOAL",
		2: "RUSH_SOCCER_EVENT_TYPE_PENALTY",
		3: "RUSH_SOCCER_EVENT_TYPE_RED_CARD",
		4: "RUSH_SOCCER_EVENT_TYPE_YELLOW_CARD",
		5: "RUSH_SOCCER_EVENT_TYPE_FREE_KICK",
		6: "RUSH_SOCCER_EVENT_TYPE_CORNER_KICK",
		7: "RUSH_SOCCER_EVENT_TYPE_PERIOD_CHANGE",
	}
	RushSoccerEventType_value = map[string]int32{
		"RUSH_SOCCER_EVENT_TYPE_UNSPECIFIED":   0,
		"RUSH_SOCCER_EVENT_TYPE_GOAL":          1,
		"RUSH_SOCCER_EVENT_TYPE_PENALTY":       2,
		"RUSH_SOCCER_EVENT_TYPE_RED_CARD":      3,
		"RUSH_SOCCER_EVENT_TYPE_YELLOW_CARD":   4,
		"RUSH_SOCCER_EVENT_TYPE_FREE_KICK":     5,
		"RUSH_SOCCER_EVENT_TYPE_CORNER_KICK":   6,
		"RUSH_SOCCER_EVENT_TYPE_PERIOD_CHANGE": 7,
	}
)

func (x RushSoccerEventType) Enum() *RushSoccerEventType {
	p := new(RushSoccerEventType)
	*p = x
	return p
}

func (x RushSoccerEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RushSoccerEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_rush_soccer_proto_enumTypes[0].Descriptor()
}

func (RushSoccerEventType) Type() protoreflect.EnumType {
	return &file_bragi_rush_soccer_proto_enumTypes[0]
}

func (x RushSoccerEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RushSoccerEventType.Descriptor instead.
func (RushSoccerEventType) EnumDescriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{0}
}

type RushSoccerPeriod int32

const (
	RushSoccerPeriod_RUSH_SOCCER_PERIOD_UNSPECIFIED RushSoccerPeriod = 0
	RushSoccerPeriod_RUSH_SOCCER_PERIOD_FIRST       RushSoccerPeriod = 1
	RushSoccerPeriod_RUSH_SOCCER_PERIOD_SECOND      RushSoccerPeriod = 2
)

// Enum value maps for RushSoccerPeriod.
var (
	RushSoccerPeriod_name = map[int32]string{
		0: "RUSH_SOCCER_PERIOD_UNSPECIFIED",
		1: "RUSH_SOCCER_PERIOD_FIRST",
		2: "RUSH_SOCCER_PERIOD_SECOND",
	}
	RushSoccerPeriod_value = map[string]int32{
		"RUSH_SOCCER_PERIOD_UNSPECIFIED": 0,
		"RUSH_SOCCER_PERIOD_FIRST":       1,
		"RUSH_SOCCER_PERIOD_SECOND":      2,
	}
)

func (x RushSoccerPeriod) Enum() *RushSoccerPeriod {
	p := new(RushSoccerPeriod)
	*p = x
	return p
}

func (x RushSoccerPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RushSoccerPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_rush_soccer_proto_enumTypes[1].Descriptor()
}

func (RushSoccerPeriod) Type() protoreflect.EnumType {
	return &file_bragi_rush_soccer_proto_enumTypes[1]
}

func (x RushSoccerPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RushSoccerPeriod.Descriptor instead.
func (RushSoccerPeriod) EnumDescriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{1}
}

type RushSoccerMatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// Message sequence.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Message timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Data status.
	DataStatus DataStatus `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	// Message payload.
	Payload *RushSoccerMatchMessage_Payload `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RushSoccerMatchMessage) Reset() {
	*x = RushSoccerMatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchMessage) ProtoMessage() {}

func (x *RushSoccerMatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchMessage.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{0}
}

func (x *RushSoccerMatchMessage) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushSoccerMatchMessage) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RushSoccerMatchMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RushSoccerMatchMessage) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *RushSoccerMatchMessage) GetPayload() *RushSoccerMatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushSoccerMatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// Message sequence.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Message timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Data status.
	DataStatus DataStatus `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	// Control announcements.
	Announcements []*Announcement `protobuf:"bytes,5,rep,name=announcements,proto3" json:"announcements,omitempty"`
	// Match state.
	MatchState *RushSoccerMatchState `protobuf:"bytes,6,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
}

func (x *RushSoccerMatchSnapshot) Reset() {
	*x = RushSoccerMatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchSnapshot) ProtoMessage() {}

func (x *RushSoccerMatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchSnapshot.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{1}
}

func (x *RushSoccerMatchSnapshot) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushSoccerMatchSnapshot) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RushSoccerMatchSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RushSoccerMatchSnapshot) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *RushSoccerMatchSnapshot) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *RushSoccerMatchSnapshot) GetMatchState() *RushSoccerMatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

type RushSoccerMatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Update payload.
	Payload *RushSoccerMatchUpdate_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RushSoccerMatchUpdate) Reset() {
	*x = RushSoccerMatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchUpdate) ProtoMessage() {}

func (x *RushSoccerMatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchUpdate.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{2}
}

func (x *RushSoccerMatchUpdate) GetPayload() *RushSoccerMatchUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushSoccerMatchStatePartialUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partial updates.
	Updates []*RushSoccerMatchStatePartialUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *RushSoccerMatchStatePartialUpdates) Reset() {
	*x = RushSoccerMatchStatePartialUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchStatePartialUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchStatePartialUpdates) ProtoMessage() {}

func (x *RushSoccerMatchStatePartialUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchStatePartialUpdates.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchStatePartialUpdates) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{3}
}

func (x *RushSoccerMatchStatePartialUpdates) GetUpdates() []*RushSoccerMatchStatePartialUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type RushSoccerMatchStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*RushSoccerMatchStatePartialUpdate_Score
	//	*RushSoccerMatchStatePartialUpdate_CurrentMapState
	//	*RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate
	//	*RushSoccerMatchStatePartialUpdate_Timeline
	Update isRushSoccerMatchStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *RushSoccerMatchStatePartialUpdate) Reset() {
	*x = RushSoccerMatchStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchStatePartialUpdate) ProtoMessage() {}

func (x *RushSoccerMatchStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{4}
}

func (m *RushSoccerMatchStatePartialUpdate) GetUpdate() isRushSoccerMatchStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *RushSoccerMatchStatePartialUpdate) GetScore() *RushSoccerMatchScoreState {
	if x, ok := x.GetUpdate().(*RushSoccerMatchStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *RushSoccerMatchStatePartialUpdate) GetCurrentMapState() *RushSoccerCurrentMapState {
	if x, ok := x.GetUpdate().(*RushSoccerMatchStatePartialUpdate_CurrentMapState); ok {
		return x.CurrentMapState
	}
	return nil
}

func (x *RushSoccerMatchStatePartialUpdate) GetCurrentMapStatePartialUpdate() *RushSoccerCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate); ok {
		return x.CurrentMapStatePartialUpdate
	}
	return nil
}

func (x *RushSoccerMatchStatePartialUpdate) GetTimeline() *RushSoccerTimelineState {
	if x, ok := x.GetUpdate().(*RushSoccerMatchStatePartialUpdate_Timeline); ok {
		return x.Timeline
	}
	return nil
}

type isRushSoccerMatchStatePartialUpdate_Update interface {
	isRushSoccerMatchStatePartialUpdate_Update()
}

type RushSoccerMatchStatePartialUpdate_Score struct {
	// Replaces "score" property in RushSoccerMatchState.
	Score *RushSoccerMatchScoreState `protobuf:"bytes,1,opt,name=score,proto3,oneof"`
}

type RushSoccerMatchStatePartialUpdate_CurrentMapState struct {
	// Replaces "current_map_state" property in RushSoccerCurrentMapState. To minimalize issues with incorrect updates application
	// on current_map_state, server sends RushSoccerMatchStatePartialUpdate with RushSoccerCurrentMapState in periodic time set by customer.
	CurrentMapState *RushSoccerCurrentMapState `protobuf:"bytes,2,opt,name=current_map_state,json=currentMapState,proto3,oneof"`
}

type RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate struct {
	// Apply partial update on "current_map_state" property in RushSoccerMapState.
	CurrentMapStatePartialUpdate *RushSoccerCurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=current_map_state_partial_update,json=currentMapStatePartialUpdate,proto3,oneof"`
}

type RushSoccerMatchStatePartialUpdate_Timeline struct {
	// Replaces "timeline" property in RushSoccerMatchState.
	Timeline *RushSoccerTimelineState `protobuf:"bytes,4,opt,name=timeline,proto3,oneof"`
}

func (*RushSoccerMatchStatePartialUpdate_Score) isRushSoccerMatchStatePartialUpdate_Update() {}

func (*RushSoccerMatchStatePartialUpdate_CurrentMapState) isRushSoccerMatchStatePartialUpdate_Update() {
}

func (*RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate) isRushSoccerMatchStatePartialUpdate_Update() {
}

func (*RushSoccerMatchStatePartialUpdate_Timeline) isRushSoccerMatchStatePartialUpdate_Update() {}

type RushSoccerMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Match urn.
	MatchUrn string `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	// BO type.
	MatchType BestOfType `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=bragi.BestOfType" json:"match_type,omitempty"`
	// Home team.
	HomeTeam *Team `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	// Away team.
	AwayTeam *Team `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	// Match score - number of maps won.
	Score *RushSoccerMatchScoreState `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	// Match status.
	MatchStatus MatchStatusType `protobuf:"varint,6,opt,name=match_status,json=matchStatus,proto3,enum=bragi.MatchStatusType" json:"match_status,omitempty"`
	// Timeline state.
	Timeline *RushSoccerTimelineState `protobuf:"bytes,7,opt,name=timeline,proto3" json:"timeline,omitempty"`
	// Current map state.
	CurrentMap *RushSoccerCurrentMapState `protobuf:"bytes,8,opt,name=current_map,json=currentMap,proto3" json:"current_map,omitempty"`
}

func (x *RushSoccerMatchState) Reset() {
	*x = RushSoccerMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchState) ProtoMessage() {}

func (x *RushSoccerMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchState.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{5}
}

func (x *RushSoccerMatchState) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *RushSoccerMatchState) GetMatchType() BestOfType {
	if x != nil {
		return x.MatchType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *RushSoccerMatchState) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *RushSoccerMatchState) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *RushSoccerMatchState) GetScore() *RushSoccerMatchScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *RushSoccerMatchState) GetMatchStatus() MatchStatusType {
	if x != nil {
		return x.MatchStatus
	}
	return MatchStatusType_MATCH_STATUS_TYPE_UNSPECIFIED
}

func (x *RushSoccerMatchState) GetTimeline() *RushSoccerTimelineState {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *RushSoccerMatchState) GetCurrentMap() *RushSoccerCurrentMapState {
	if x != nil {
		return x.CurrentMap
	}
	return nil
}

type RushSoccerMatchScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of maps won by home team.
	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	// Number of maps won by away team.
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *RushSoccerMatchScoreState) Reset() {
	*x = RushSoccerMatchScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchScoreState) ProtoMessage() {}

func (x *RushSoccerMatchScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchScoreState.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{6}
}

func (x *RushSoccerMatchScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *RushSoccerMatchScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type RushSoccerCurrentMapScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of home goals.
	HomeGoals uint32 `protobuf:"varint,1,opt,name=home_goals,json=homeGoals,proto3" json:"home_goals,omitempty"`
	// Number of away goals.
	AwayGoals uint32 `protobuf:"varint,2,opt,name=away_goals,json=awayGoals,proto3" json:"away_goals,omitempty"`
}

func (x *RushSoccerCurrentMapScoreState) Reset() {
	*x = RushSoccerCurrentMapScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerCurrentMapScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerCurrentMapScoreState) ProtoMessage() {}

func (x *RushSoccerCurrentMapScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerCurrentMapScoreState.ProtoReflect.Descriptor instead.
func (*RushSoccerCurrentMapScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{7}
}

func (x *RushSoccerCurrentMapScoreState) GetHomeGoals() uint32 {
	if x != nil {
		return x.HomeGoals
	}
	return 0
}

func (x *RushSoccerCurrentMapScoreState) GetAwayGoals() uint32 {
	if x != nil {
		return x.AwayGoals
	}
	return 0
}

type RushSoccerTimelineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeline events.
	Events []*RushSoccerTimelineEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *RushSoccerTimelineState) Reset() {
	*x = RushSoccerTimelineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerTimelineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerTimelineState) ProtoMessage() {}

func (x *RushSoccerTimelineState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerTimelineState.ProtoReflect.Descriptor instead.
func (*RushSoccerTimelineState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{8}
}

func (x *RushSoccerTimelineState) GetEvents() []*RushSoccerTimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RushSoccerTimelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Team urn.
	TeamUrn string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	// Event type.
	EventType RushSoccerEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=bragi.RushSoccerEventType" json:"event_type,omitempty"`
	// Real time in seconds (2x 4 minutes).
	RealTime *durationpb.Duration `protobuf:"bytes,3,opt,name=real_time,json=realTime,proto3" json:"real_time,omitempty"`
	// Game time in seconds (2x 45 minutes).
	GameTime *durationpb.Duration `protobuf:"bytes,4,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	// Period.
	Period RushSoccerPeriod `protobuf:"varint,5,opt,name=period,proto3,enum=bragi.RushSoccerPeriod" json:"period,omitempty"`
}

func (x *RushSoccerTimelineEvent) Reset() {
	*x = RushSoccerTimelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerTimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerTimelineEvent) ProtoMessage() {}

func (x *RushSoccerTimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerTimelineEvent.ProtoReflect.Descriptor instead.
func (*RushSoccerTimelineEvent) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{9}
}

func (x *RushSoccerTimelineEvent) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushSoccerTimelineEvent) GetEventType() RushSoccerEventType {
	if x != nil {
		return x.EventType
	}
	return RushSoccerEventType_RUSH_SOCCER_EVENT_TYPE_UNSPECIFIED
}

func (x *RushSoccerTimelineEvent) GetRealTime() *durationpb.Duration {
	if x != nil {
		return x.RealTime
	}
	return nil
}

func (x *RushSoccerTimelineEvent) GetGameTime() *durationpb.Duration {
	if x != nil {
		return x.GameTime
	}
	return nil
}

func (x *RushSoccerTimelineEvent) GetPeriod() RushSoccerPeriod {
	if x != nil {
		return x.Period
	}
	return RushSoccerPeriod_RUSH_SOCCER_PERIOD_UNSPECIFIED
}

type RushSoccerCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*RushSoccerCurrentMapStatePartialUpdate_GameTime
	//	*RushSoccerCurrentMapStatePartialUpdate_Score
	//	*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState
	//	*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate
	Update isRushSoccerCurrentMapStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *RushSoccerCurrentMapStatePartialUpdate) Reset() {
	*x = RushSoccerCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *RushSoccerCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushSoccerCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{10}
}

func (m *RushSoccerCurrentMapStatePartialUpdate) GetUpdate() isRushSoccerCurrentMapStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *RushSoccerCurrentMapStatePartialUpdate) GetGameTime() *RushSoccerCurrentMapTimeState {
	if x, ok := x.GetUpdate().(*RushSoccerCurrentMapStatePartialUpdate_GameTime); ok {
		return x.GameTime
	}
	return nil
}

func (x *RushSoccerCurrentMapStatePartialUpdate) GetScore() *RushSoccerCurrentMapScoreState {
	if x, ok := x.GetUpdate().(*RushSoccerCurrentMapStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *RushSoccerCurrentMapStatePartialUpdate) GetTeamCurrentMapState() *RushSoccerTeamCurrentMapState {
	if x, ok := x.GetUpdate().(*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState); ok {
		return x.TeamCurrentMapState
	}
	return nil
}

func (x *RushSoccerCurrentMapStatePartialUpdate) GetTeamCurrentMapPartialUpdate() *RushSoccerTeamCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate); ok {
		return x.TeamCurrentMapPartialUpdate
	}
	return nil
}

type isRushSoccerCurrentMapStatePartialUpdate_Update interface {
	isRushSoccerCurrentMapStatePartialUpdate_Update()
}

type RushSoccerCurrentMapStatePartialUpdate_GameTime struct {
	// Replaces "game_time" property in RushSoccerCurrentMapState.
	GameTime *RushSoccerCurrentMapTimeState `protobuf:"bytes,1,opt,name=game_time,json=gameTime,proto3,oneof"`
}

type RushSoccerCurrentMapStatePartialUpdate_Score struct {
	// Replaces "score" property in RushSoccerCurrentMapState.
	Score *RushSoccerCurrentMapScoreState `protobuf:"bytes,2,opt,name=score,proto3,oneof"`
}

type RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState struct {
	// Replaces whole value under given key in teams map property in RushSoccerTeamCurrentMapState.
	TeamCurrentMapState *RushSoccerTeamCurrentMapState `protobuf:"bytes,3,opt,name=team_current_map_state,json=teamCurrentMapState,proto3,oneof"`
}

type RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate struct {
	// Apply partial update on value under given key in teams map property in RushSoccerCurrentMapState.
	TeamCurrentMapPartialUpdate *RushSoccerTeamCurrentMapStatePartialUpdate `protobuf:"bytes,4,opt,name=team_current_map_partial_update,json=teamCurrentMapPartialUpdate,proto3,oneof"`
}

func (*RushSoccerCurrentMapStatePartialUpdate_GameTime) isRushSoccerCurrentMapStatePartialUpdate_Update() {
}

func (*RushSoccerCurrentMapStatePartialUpdate_Score) isRushSoccerCurrentMapStatePartialUpdate_Update() {
}

func (*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState) isRushSoccerCurrentMapStatePartialUpdate_Update() {
}

func (*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) isRushSoccerCurrentMapStatePartialUpdate_Update() {
}

type RushSoccerCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Period.
	Period RushSoccerPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=bragi.RushSoccerPeriod" json:"period,omitempty"`
	// Game time.
	GameTime *RushSoccerCurrentMapTimeState `protobuf:"bytes,2,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	// Map score.
	Score *RushSoccerCurrentMapScoreState `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	// Paused flag.
	MapPaused bool `protobuf:"varint,4,opt,name=map_paused,json=mapPaused,proto3" json:"map_paused,omitempty"`
	// Teams.
	Teams map[string]*RushSoccerTeamCurrentMapState `protobuf:"bytes,5,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RushSoccerCurrentMapState) Reset() {
	*x = RushSoccerCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerCurrentMapState) ProtoMessage() {}

func (x *RushSoccerCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerCurrentMapState.ProtoReflect.Descriptor instead.
func (*RushSoccerCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{11}
}

func (x *RushSoccerCurrentMapState) GetPeriod() RushSoccerPeriod {
	if x != nil {
		return x.Period
	}
	return RushSoccerPeriod_RUSH_SOCCER_PERIOD_UNSPECIFIED
}

func (x *RushSoccerCurrentMapState) GetGameTime() *RushSoccerCurrentMapTimeState {
	if x != nil {
		return x.GameTime
	}
	return nil
}

func (x *RushSoccerCurrentMapState) GetScore() *RushSoccerCurrentMapScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *RushSoccerCurrentMapState) GetMapPaused() bool {
	if x != nil {
		return x.MapPaused
	}
	return false
}

func (x *RushSoccerCurrentMapState) GetTeams() map[string]*RushSoccerTeamCurrentMapState {
	if x != nil {
		return x.Teams
	}
	return nil
}

type RushSoccerCurrentMapTimeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Real time in seconds (2x 4 minutes).
	RealTime *durationpb.Duration `protobuf:"bytes,1,opt,name=real_time,json=realTime,proto3" json:"real_time,omitempty"`
	// Game time in seconds (2x 45 minutes).
	GameTime *durationpb.Duration `protobuf:"bytes,2,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
}

func (x *RushSoccerCurrentMapTimeState) Reset() {
	*x = RushSoccerCurrentMapTimeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerCurrentMapTimeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerCurrentMapTimeState) ProtoMessage() {}

func (x *RushSoccerCurrentMapTimeState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerCurrentMapTimeState.ProtoReflect.Descriptor instead.
func (*RushSoccerCurrentMapTimeState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{12}
}

func (x *RushSoccerCurrentMapTimeState) GetRealTime() *durationpb.Duration {
	if x != nil {
		return x.RealTime
	}
	return nil
}

func (x *RushSoccerCurrentMapTimeState) GetGameTime() *durationpb.Duration {
	if x != nil {
		return x.GameTime
	}
	return nil
}

type RushSoccerTeamCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Team urn.
	TeamUrn string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	// Update payload.
	Payload *RushSoccerTeamCurrentMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate) Reset() {
	*x = RushSoccerTeamCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerTeamCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerTeamCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*RushSoccerTeamCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{13}
}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate) GetPayload() *RushSoccerTeamCurrentMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RushSoccerTeamCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Team urn.
	TeamUrn string `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	// Current map statistics state.
	MapStatistics *RushSoccerTeamCurrentMapStatisticsState `protobuf:"bytes,2,opt,name=map_statistics,json=mapStatistics,proto3" json:"map_statistics,omitempty"`
	// Current map player state.
	Player *RushSoccerPlayerCurrentMapState `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *RushSoccerTeamCurrentMapState) Reset() {
	*x = RushSoccerTeamCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerTeamCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerTeamCurrentMapState) ProtoMessage() {}

func (x *RushSoccerTeamCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerTeamCurrentMapState.ProtoReflect.Descriptor instead.
func (*RushSoccerTeamCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{14}
}

func (x *RushSoccerTeamCurrentMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *RushSoccerTeamCurrentMapState) GetMapStatistics() *RushSoccerTeamCurrentMapStatisticsState {
	if x != nil {
		return x.MapStatistics
	}
	return nil
}

func (x *RushSoccerTeamCurrentMapState) GetPlayer() *RushSoccerPlayerCurrentMapState {
	if x != nil {
		return x.Player
	}
	return nil
}

type RushSoccerPlayerCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Player urn.
	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	// Player ext name.
	ExtName string `protobuf:"bytes,2,opt,name=ext_name,json=extName,proto3" json:"ext_name,omitempty"`
}

func (x *RushSoccerPlayerCurrentMapState) Reset() {
	*x = RushSoccerPlayerCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerPlayerCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerPlayerCurrentMapState) ProtoMessage() {}

func (x *RushSoccerPlayerCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerPlayerCurrentMapState.ProtoReflect.Descriptor instead.
func (*RushSoccerPlayerCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{15}
}

func (x *RushSoccerPlayerCurrentMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *RushSoccerPlayerCurrentMapState) GetExtName() string {
	if x != nil {
		return x.ExtName
	}
	return ""
}

type RushSoccerTeamCurrentMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  Number of goals.
	Goals uint32 `protobuf:"varint,1,opt,name=goals,proto3" json:"goals,omitempty"`
	// Number of goals in the first period.
	GoalsHt uint32 `protobuf:"varint,2,opt,name=goals_ht,json=goalsHt,proto3" json:"goals_ht,omitempty"`
	// Number of penalty kicks.
	PenaltyKicks uint32 `protobuf:"varint,3,opt,name=penalty_kicks,json=penaltyKicks,proto3" json:"penalty_kicks,omitempty"`
	// Number of red cards.
	RedCards uint32 `protobuf:"varint,4,opt,name=red_cards,json=redCards,proto3" json:"red_cards,omitempty"`
	// Number of yellow cards.
	YellowCards uint32 `protobuf:"varint,5,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`
	// Number of free kicks.
	FreeKicks uint32 `protobuf:"varint,6,opt,name=free_kicks,json=freeKicks,proto3" json:"free_kicks,omitempty"`
	// Number of corner kicks.
	CornerKicks uint32 `protobuf:"varint,7,opt,name=corner_kicks,json=cornerKicks,proto3" json:"corner_kicks,omitempty"`
}

func (x *RushSoccerTeamCurrentMapStatisticsState) Reset() {
	*x = RushSoccerTeamCurrentMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerTeamCurrentMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerTeamCurrentMapStatisticsState) ProtoMessage() {}

func (x *RushSoccerTeamCurrentMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerTeamCurrentMapStatisticsState.ProtoReflect.Descriptor instead.
func (*RushSoccerTeamCurrentMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{16}
}

func (x *RushSoccerTeamCurrentMapStatisticsState) GetGoals() uint32 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *RushSoccerTeamCurrentMapStatisticsState) GetGoalsHt() uint32 {
	if x != nil {
		return x.GoalsHt
	}
	return 0
}

func (x *RushSoccerTeamCurrentMapStatisticsState) GetPenaltyKicks() uint32 {
	if x != nil {
		return x.PenaltyKicks
	}
	return 0
}

func (x *RushSoccerTeamCurrentMapStatisticsState) GetRedCards() uint32 {
	if x != nil {
		return x.RedCards
	}
	return 0
}

func (x *RushSoccerTeamCurrentMapStatisticsState) GetYellowCards() uint32 {
	if x != nil {
		return x.YellowCards
	}
	return 0
}

func (x *RushSoccerTeamCurrentMapStatisticsState) GetFreeKicks() uint32 {
	if x != nil {
		return x.FreeKicks
	}
	return 0
}

func (x *RushSoccerTeamCurrentMapStatisticsState) GetCornerKicks() uint32 {
	if x != nil {
		return x.CornerKicks
	}
	return 0
}

type RushSoccerMatchMessage_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*RushSoccerMatchMessage_Payload_Snapshot
	//	*RushSoccerMatchMessage_Payload_Update
	Payload isRushSoccerMatchMessage_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *RushSoccerMatchMessage_Payload) Reset() {
	*x = RushSoccerMatchMessage_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchMessage_Payload) ProtoMessage() {}

func (x *RushSoccerMatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{0, 0}
}

func (m *RushSoccerMatchMessage_Payload) GetPayload() isRushSoccerMatchMessage_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RushSoccerMatchMessage_Payload) GetSnapshot() *RushSoccerMatchSnapshot {
	if x, ok := x.GetPayload().(*RushSoccerMatchMessage_Payload_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *RushSoccerMatchMessage_Payload) GetUpdate() *RushSoccerMatchUpdate {
	if x, ok := x.GetPayload().(*RushSoccerMatchMessage_Payload_Update); ok {
		return x.Update
	}
	return nil
}

type isRushSoccerMatchMessage_Payload_Payload interface {
	isRushSoccerMatchMessage_Payload_Payload()
}

type RushSoccerMatchMessage_Payload_Snapshot struct {
	// Initial snapshot.
	Snapshot *RushSoccerMatchSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type RushSoccerMatchMessage_Payload_Update struct {
	// Particular updates which are applied on property match_state in MatchState.
	Update *RushSoccerMatchUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*RushSoccerMatchMessage_Payload_Snapshot) isRushSoccerMatchMessage_Payload_Payload() {}

func (*RushSoccerMatchMessage_Payload_Update) isRushSoccerMatchMessage_Payload_Payload() {}

type RushSoccerMatchUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*RushSoccerMatchUpdate_Payload_MatchState
	//	*RushSoccerMatchUpdate_Payload_PartialUpdates
	Payload isRushSoccerMatchUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *RushSoccerMatchUpdate_Payload) Reset() {
	*x = RushSoccerMatchUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerMatchUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerMatchUpdate_Payload) ProtoMessage() {}

func (x *RushSoccerMatchUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerMatchUpdate_Payload.ProtoReflect.Descriptor instead.
func (*RushSoccerMatchUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{2, 0}
}

func (m *RushSoccerMatchUpdate_Payload) GetPayload() isRushSoccerMatchUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RushSoccerMatchUpdate_Payload) GetMatchState() *RushSoccerMatchState {
	if x, ok := x.GetPayload().(*RushSoccerMatchUpdate_Payload_MatchState); ok {
		return x.MatchState
	}
	return nil
}

func (x *RushSoccerMatchUpdate_Payload) GetPartialUpdates() *RushSoccerMatchStatePartialUpdates {
	if x, ok := x.GetPayload().(*RushSoccerMatchUpdate_Payload_PartialUpdates); ok {
		return x.PartialUpdates
	}
	return nil
}

type isRushSoccerMatchUpdate_Payload_Payload interface {
	isRushSoccerMatchUpdate_Payload_Payload()
}

type RushSoccerMatchUpdate_Payload_MatchState struct {
	// Complete match state.
	MatchState *RushSoccerMatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3,oneof"`
}

type RushSoccerMatchUpdate_Payload_PartialUpdates struct {
	// Partial update.
	PartialUpdates *RushSoccerMatchStatePartialUpdates `protobuf:"bytes,2,opt,name=partial_updates,json=partialUpdates,proto3,oneof"`
}

func (*RushSoccerMatchUpdate_Payload_MatchState) isRushSoccerMatchUpdate_Payload_Payload() {}

func (*RushSoccerMatchUpdate_Payload_PartialUpdates) isRushSoccerMatchUpdate_Payload_Payload() {}

type RushSoccerTeamCurrentMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics
	//	*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player
	Payload isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) Reset() {
	*x = RushSoccerTeamCurrentMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_rush_soccer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RushSoccerTeamCurrentMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_rush_soccer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RushSoccerTeamCurrentMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*RushSoccerTeamCurrentMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_rush_soccer_proto_rawDescGZIP(), []int{13, 0}
}

func (m *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) GetPayload() isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) GetMapStatistics() *RushSoccerTeamCurrentMapStatisticsState {
	if x, ok := x.GetPayload().(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics); ok {
		return x.MapStatistics
	}
	return nil
}

func (x *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) GetPlayer() *RushSoccerPlayerCurrentMapState {
	if x, ok := x.GetPayload().(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player); ok {
		return x.Player
	}
	return nil
}

type isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload interface {
	isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload()
}

type RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics struct {
	// Replaces "statistics" property in RushSoccerTeamCurrentMapState.
	MapStatistics *RushSoccerTeamCurrentMapStatisticsState `protobuf:"bytes,1,opt,name=map_statistics,json=mapStatistics,proto3,oneof"`
}

type RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player struct {
	// Replaces "player" property in RushSoccerTeamCurrentMapState.
	Player *RushSoccerPlayerCurrentMapState `protobuf:"bytes,2,opt,name=player,proto3,oneof"`
}

func (*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics) isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player) isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

var File_bragi_rush_soccer_proto protoreflect.FileDescriptor

var file_bragi_rush_soccer_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x6f, 0x63,
	0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x03, 0x0a, 0x16, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x8a, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52,
	0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53,
	0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb9, 0x02, 0x0a, 0x17, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xaa, 0x01, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63,
	0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x68, 0x0a, 0x22, 0x52, 0x75, 0x73, 0x68,
	0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x21, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x77, 0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x14, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x36, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73,
	0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68,
	0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x22, 0x59, 0x0a, 0x19, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5e, 0x0a, 0x1e,
	0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x22, 0x51, 0x0a, 0x17,
	0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x90, 0x02, 0x0a, 0x17, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x63, 0x63, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x22, 0x8e, 0x03, 0x0a, 0x26, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63,
	0x63, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x63, 0x63, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x5b, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x63, 0x63, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x79,
	0x0a, 0x1f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x19, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x63, 0x63, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75,
	0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73,
	0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63,
	0x63, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x1a, 0x5e, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68,
	0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63,
	0x63, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x2a, 0x52, 0x75, 0x73, 0x68, 0x53,
	0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e,
	0x12, 0x53, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x63, 0x63, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xaf, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x57, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x1d, 0x52, 0x75, 0x73, 0x68,
	0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6e, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x1f, 0x52,
	0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x27, 0x52, 0x75, 0x73,
	0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f,
	0x61, 0x6c, 0x73, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x6f,
	0x61, 0x6c, 0x73, 0x48, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72,
	0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x73, 0x2a, 0xc7, 0x02, 0x0a,
	0x13, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63, 0x63, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43,
	0x43, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43, 0x43, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43, 0x43, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10,
	0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43, 0x43, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x53,
	0x4f, 0x43, 0x43, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43, 0x43, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4b, 0x49,
	0x43, 0x4b, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43,
	0x43, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x52, 0x4e, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24,
	0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43, 0x43, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x2a, 0x73, 0x0a, 0x10, 0x52, 0x75, 0x73, 0x68, 0x53, 0x6f,
	0x63, 0x63, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x55,
	0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43, 0x43, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43, 0x43, 0x45, 0x52, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x4f, 0x43, 0x43, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x21, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x5a, 0x0e,
	0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bragi_rush_soccer_proto_rawDescOnce sync.Once
	file_bragi_rush_soccer_proto_rawDescData = file_bragi_rush_soccer_proto_rawDesc
)

func file_bragi_rush_soccer_proto_rawDescGZIP() []byte {
	file_bragi_rush_soccer_proto_rawDescOnce.Do(func() {
		file_bragi_rush_soccer_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_rush_soccer_proto_rawDescData)
	})
	return file_bragi_rush_soccer_proto_rawDescData
}

var file_bragi_rush_soccer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bragi_rush_soccer_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bragi_rush_soccer_proto_goTypes = []interface{}{
	(RushSoccerEventType)(0),                                   // 0: bragi.RushSoccerEventType
	(RushSoccerPeriod)(0),                                      // 1: bragi.RushSoccerPeriod
	(*RushSoccerMatchMessage)(nil),                             // 2: bragi.RushSoccerMatchMessage
	(*RushSoccerMatchSnapshot)(nil),                            // 3: bragi.RushSoccerMatchSnapshot
	(*RushSoccerMatchUpdate)(nil),                              // 4: bragi.RushSoccerMatchUpdate
	(*RushSoccerMatchStatePartialUpdates)(nil),                 // 5: bragi.RushSoccerMatchStatePartialUpdates
	(*RushSoccerMatchStatePartialUpdate)(nil),                  // 6: bragi.RushSoccerMatchStatePartialUpdate
	(*RushSoccerMatchState)(nil),                               // 7: bragi.RushSoccerMatchState
	(*RushSoccerMatchScoreState)(nil),                          // 8: bragi.RushSoccerMatchScoreState
	(*RushSoccerCurrentMapScoreState)(nil),                     // 9: bragi.RushSoccerCurrentMapScoreState
	(*RushSoccerTimelineState)(nil),                            // 10: bragi.RushSoccerTimelineState
	(*RushSoccerTimelineEvent)(nil),                            // 11: bragi.RushSoccerTimelineEvent
	(*RushSoccerCurrentMapStatePartialUpdate)(nil),             // 12: bragi.RushSoccerCurrentMapStatePartialUpdate
	(*RushSoccerCurrentMapState)(nil),                          // 13: bragi.RushSoccerCurrentMapState
	(*RushSoccerCurrentMapTimeState)(nil),                      // 14: bragi.RushSoccerCurrentMapTimeState
	(*RushSoccerTeamCurrentMapStatePartialUpdate)(nil),         // 15: bragi.RushSoccerTeamCurrentMapStatePartialUpdate
	(*RushSoccerTeamCurrentMapState)(nil),                      // 16: bragi.RushSoccerTeamCurrentMapState
	(*RushSoccerPlayerCurrentMapState)(nil),                    // 17: bragi.RushSoccerPlayerCurrentMapState
	(*RushSoccerTeamCurrentMapStatisticsState)(nil),            // 18: bragi.RushSoccerTeamCurrentMapStatisticsState
	(*RushSoccerMatchMessage_Payload)(nil),                     // 19: bragi.RushSoccerMatchMessage.Payload
	(*RushSoccerMatchUpdate_Payload)(nil),                      // 20: bragi.RushSoccerMatchUpdate.Payload
	nil,                                                        // 21: bragi.RushSoccerCurrentMapState.TeamsEntry
	(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload)(nil), // 22: bragi.RushSoccerTeamCurrentMapStatePartialUpdate.Payload
	(*timestamppb.Timestamp)(nil),                              // 23: google.protobuf.Timestamp
	(DataStatus)(0),                                            // 24: bragi.DataStatus
	(*Announcement)(nil),                                       // 25: bragi.Announcement
	(BestOfType)(0),                                            // 26: bragi.BestOfType
	(*Team)(nil),                                               // 27: bragi.Team
	(MatchStatusType)(0),                                       // 28: bragi.MatchStatusType
	(*durationpb.Duration)(nil),                                // 29: google.protobuf.Duration
}
var file_bragi_rush_soccer_proto_depIdxs = []int32{
	23, // 0: bragi.RushSoccerMatchMessage.timestamp:type_name -> google.protobuf.Timestamp
	24, // 1: bragi.RushSoccerMatchMessage.data_status:type_name -> bragi.DataStatus
	19, // 2: bragi.RushSoccerMatchMessage.payload:type_name -> bragi.RushSoccerMatchMessage.Payload
	23, // 3: bragi.RushSoccerMatchSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	24, // 4: bragi.RushSoccerMatchSnapshot.data_status:type_name -> bragi.DataStatus
	25, // 5: bragi.RushSoccerMatchSnapshot.announcements:type_name -> bragi.Announcement
	7,  // 6: bragi.RushSoccerMatchSnapshot.match_state:type_name -> bragi.RushSoccerMatchState
	20, // 7: bragi.RushSoccerMatchUpdate.payload:type_name -> bragi.RushSoccerMatchUpdate.Payload
	6,  // 8: bragi.RushSoccerMatchStatePartialUpdates.updates:type_name -> bragi.RushSoccerMatchStatePartialUpdate
	8,  // 9: bragi.RushSoccerMatchStatePartialUpdate.score:type_name -> bragi.RushSoccerMatchScoreState
	13, // 10: bragi.RushSoccerMatchStatePartialUpdate.current_map_state:type_name -> bragi.RushSoccerCurrentMapState
	12, // 11: bragi.RushSoccerMatchStatePartialUpdate.current_map_state_partial_update:type_name -> bragi.RushSoccerCurrentMapStatePartialUpdate
	10, // 12: bragi.RushSoccerMatchStatePartialUpdate.timeline:type_name -> bragi.RushSoccerTimelineState
	26, // 13: bragi.RushSoccerMatchState.match_type:type_name -> bragi.BestOfType
	27, // 14: bragi.RushSoccerMatchState.home_team:type_name -> bragi.Team
	27, // 15: bragi.RushSoccerMatchState.away_team:type_name -> bragi.Team
	8,  // 16: bragi.RushSoccerMatchState.score:type_name -> bragi.RushSoccerMatchScoreState
	28, // 17: bragi.RushSoccerMatchState.match_status:type_name -> bragi.MatchStatusType
	10, // 18: bragi.RushSoccerMatchState.timeline:type_name -> bragi.RushSoccerTimelineState
	13, // 19: bragi.RushSoccerMatchState.current_map:type_name -> bragi.RushSoccerCurrentMapState
	11, // 20: bragi.RushSoccerTimelineState.events:type_name -> bragi.RushSoccerTimelineEvent
	0,  // 21: bragi.RushSoccerTimelineEvent.event_type:type_name -> bragi.RushSoccerEventType
	29, // 22: bragi.RushSoccerTimelineEvent.real_time:type_name -> google.protobuf.Duration
	29, // 23: bragi.RushSoccerTimelineEvent.game_time:type_name -> google.protobuf.Duration
	1,  // 24: bragi.RushSoccerTimelineEvent.period:type_name -> bragi.RushSoccerPeriod
	14, // 25: bragi.RushSoccerCurrentMapStatePartialUpdate.game_time:type_name -> bragi.RushSoccerCurrentMapTimeState
	9,  // 26: bragi.RushSoccerCurrentMapStatePartialUpdate.score:type_name -> bragi.RushSoccerCurrentMapScoreState
	16, // 27: bragi.RushSoccerCurrentMapStatePartialUpdate.team_current_map_state:type_name -> bragi.RushSoccerTeamCurrentMapState
	15, // 28: bragi.RushSoccerCurrentMapStatePartialUpdate.team_current_map_partial_update:type_name -> bragi.RushSoccerTeamCurrentMapStatePartialUpdate
	1,  // 29: bragi.RushSoccerCurrentMapState.period:type_name -> bragi.RushSoccerPeriod
	14, // 30: bragi.RushSoccerCurrentMapState.game_time:type_name -> bragi.RushSoccerCurrentMapTimeState
	9,  // 31: bragi.RushSoccerCurrentMapState.score:type_name -> bragi.RushSoccerCurrentMapScoreState
	21, // 32: bragi.RushSoccerCurrentMapState.teams:type_name -> bragi.RushSoccerCurrentMapState.TeamsEntry
	29, // 33: bragi.RushSoccerCurrentMapTimeState.real_time:type_name -> google.protobuf.Duration
	29, // 34: bragi.RushSoccerCurrentMapTimeState.game_time:type_name -> google.protobuf.Duration
	22, // 35: bragi.RushSoccerTeamCurrentMapStatePartialUpdate.payload:type_name -> bragi.RushSoccerTeamCurrentMapStatePartialUpdate.Payload
	18, // 36: bragi.RushSoccerTeamCurrentMapState.map_statistics:type_name -> bragi.RushSoccerTeamCurrentMapStatisticsState
	17, // 37: bragi.RushSoccerTeamCurrentMapState.player:type_name -> bragi.RushSoccerPlayerCurrentMapState
	3,  // 38: bragi.RushSoccerMatchMessage.Payload.snapshot:type_name -> bragi.RushSoccerMatchSnapshot
	4,  // 39: bragi.RushSoccerMatchMessage.Payload.update:type_name -> bragi.RushSoccerMatchUpdate
	7,  // 40: bragi.RushSoccerMatchUpdate.Payload.match_state:type_name -> bragi.RushSoccerMatchState
	5,  // 41: bragi.RushSoccerMatchUpdate.Payload.partial_updates:type_name -> bragi.RushSoccerMatchStatePartialUpdates
	16, // 42: bragi.RushSoccerCurrentMapState.TeamsEntry.value:type_name -> bragi.RushSoccerTeamCurrentMapState
	18, // 43: bragi.RushSoccerTeamCurrentMapStatePartialUpdate.Payload.map_statistics:type_name -> bragi.RushSoccerTeamCurrentMapStatisticsState
	17, // 44: bragi.RushSoccerTeamCurrentMapStatePartialUpdate.Payload.player:type_name -> bragi.RushSoccerPlayerCurrentMapState
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_bragi_rush_soccer_proto_init() }
func file_bragi_rush_soccer_proto_init() {
	if File_bragi_rush_soccer_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_rush_soccer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchStatePartialUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerCurrentMapScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerTimelineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerTimelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerCurrentMapTimeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerTeamCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerTeamCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerPlayerCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerTeamCurrentMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchMessage_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerMatchUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_rush_soccer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_rush_soccer_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RushSoccerMatchStatePartialUpdate_Score)(nil),
		(*RushSoccerMatchStatePartialUpdate_CurrentMapState)(nil),
		(*RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil),
		(*RushSoccerMatchStatePartialUpdate_Timeline)(nil),
	}
	file_bragi_rush_soccer_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RushSoccerCurrentMapStatePartialUpdate_GameTime)(nil),
		(*RushSoccerCurrentMapStatePartialUpdate_Score)(nil),
		(*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState)(nil),
		(*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)(nil),
	}
	file_bragi_rush_soccer_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*RushSoccerMatchMessage_Payload_Snapshot)(nil),
		(*RushSoccerMatchMessage_Payload_Update)(nil),
	}
	file_bragi_rush_soccer_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*RushSoccerMatchUpdate_Payload_MatchState)(nil),
		(*RushSoccerMatchUpdate_Payload_PartialUpdates)(nil),
	}
	file_bragi_rush_soccer_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics)(nil),
		(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_rush_soccer_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_rush_soccer_proto_goTypes,
		DependencyIndexes: file_bragi_rush_soccer_proto_depIdxs,
		EnumInfos:         file_bragi_rush_soccer_proto_enumTypes,
		MessageInfos:      file_bragi_rush_soccer_proto_msgTypes,
	}.Build()
	File_bragi_rush_soccer_proto = out.File
	file_bragi_rush_soccer_proto_rawDesc = nil
	file_bragi_rush_soccer_proto_goTypes = nil
	file_bragi_rush_soccer_proto_depIdxs = nil
}
