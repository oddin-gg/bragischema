// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: bragi/rush_soccer.proto

package bragi

import (
	durationpb1 "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb1 "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *RushSoccerMatchMessage_Payload) CloneVT() *RushSoccerMatchMessage_Payload {
	if m == nil {
		return (*RushSoccerMatchMessage_Payload)(nil)
	}
	r := new(RushSoccerMatchMessage_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushSoccerMatchMessage_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchMessage_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerMatchMessage_Payload_Snapshot) CloneVT() isRushSoccerMatchMessage_Payload_Payload {
	if m == nil {
		return (*RushSoccerMatchMessage_Payload_Snapshot)(nil)
	}
	r := new(RushSoccerMatchMessage_Payload_Snapshot)
	r.Snapshot = m.Snapshot.CloneVT()
	return r
}

func (m *RushSoccerMatchMessage_Payload_Update) CloneVT() isRushSoccerMatchMessage_Payload_Payload {
	if m == nil {
		return (*RushSoccerMatchMessage_Payload_Update)(nil)
	}
	r := new(RushSoccerMatchMessage_Payload_Update)
	r.Update = m.Update.CloneVT()
	return r
}

func (m *RushSoccerMatchMessage) CloneVT() *RushSoccerMatchMessage {
	if m == nil {
		return (*RushSoccerMatchMessage)(nil)
	}
	r := new(RushSoccerMatchMessage)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchMessage) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerMatchSnapshot) CloneVT() *RushSoccerMatchSnapshot {
	if m == nil {
		return (*RushSoccerMatchSnapshot)(nil)
	}
	r := new(RushSoccerMatchSnapshot)
	r.MatchUrn = m.MatchUrn
	r.Sequence = m.Sequence
	r.Timestamp = (*timestamppb.Timestamp)((*timestamppb1.Timestamp)(m.Timestamp).CloneVT())
	r.DataStatus = m.DataStatus
	r.MatchState = m.MatchState.CloneVT()
	r.Tournament = m.Tournament.CloneVT()
	if rhs := m.Announcements; rhs != nil {
		tmpContainer := make([]*Announcement, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Announcements = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchSnapshot) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerMatchUpdate_Payload) CloneVT() *RushSoccerMatchUpdate_Payload {
	if m == nil {
		return (*RushSoccerMatchUpdate_Payload)(nil)
	}
	r := new(RushSoccerMatchUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushSoccerMatchUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerMatchUpdate_Payload_MatchState) CloneVT() isRushSoccerMatchUpdate_Payload_Payload {
	if m == nil {
		return (*RushSoccerMatchUpdate_Payload_MatchState)(nil)
	}
	r := new(RushSoccerMatchUpdate_Payload_MatchState)
	r.MatchState = m.MatchState.CloneVT()
	return r
}

func (m *RushSoccerMatchUpdate_Payload_PartialUpdates) CloneVT() isRushSoccerMatchUpdate_Payload_Payload {
	if m == nil {
		return (*RushSoccerMatchUpdate_Payload_PartialUpdates)(nil)
	}
	r := new(RushSoccerMatchUpdate_Payload_PartialUpdates)
	r.PartialUpdates = m.PartialUpdates.CloneVT()
	return r
}

func (m *RushSoccerMatchUpdate) CloneVT() *RushSoccerMatchUpdate {
	if m == nil {
		return (*RushSoccerMatchUpdate)(nil)
	}
	r := new(RushSoccerMatchUpdate)
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerMatchStatePartialUpdates) CloneVT() *RushSoccerMatchStatePartialUpdates {
	if m == nil {
		return (*RushSoccerMatchStatePartialUpdates)(nil)
	}
	r := new(RushSoccerMatchStatePartialUpdates)
	if rhs := m.Updates; rhs != nil {
		tmpContainer := make([]*RushSoccerMatchStatePartialUpdate, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Updates = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchStatePartialUpdates) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerMatchStatePartialUpdate) CloneVT() *RushSoccerMatchStatePartialUpdate {
	if m == nil {
		return (*RushSoccerMatchStatePartialUpdate)(nil)
	}
	r := new(RushSoccerMatchStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isRushSoccerMatchStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerMatchStatePartialUpdate_Score) CloneVT() isRushSoccerMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushSoccerMatchStatePartialUpdate_Score)(nil)
	}
	r := new(RushSoccerMatchStatePartialUpdate_Score)
	r.Score = m.Score.CloneVT()
	return r
}

func (m *RushSoccerMatchStatePartialUpdate_CurrentMapState) CloneVT() isRushSoccerMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushSoccerMatchStatePartialUpdate_CurrentMapState)(nil)
	}
	r := new(RushSoccerMatchStatePartialUpdate_CurrentMapState)
	r.CurrentMapState = m.CurrentMapState.CloneVT()
	return r
}

func (m *RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate) CloneVT() isRushSoccerMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate)(nil)
	}
	r := new(RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	r.CurrentMapStatePartialUpdate = m.CurrentMapStatePartialUpdate.CloneVT()
	return r
}

func (m *RushSoccerMatchStatePartialUpdate_Timeline) CloneVT() isRushSoccerMatchStatePartialUpdate_Update {
	if m == nil {
		return (*RushSoccerMatchStatePartialUpdate_Timeline)(nil)
	}
	r := new(RushSoccerMatchStatePartialUpdate_Timeline)
	r.Timeline = m.Timeline.CloneVT()
	return r
}

func (m *RushSoccerMatchState) CloneVT() *RushSoccerMatchState {
	if m == nil {
		return (*RushSoccerMatchState)(nil)
	}
	r := new(RushSoccerMatchState)
	r.MatchUrn = m.MatchUrn
	r.MatchType = m.MatchType
	r.HomeTeam = m.HomeTeam.CloneVT()
	r.AwayTeam = m.AwayTeam.CloneVT()
	r.Score = m.Score.CloneVT()
	r.MatchStatus = m.MatchStatus
	r.Timeline = m.Timeline.CloneVT()
	r.CurrentMap = m.CurrentMap.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerMatchScoreState) CloneVT() *RushSoccerMatchScoreState {
	if m == nil {
		return (*RushSoccerMatchScoreState)(nil)
	}
	r := new(RushSoccerMatchScoreState)
	r.HomeScore = m.HomeScore
	r.AwayScore = m.AwayScore
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerMatchScoreState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerCurrentMapScoreState) CloneVT() *RushSoccerCurrentMapScoreState {
	if m == nil {
		return (*RushSoccerCurrentMapScoreState)(nil)
	}
	r := new(RushSoccerCurrentMapScoreState)
	r.HomeGoals = m.HomeGoals
	r.AwayGoals = m.AwayGoals
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerCurrentMapScoreState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerTimelineState) CloneVT() *RushSoccerTimelineState {
	if m == nil {
		return (*RushSoccerTimelineState)(nil)
	}
	r := new(RushSoccerTimelineState)
	if rhs := m.Events; rhs != nil {
		tmpContainer := make([]*RushSoccerTimelineEvent, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Events = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerTimelineState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerTimelineEvent) CloneVT() *RushSoccerTimelineEvent {
	if m == nil {
		return (*RushSoccerTimelineEvent)(nil)
	}
	r := new(RushSoccerTimelineEvent)
	r.TeamUrn = m.TeamUrn
	r.EventType = m.EventType
	r.RealTime = (*durationpb.Duration)((*durationpb1.Duration)(m.RealTime).CloneVT())
	r.GameTime = (*durationpb.Duration)((*durationpb1.Duration)(m.GameTime).CloneVT())
	r.Period = m.Period
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerTimelineEvent) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerCurrentMapStatePartialUpdate) CloneVT() *RushSoccerCurrentMapStatePartialUpdate {
	if m == nil {
		return (*RushSoccerCurrentMapStatePartialUpdate)(nil)
	}
	r := new(RushSoccerCurrentMapStatePartialUpdate)
	if m.Update != nil {
		r.Update = m.Update.(interface {
			CloneVT() isRushSoccerCurrentMapStatePartialUpdate_Update
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerCurrentMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerCurrentMapStatePartialUpdate_GameTime) CloneVT() isRushSoccerCurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*RushSoccerCurrentMapStatePartialUpdate_GameTime)(nil)
	}
	r := new(RushSoccerCurrentMapStatePartialUpdate_GameTime)
	r.GameTime = m.GameTime.CloneVT()
	return r
}

func (m *RushSoccerCurrentMapStatePartialUpdate_Score) CloneVT() isRushSoccerCurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*RushSoccerCurrentMapStatePartialUpdate_Score)(nil)
	}
	r := new(RushSoccerCurrentMapStatePartialUpdate_Score)
	r.Score = m.Score.CloneVT()
	return r
}

func (m *RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState) CloneVT() isRushSoccerCurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState)(nil)
	}
	r := new(RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState)
	r.TeamCurrentMapState = m.TeamCurrentMapState.CloneVT()
	return r
}

func (m *RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) CloneVT() isRushSoccerCurrentMapStatePartialUpdate_Update {
	if m == nil {
		return (*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)(nil)
	}
	r := new(RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)
	r.TeamCurrentMapPartialUpdate = m.TeamCurrentMapPartialUpdate.CloneVT()
	return r
}

func (m *RushSoccerCurrentMapState) CloneVT() *RushSoccerCurrentMapState {
	if m == nil {
		return (*RushSoccerCurrentMapState)(nil)
	}
	r := new(RushSoccerCurrentMapState)
	r.Period = m.Period
	r.GameTime = m.GameTime.CloneVT()
	r.Score = m.Score.CloneVT()
	r.MapPaused = m.MapPaused
	if rhs := m.Teams; rhs != nil {
		tmpContainer := make(map[string]*RushSoccerTeamCurrentMapState, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Teams = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerCurrentMapTimeState) CloneVT() *RushSoccerCurrentMapTimeState {
	if m == nil {
		return (*RushSoccerCurrentMapTimeState)(nil)
	}
	r := new(RushSoccerCurrentMapTimeState)
	r.RealTime = (*durationpb.Duration)((*durationpb1.Duration)(m.RealTime).CloneVT())
	r.GameTime = (*durationpb.Duration)((*durationpb1.Duration)(m.GameTime).CloneVT())
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerCurrentMapTimeState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) CloneVT() *RushSoccerTeamCurrentMapStatePartialUpdate_Payload {
	if m == nil {
		return (*RushSoccerTeamCurrentMapStatePartialUpdate_Payload)(nil)
	}
	r := new(RushSoccerTeamCurrentMapStatePartialUpdate_Payload)
	if m.Payload != nil {
		r.Payload = m.Payload.(interface {
			CloneVT() isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload
		}).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics) CloneVT() isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics)(nil)
	}
	r := new(RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics)
	r.MapStatistics = m.MapStatistics.CloneVT()
	return r
}

func (m *RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player) CloneVT() isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m == nil {
		return (*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player)(nil)
	}
	r := new(RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player)
	r.Player = m.Player.CloneVT()
	return r
}

func (m *RushSoccerTeamCurrentMapStatePartialUpdate) CloneVT() *RushSoccerTeamCurrentMapStatePartialUpdate {
	if m == nil {
		return (*RushSoccerTeamCurrentMapStatePartialUpdate)(nil)
	}
	r := new(RushSoccerTeamCurrentMapStatePartialUpdate)
	r.TeamUrn = m.TeamUrn
	r.Payload = m.Payload.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerTeamCurrentMapStatePartialUpdate) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerTeamCurrentMapState) CloneVT() *RushSoccerTeamCurrentMapState {
	if m == nil {
		return (*RushSoccerTeamCurrentMapState)(nil)
	}
	r := new(RushSoccerTeamCurrentMapState)
	r.TeamUrn = m.TeamUrn
	r.MapStatistics = m.MapStatistics.CloneVT()
	r.Player = m.Player.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerTeamCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerPlayerCurrentMapState) CloneVT() *RushSoccerPlayerCurrentMapState {
	if m == nil {
		return (*RushSoccerPlayerCurrentMapState)(nil)
	}
	r := new(RushSoccerPlayerCurrentMapState)
	r.PlayerUrn = m.PlayerUrn
	r.ExtName = m.ExtName
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerPlayerCurrentMapState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RushSoccerTeamCurrentMapStatisticsState) CloneVT() *RushSoccerTeamCurrentMapStatisticsState {
	if m == nil {
		return (*RushSoccerTeamCurrentMapStatisticsState)(nil)
	}
	r := new(RushSoccerTeamCurrentMapStatisticsState)
	r.Goals = m.Goals
	r.GoalsHt = m.GoalsHt
	r.PenaltyKicks = m.PenaltyKicks
	r.RedCards = m.RedCards
	r.YellowCards = m.YellowCards
	r.FreeKicks = m.FreeKicks
	r.CornerKicks = m.CornerKicks
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RushSoccerTeamCurrentMapStatisticsState) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (this *RushSoccerMatchMessage_Payload) EqualVT(that *RushSoccerMatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushSoccerMatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerMatchMessage_Payload_Snapshot) EqualVT(thatIface isRushSoccerMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*RushSoccerMatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &RushSoccerMatchSnapshot{}
		}
		if q == nil {
			q = &RushSoccerMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerMatchMessage_Payload_Update) EqualVT(thatIface isRushSoccerMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*RushSoccerMatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &RushSoccerMatchUpdate{}
		}
		if q == nil {
			q = &RushSoccerMatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerMatchMessage) EqualVT(that *RushSoccerMatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerMatchSnapshot) EqualVT(that *RushSoccerMatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb1.Timestamp)(this.Timestamp).EqualVT((*timestamppb1.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerMatchUpdate_Payload) EqualVT(that *RushSoccerMatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushSoccerMatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerMatchUpdate_Payload_MatchState) EqualVT(thatIface isRushSoccerMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushSoccerMatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &RushSoccerMatchState{}
		}
		if q == nil {
			q = &RushSoccerMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerMatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isRushSoccerMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushSoccerMatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &RushSoccerMatchStatePartialUpdates{}
		}
		if q == nil {
			q = &RushSoccerMatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerMatchUpdate) EqualVT(that *RushSoccerMatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerMatchStatePartialUpdates) EqualVT(that *RushSoccerMatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushSoccerMatchStatePartialUpdate{}
			}
			if q == nil {
				q = &RushSoccerMatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerMatchStatePartialUpdate) EqualVT(that *RushSoccerMatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isRushSoccerMatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerMatchStatePartialUpdate_Score) EqualVT(thatIface isRushSoccerMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushSoccerMatchStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &RushSoccerMatchScoreState{}
		}
		if q == nil {
			q = &RushSoccerMatchScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerMatchStatePartialUpdate_CurrentMapState) EqualVT(thatIface isRushSoccerMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushSoccerMatchStatePartialUpdate_CurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapState, that.CurrentMapState; p != q {
		if p == nil {
			p = &RushSoccerCurrentMapState{}
		}
		if q == nil {
			q = &RushSoccerCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate) EqualVT(thatIface isRushSoccerMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushSoccerMatchStatePartialUpdate_CurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapStatePartialUpdate, that.CurrentMapStatePartialUpdate; p != q {
		if p == nil {
			p = &RushSoccerCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &RushSoccerCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerMatchStatePartialUpdate_Timeline) EqualVT(thatIface isRushSoccerMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushSoccerMatchStatePartialUpdate_Timeline)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Timeline, that.Timeline; p != q {
		if p == nil {
			p = &RushSoccerTimelineState{}
		}
		if q == nil {
			q = &RushSoccerTimelineState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerMatchState) EqualVT(that *RushSoccerMatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.Timeline.EqualVT(that.Timeline) {
		return false
	}
	if !this.CurrentMap.EqualVT(that.CurrentMap) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerMatchScoreState) EqualVT(that *RushSoccerMatchScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerMatchScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerMatchScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerCurrentMapScoreState) EqualVT(that *RushSoccerCurrentMapScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeGoals != that.HomeGoals {
		return false
	}
	if this.AwayGoals != that.AwayGoals {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerCurrentMapScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerCurrentMapScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerTimelineState) EqualVT(that *RushSoccerTimelineState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushSoccerTimelineEvent{}
			}
			if q == nil {
				q = &RushSoccerTimelineEvent{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerTimelineState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerTimelineState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerTimelineEvent) EqualVT(that *RushSoccerTimelineEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.EventType != that.EventType {
		return false
	}
	if !(*durationpb1.Duration)(this.RealTime).EqualVT((*durationpb1.Duration)(that.RealTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.GameTime).EqualVT((*durationpb1.Duration)(that.GameTime)) {
		return false
	}
	if this.Period != that.Period {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerTimelineEvent) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerTimelineEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerCurrentMapStatePartialUpdate) EqualVT(that *RushSoccerCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isRushSoccerCurrentMapStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerCurrentMapStatePartialUpdate_GameTime) EqualVT(thatIface isRushSoccerCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushSoccerCurrentMapStatePartialUpdate_GameTime)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GameTime, that.GameTime; p != q {
		if p == nil {
			p = &RushSoccerCurrentMapTimeState{}
		}
		if q == nil {
			q = &RushSoccerCurrentMapTimeState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerCurrentMapStatePartialUpdate_Score) EqualVT(thatIface isRushSoccerCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushSoccerCurrentMapStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &RushSoccerCurrentMapScoreState{}
		}
		if q == nil {
			q = &RushSoccerCurrentMapScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState) EqualVT(thatIface isRushSoccerCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapState, that.TeamCurrentMapState; p != q {
		if p == nil {
			p = &RushSoccerTeamCurrentMapState{}
		}
		if q == nil {
			q = &RushSoccerTeamCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) EqualVT(thatIface isRushSoccerCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*RushSoccerCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapPartialUpdate, that.TeamCurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &RushSoccerTeamCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &RushSoccerTeamCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerCurrentMapState) EqualVT(that *RushSoccerCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Period != that.Period {
		return false
	}
	if !this.GameTime.EqualVT(that.GameTime) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MapPaused != that.MapPaused {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RushSoccerTeamCurrentMapState{}
			}
			if q == nil {
				q = &RushSoccerTeamCurrentMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerCurrentMapTimeState) EqualVT(that *RushSoccerCurrentMapTimeState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb1.Duration)(this.RealTime).EqualVT((*durationpb1.Duration)(that.RealTime)) {
		return false
	}
	if !(*durationpb1.Duration)(this.GameTime).EqualVT((*durationpb1.Duration)(that.GameTime)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerCurrentMapTimeState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerCurrentMapTimeState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) EqualVT(that *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerTeamCurrentMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics) EqualVT(thatIface isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_MapStatistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MapStatistics, that.MapStatistics; p != q {
		if p == nil {
			p = &RushSoccerTeamCurrentMapStatisticsState{}
		}
		if q == nil {
			q = &RushSoccerTeamCurrentMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player) EqualVT(thatIface isRushSoccerTeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*RushSoccerTeamCurrentMapStatePartialUpdate_Payload_Player)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Player, that.Player; p != q {
		if p == nil {
			p = &RushSoccerPlayerCurrentMapState{}
		}
		if q == nil {
			q = &RushSoccerPlayerCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RushSoccerTeamCurrentMapStatePartialUpdate) EqualVT(that *RushSoccerTeamCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerTeamCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerTeamCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerTeamCurrentMapState) EqualVT(that *RushSoccerTeamCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.MapStatistics.EqualVT(that.MapStatistics) {
		return false
	}
	if !this.Player.EqualVT(that.Player) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerTeamCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerTeamCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerPlayerCurrentMapState) EqualVT(that *RushSoccerPlayerCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.ExtName != that.ExtName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerPlayerCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerPlayerCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RushSoccerTeamCurrentMapStatisticsState) EqualVT(that *RushSoccerTeamCurrentMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Goals != that.Goals {
		return false
	}
	if this.GoalsHt != that.GoalsHt {
		return false
	}
	if this.PenaltyKicks != that.PenaltyKicks {
		return false
	}
	if this.RedCards != that.RedCards {
		return false
	}
	if this.YellowCards != that.YellowCards {
		return false
	}
	if this.FreeKicks != that.FreeKicks {
		return false
	}
	if this.CornerKicks != that.CornerKicks {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RushSoccerTeamCurrentMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RushSoccerTeamCurrentMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
