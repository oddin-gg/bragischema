// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: bragi/valorant.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValorantUltimateState int32

const (
	ValorantUltimateState_VALORANT_ULTIMATE_STATE__UNSPECIFIED ValorantUltimateState = 0
	ValorantUltimateState_VALORANT_ULTIMATE_STATE_READY        ValorantUltimateState = 1
	ValorantUltimateState_VALORANT_ULTIMATE_STATE_NOT_READY    ValorantUltimateState = 2
)

// Enum value maps for ValorantUltimateState.
var (
	ValorantUltimateState_name = map[int32]string{
		0: "VALORANT_ULTIMATE_STATE__UNSPECIFIED",
		1: "VALORANT_ULTIMATE_STATE_READY",
		2: "VALORANT_ULTIMATE_STATE_NOT_READY",
	}
	ValorantUltimateState_value = map[string]int32{
		"VALORANT_ULTIMATE_STATE__UNSPECIFIED": 0,
		"VALORANT_ULTIMATE_STATE_READY":        1,
		"VALORANT_ULTIMATE_STATE_NOT_READY":    2,
	}
)

func (x ValorantUltimateState) Enum() *ValorantUltimateState {
	p := new(ValorantUltimateState)
	*p = x
	return p
}

func (x ValorantUltimateState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValorantUltimateState) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_valorant_proto_enumTypes[0].Descriptor()
}

func (ValorantUltimateState) Type() protoreflect.EnumType {
	return &file_bragi_valorant_proto_enumTypes[0]
}

func (x ValorantUltimateState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValorantUltimateState.Descriptor instead.
func (ValorantUltimateState) EnumDescriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{0}
}

type ValorantSide int32

const (
	ValorantSide_VALORANT_SIDE_UNSPECIFIED ValorantSide = 0
	ValorantSide_VALORANT_SIDE_DEFENDERS   ValorantSide = 1
	ValorantSide_VALORANT_SIDE_ATTACKERS   ValorantSide = 2
)

// Enum value maps for ValorantSide.
var (
	ValorantSide_name = map[int32]string{
		0: "VALORANT_SIDE_UNSPECIFIED",
		1: "VALORANT_SIDE_DEFENDERS",
		2: "VALORANT_SIDE_ATTACKERS",
	}
	ValorantSide_value = map[string]int32{
		"VALORANT_SIDE_UNSPECIFIED": 0,
		"VALORANT_SIDE_DEFENDERS":   1,
		"VALORANT_SIDE_ATTACKERS":   2,
	}
)

func (x ValorantSide) Enum() *ValorantSide {
	p := new(ValorantSide)
	*p = x
	return p
}

func (x ValorantSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValorantSide) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_valorant_proto_enumTypes[1].Descriptor()
}

func (ValorantSide) Type() protoreflect.EnumType {
	return &file_bragi_valorant_proto_enumTypes[1]
}

func (x ValorantSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValorantSide.Descriptor instead.
func (ValorantSide) EnumDescriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{1}
}

type ValorantRoundOutcome int32

const (
	ValorantRoundOutcome_VALORANT_ROUND_OUTCOME_UNSPECIFIED               ValorantRoundOutcome = 0
	ValorantRoundOutcome_VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_ELIMINATION ValorantRoundOutcome = 1
	ValorantRoundOutcome_VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_TIMEOUT     ValorantRoundOutcome = 2
	ValorantRoundOutcome_VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_DEFUSE      ValorantRoundOutcome = 3
	ValorantRoundOutcome_VALORANT_ROUND_OUTCOME_ATTACKERS_WIN_ELIMINATION ValorantRoundOutcome = 4
	ValorantRoundOutcome_VALORANT_ROUND_OUTCOME_ATTACKERS_WIN_EXPLODE     ValorantRoundOutcome = 5
)

// Enum value maps for ValorantRoundOutcome.
var (
	ValorantRoundOutcome_name = map[int32]string{
		0: "VALORANT_ROUND_OUTCOME_UNSPECIFIED",
		1: "VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_ELIMINATION",
		2: "VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_TIMEOUT",
		3: "VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_DEFUSE",
		4: "VALORANT_ROUND_OUTCOME_ATTACKERS_WIN_ELIMINATION",
		5: "VALORANT_ROUND_OUTCOME_ATTACKERS_WIN_EXPLODE",
	}
	ValorantRoundOutcome_value = map[string]int32{
		"VALORANT_ROUND_OUTCOME_UNSPECIFIED":               0,
		"VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_ELIMINATION": 1,
		"VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_TIMEOUT":     2,
		"VALORANT_ROUND_OUTCOME_DEFENDERS_WIN_DEFUSE":      3,
		"VALORANT_ROUND_OUTCOME_ATTACKERS_WIN_ELIMINATION": 4,
		"VALORANT_ROUND_OUTCOME_ATTACKERS_WIN_EXPLODE":     5,
	}
)

func (x ValorantRoundOutcome) Enum() *ValorantRoundOutcome {
	p := new(ValorantRoundOutcome)
	*p = x
	return p
}

func (x ValorantRoundOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValorantRoundOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_valorant_proto_enumTypes[2].Descriptor()
}

func (ValorantRoundOutcome) Type() protoreflect.EnumType {
	return &file_bragi_valorant_proto_enumTypes[2]
}

func (x ValorantRoundOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValorantRoundOutcome.Descriptor instead.
func (ValorantRoundOutcome) EnumDescriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{2}
}

type ValorantRoundPhase int32

const (
	ValorantRoundPhase_VALORANT_ROUND_PHASE_UNSPECIFIED ValorantRoundPhase = 0
	ValorantRoundPhase_VALORANT_ROUND_PHASE_BUY_PHASE   ValorantRoundPhase = 1
	ValorantRoundPhase_VALORANT_ROUND_PHASE_RUNNING     ValorantRoundPhase = 2
	ValorantRoundPhase_VALORANT_ROUND_PHASE_OVER        ValorantRoundPhase = 3
)

// Enum value maps for ValorantRoundPhase.
var (
	ValorantRoundPhase_name = map[int32]string{
		0: "VALORANT_ROUND_PHASE_UNSPECIFIED",
		1: "VALORANT_ROUND_PHASE_BUY_PHASE",
		2: "VALORANT_ROUND_PHASE_RUNNING",
		3: "VALORANT_ROUND_PHASE_OVER",
	}
	ValorantRoundPhase_value = map[string]int32{
		"VALORANT_ROUND_PHASE_UNSPECIFIED": 0,
		"VALORANT_ROUND_PHASE_BUY_PHASE":   1,
		"VALORANT_ROUND_PHASE_RUNNING":     2,
		"VALORANT_ROUND_PHASE_OVER":        3,
	}
)

func (x ValorantRoundPhase) Enum() *ValorantRoundPhase {
	p := new(ValorantRoundPhase)
	*p = x
	return p
}

func (x ValorantRoundPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValorantRoundPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_valorant_proto_enumTypes[3].Descriptor()
}

func (ValorantRoundPhase) Type() protoreflect.EnumType {
	return &file_bragi_valorant_proto_enumTypes[3]
}

func (x ValorantRoundPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValorantRoundPhase.Descriptor instead.
func (ValorantRoundPhase) EnumDescriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{3}
}

type ValorantSpikeState int32

const (
	ValorantSpikeState_VALORANT_SPIKE_STATE_UNSPECIFIED ValorantSpikeState = 0
	ValorantSpikeState_VALORANT_SPIKE_STATE_CARRIED     ValorantSpikeState = 1
	ValorantSpikeState_VALORANT_SPIKE_STATE_DROPPED     ValorantSpikeState = 2
	ValorantSpikeState_VALORANT_SPIKE_STATE_PLANTING    ValorantSpikeState = 3
	ValorantSpikeState_VALORANT_SPIKE_STATE_DEFUSING    ValorantSpikeState = 4
	ValorantSpikeState_VALORANT_SPIKE_STATE_PLANTED     ValorantSpikeState = 5
	ValorantSpikeState_VALORANT_SPIKE_STATE_EXPLODED    ValorantSpikeState = 6
	ValorantSpikeState_VALORANT_SPIKE_STATE_DEFUSED     ValorantSpikeState = 7
)

// Enum value maps for ValorantSpikeState.
var (
	ValorantSpikeState_name = map[int32]string{
		0: "VALORANT_SPIKE_STATE_UNSPECIFIED",
		1: "VALORANT_SPIKE_STATE_CARRIED",
		2: "VALORANT_SPIKE_STATE_DROPPED",
		3: "VALORANT_SPIKE_STATE_PLANTING",
		4: "VALORANT_SPIKE_STATE_DEFUSING",
		5: "VALORANT_SPIKE_STATE_PLANTED",
		6: "VALORANT_SPIKE_STATE_EXPLODED",
		7: "VALORANT_SPIKE_STATE_DEFUSED",
	}
	ValorantSpikeState_value = map[string]int32{
		"VALORANT_SPIKE_STATE_UNSPECIFIED": 0,
		"VALORANT_SPIKE_STATE_CARRIED":     1,
		"VALORANT_SPIKE_STATE_DROPPED":     2,
		"VALORANT_SPIKE_STATE_PLANTING":    3,
		"VALORANT_SPIKE_STATE_DEFUSING":    4,
		"VALORANT_SPIKE_STATE_PLANTED":     5,
		"VALORANT_SPIKE_STATE_EXPLODED":    6,
		"VALORANT_SPIKE_STATE_DEFUSED":     7,
	}
)

func (x ValorantSpikeState) Enum() *ValorantSpikeState {
	p := new(ValorantSpikeState)
	*p = x
	return p
}

func (x ValorantSpikeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValorantSpikeState) Descriptor() protoreflect.EnumDescriptor {
	return file_bragi_valorant_proto_enumTypes[4].Descriptor()
}

func (ValorantSpikeState) Type() protoreflect.EnumType {
	return &file_bragi_valorant_proto_enumTypes[4]
}

func (x ValorantSpikeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValorantSpikeState.Descriptor instead.
func (ValorantSpikeState) EnumDescriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{4}
}

type ValorantMatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn   string                        `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence   uint64                        `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp  *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataStatus DataStatus                    `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	Payload    *ValorantMatchMessage_Payload `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ValorantMatchMessage) Reset() {
	*x = ValorantMatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchMessage) ProtoMessage() {}

func (x *ValorantMatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchMessage.ProtoReflect.Descriptor instead.
func (*ValorantMatchMessage) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{0}
}

func (x *ValorantMatchMessage) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *ValorantMatchMessage) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ValorantMatchMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ValorantMatchMessage) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *ValorantMatchMessage) GetPayload() *ValorantMatchMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ValorantMatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn      string                 `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	Sequence      uint64                 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DataStatus    DataStatus             `protobuf:"varint,4,opt,name=data_status,json=dataStatus,proto3,enum=bragi.DataStatus" json:"data_status,omitempty"`
	Announcements []*Announcement        `protobuf:"bytes,5,rep,name=announcements,proto3" json:"announcements,omitempty"`
	MatchState    *ValorantMatchState    `protobuf:"bytes,6,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
}

func (x *ValorantMatchSnapshot) Reset() {
	*x = ValorantMatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchSnapshot) ProtoMessage() {}

func (x *ValorantMatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchSnapshot.ProtoReflect.Descriptor instead.
func (*ValorantMatchSnapshot) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{1}
}

func (x *ValorantMatchSnapshot) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *ValorantMatchSnapshot) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ValorantMatchSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ValorantMatchSnapshot) GetDataStatus() DataStatus {
	if x != nil {
		return x.DataStatus
	}
	return DataStatus_DATA_STATUS_UNSPECIFIED
}

func (x *ValorantMatchSnapshot) GetAnnouncements() []*Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

func (x *ValorantMatchSnapshot) GetMatchState() *ValorantMatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

type ValorantMatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *ValorantMatchUpdate_Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ValorantMatchUpdate) Reset() {
	*x = ValorantMatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchUpdate) ProtoMessage() {}

func (x *ValorantMatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchUpdate.ProtoReflect.Descriptor instead.
func (*ValorantMatchUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{2}
}

func (x *ValorantMatchUpdate) GetPayload() *ValorantMatchUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ValorantMatchStatePartialUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*ValorantMatchStatePartialUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *ValorantMatchStatePartialUpdates) Reset() {
	*x = ValorantMatchStatePartialUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchStatePartialUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchStatePartialUpdates) ProtoMessage() {}

func (x *ValorantMatchStatePartialUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchStatePartialUpdates.ProtoReflect.Descriptor instead.
func (*ValorantMatchStatePartialUpdates) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{3}
}

func (x *ValorantMatchStatePartialUpdates) GetUpdates() []*ValorantMatchStatePartialUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type ValorantMatchStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*ValorantMatchStatePartialUpdate_Score
	//	*ValorantMatchStatePartialUpdate_CurrentMap
	//	*ValorantMatchStatePartialUpdate_CurrentMapPartialUpdate
	Update isValorantMatchStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *ValorantMatchStatePartialUpdate) Reset() {
	*x = ValorantMatchStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchStatePartialUpdate) ProtoMessage() {}

func (x *ValorantMatchStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*ValorantMatchStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{4}
}

func (m *ValorantMatchStatePartialUpdate) GetUpdate() isValorantMatchStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *ValorantMatchStatePartialUpdate) GetScore() *ValorantMatchScoreState {
	if x, ok := x.GetUpdate().(*ValorantMatchStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *ValorantMatchStatePartialUpdate) GetCurrentMap() *ValorantCurrentMapState {
	if x, ok := x.GetUpdate().(*ValorantMatchStatePartialUpdate_CurrentMap); ok {
		return x.CurrentMap
	}
	return nil
}

func (x *ValorantMatchStatePartialUpdate) GetCurrentMapPartialUpdate() *ValorantCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*ValorantMatchStatePartialUpdate_CurrentMapPartialUpdate); ok {
		return x.CurrentMapPartialUpdate
	}
	return nil
}

type isValorantMatchStatePartialUpdate_Update interface {
	isValorantMatchStatePartialUpdate_Update()
}

type ValorantMatchStatePartialUpdate_Score struct {
	// Replaces "score" property in ValorantMatchState.
	Score *ValorantMatchScoreState `protobuf:"bytes,1,opt,name=score,proto3,oneof"`
}

type ValorantMatchStatePartialUpdate_CurrentMap struct {
	// Replaces "current_map" property in ValorantMatchState. To minimalize issues with incorrect updates application
	// on current_map, server sends ValorantMatchStatePartialUpdate with ValorantMapState in periodic time set by customer.
	CurrentMap *ValorantCurrentMapState `protobuf:"bytes,2,opt,name=current_map,json=currentMap,proto3,oneof"`
}

type ValorantMatchStatePartialUpdate_CurrentMapPartialUpdate struct {
	// Apply partial update on "current_map" property in ValorantMatchState.
	CurrentMapPartialUpdate *ValorantCurrentMapStatePartialUpdate `protobuf:"bytes,3,opt,name=current_map_partial_update,json=currentMapPartialUpdate,proto3,oneof"`
}

func (*ValorantMatchStatePartialUpdate_Score) isValorantMatchStatePartialUpdate_Update() {}

func (*ValorantMatchStatePartialUpdate_CurrentMap) isValorantMatchStatePartialUpdate_Update() {}

func (*ValorantMatchStatePartialUpdate_CurrentMapPartialUpdate) isValorantMatchStatePartialUpdate_Update() {
}

type ValorantMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchUrn    string                   `protobuf:"bytes,1,opt,name=match_urn,json=matchUrn,proto3" json:"match_urn,omitempty"`
	MatchType   BestOfType               `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=bragi.BestOfType" json:"match_type,omitempty"`
	HomeTeam    *Team                    `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam    *Team                    `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Score       *ValorantMatchScoreState `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	MatchStatus MatchStatusType          `protobuf:"varint,6,opt,name=match_status,json=matchStatus,proto3,enum=bragi.MatchStatusType" json:"match_status,omitempty"`
	CurrentMap  *ValorantCurrentMapState `protobuf:"bytes,7,opt,name=current_map,json=currentMap,proto3" json:"current_map,omitempty"`
}

func (x *ValorantMatchState) Reset() {
	*x = ValorantMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchState) ProtoMessage() {}

func (x *ValorantMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchState.ProtoReflect.Descriptor instead.
func (*ValorantMatchState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{5}
}

func (x *ValorantMatchState) GetMatchUrn() string {
	if x != nil {
		return x.MatchUrn
	}
	return ""
}

func (x *ValorantMatchState) GetMatchType() BestOfType {
	if x != nil {
		return x.MatchType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *ValorantMatchState) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *ValorantMatchState) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *ValorantMatchState) GetScore() *ValorantMatchScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *ValorantMatchState) GetMatchStatus() MatchStatusType {
	if x != nil {
		return x.MatchStatus
	}
	return MatchStatusType_MATCH_STATUS_TYPE_UNSPECIFIED
}

func (x *ValorantMatchState) GetCurrentMap() *ValorantCurrentMapState {
	if x != nil {
		return x.CurrentMap
	}
	return nil
}

type ValorantMatchScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *ValorantMatchScoreState) Reset() {
	*x = ValorantMatchScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchScoreState) ProtoMessage() {}

func (x *ValorantMatchScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchScoreState.ProtoReflect.Descriptor instead.
func (*ValorantMatchScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{6}
}

func (x *ValorantMatchScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *ValorantMatchScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type ValorantCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*ValorantCurrentMapStatePartialUpdate_Score
	//	*ValorantCurrentMapStatePartialUpdate_CurrentRound
	//	*ValorantCurrentMapStatePartialUpdate_CurrentRoundPartialUpdate
	//	*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapState
	//	*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate
	//	*ValorantCurrentMapStatePartialUpdate_PreviousRounds
	Update isValorantCurrentMapStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *ValorantCurrentMapStatePartialUpdate) Reset() {
	*x = ValorantCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *ValorantCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*ValorantCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{7}
}

func (m *ValorantCurrentMapStatePartialUpdate) GetUpdate() isValorantCurrentMapStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *ValorantCurrentMapStatePartialUpdate) GetScore() *ValorantMapScoreState {
	if x, ok := x.GetUpdate().(*ValorantCurrentMapStatePartialUpdate_Score); ok {
		return x.Score
	}
	return nil
}

func (x *ValorantCurrentMapStatePartialUpdate) GetCurrentRound() *ValorantCurrentRoundState {
	if x, ok := x.GetUpdate().(*ValorantCurrentMapStatePartialUpdate_CurrentRound); ok {
		return x.CurrentRound
	}
	return nil
}

func (x *ValorantCurrentMapStatePartialUpdate) GetCurrentRoundPartialUpdate() *ValorantCurrentRoundStatePartialUpdate {
	if x, ok := x.GetUpdate().(*ValorantCurrentMapStatePartialUpdate_CurrentRoundPartialUpdate); ok {
		return x.CurrentRoundPartialUpdate
	}
	return nil
}

func (x *ValorantCurrentMapStatePartialUpdate) GetTeamCurrentMapState() *ValorantTeamCurrentMapState {
	if x, ok := x.GetUpdate().(*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapState); ok {
		return x.TeamCurrentMapState
	}
	return nil
}

func (x *ValorantCurrentMapStatePartialUpdate) GetTeamCurrentMapPartialUpdate() *ValorantTeamCurrentMapStatePartialUpdate {
	if x, ok := x.GetUpdate().(*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate); ok {
		return x.TeamCurrentMapPartialUpdate
	}
	return nil
}

func (x *ValorantCurrentMapStatePartialUpdate) GetPreviousRounds() *ValorantPreviousRoundsState {
	if x, ok := x.GetUpdate().(*ValorantCurrentMapStatePartialUpdate_PreviousRounds); ok {
		return x.PreviousRounds
	}
	return nil
}

type isValorantCurrentMapStatePartialUpdate_Update interface {
	isValorantCurrentMapStatePartialUpdate_Update()
}

type ValorantCurrentMapStatePartialUpdate_Score struct {
	// Replaces "score" property in ValorantCurrentMapState.
	Score *ValorantMapScoreState `protobuf:"bytes,1,opt,name=score,proto3,oneof"`
}

type ValorantCurrentMapStatePartialUpdate_CurrentRound struct {
	// Replaces "current_round" property in ValorantCurrentMapState.
	CurrentRound *ValorantCurrentRoundState `protobuf:"bytes,2,opt,name=current_round,json=currentRound,proto3,oneof"`
}

type ValorantCurrentMapStatePartialUpdate_CurrentRoundPartialUpdate struct {
	// Apply partial update on property "current_round" in ValorantCurrentMapState.
	CurrentRoundPartialUpdate *ValorantCurrentRoundStatePartialUpdate `protobuf:"bytes,3,opt,name=current_round_partial_update,json=currentRoundPartialUpdate,proto3,oneof"`
}

type ValorantCurrentMapStatePartialUpdate_TeamCurrentMapState struct {
	// Replaces whole value under given key in teams hash map property in ValorantCurrentMapState.
	TeamCurrentMapState *ValorantTeamCurrentMapState `protobuf:"bytes,4,opt,name=team_current_map_state,json=teamCurrentMapState,proto3,oneof"`
}

type ValorantCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate struct {
	// Apply partial update on value under given key in teams hash map property in ValorantCurrentMapState.
	TeamCurrentMapPartialUpdate *ValorantTeamCurrentMapStatePartialUpdate `protobuf:"bytes,5,opt,name=team_current_map_partial_update,json=teamCurrentMapPartialUpdate,proto3,oneof"`
}

type ValorantCurrentMapStatePartialUpdate_PreviousRounds struct {
	// Replaces "previous_rounds" property in ValorantCurrentMapState.
	PreviousRounds *ValorantPreviousRoundsState `protobuf:"bytes,6,opt,name=previous_rounds,json=previousRounds,proto3,oneof"`
}

func (*ValorantCurrentMapStatePartialUpdate_Score) isValorantCurrentMapStatePartialUpdate_Update() {}

func (*ValorantCurrentMapStatePartialUpdate_CurrentRound) isValorantCurrentMapStatePartialUpdate_Update() {
}

func (*ValorantCurrentMapStatePartialUpdate_CurrentRoundPartialUpdate) isValorantCurrentMapStatePartialUpdate_Update() {
}

func (*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapState) isValorantCurrentMapStatePartialUpdate_Update() {
}

func (*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) isValorantCurrentMapStatePartialUpdate_Update() {
}

func (*ValorantCurrentMapStatePartialUpdate_PreviousRounds) isValorantCurrentMapStatePartialUpdate_Update() {
}

type ValorantCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapOrder       uint32                                  `protobuf:"varint,1,opt,name=map_order,json=mapOrder,proto3" json:"map_order,omitempty"`
	MapPaused      bool                                    `protobuf:"varint,2,opt,name=map_paused,json=mapPaused,proto3" json:"map_paused,omitempty"`
	MapName        string                                  `protobuf:"bytes,3,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	WinTeamUrn     *string                                 `protobuf:"bytes,4,opt,name=win_team_urn,json=winTeamUrn,proto3,oneof" json:"win_team_urn,omitempty"`
	Score          *ValorantMapScoreState                  `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	CurrentRound   *ValorantCurrentRoundState              `protobuf:"bytes,6,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`
	Teams          map[string]*ValorantTeamCurrentMapState `protobuf:"bytes,7,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreviousRounds *ValorantPreviousRoundsState            `protobuf:"bytes,8,opt,name=previous_rounds,json=previousRounds,proto3" json:"previous_rounds,omitempty"`
}

func (x *ValorantCurrentMapState) Reset() {
	*x = ValorantCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantCurrentMapState) ProtoMessage() {}

func (x *ValorantCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantCurrentMapState.ProtoReflect.Descriptor instead.
func (*ValorantCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{8}
}

func (x *ValorantCurrentMapState) GetMapOrder() uint32 {
	if x != nil {
		return x.MapOrder
	}
	return 0
}

func (x *ValorantCurrentMapState) GetMapPaused() bool {
	if x != nil {
		return x.MapPaused
	}
	return false
}

func (x *ValorantCurrentMapState) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *ValorantCurrentMapState) GetWinTeamUrn() string {
	if x != nil && x.WinTeamUrn != nil {
		return *x.WinTeamUrn
	}
	return ""
}

func (x *ValorantCurrentMapState) GetScore() *ValorantMapScoreState {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *ValorantCurrentMapState) GetCurrentRound() *ValorantCurrentRoundState {
	if x != nil {
		return x.CurrentRound
	}
	return nil
}

func (x *ValorantCurrentMapState) GetTeams() map[string]*ValorantTeamCurrentMapState {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *ValorantCurrentMapState) GetPreviousRounds() *ValorantPreviousRoundsState {
	if x != nil {
		return x.PreviousRounds
	}
	return nil
}

type ValorantMapScoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeScore uint32 `protobuf:"varint,1,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	AwayScore uint32 `protobuf:"varint,2,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
}

func (x *ValorantMapScoreState) Reset() {
	*x = ValorantMapScoreState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMapScoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMapScoreState) ProtoMessage() {}

func (x *ValorantMapScoreState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMapScoreState.ProtoReflect.Descriptor instead.
func (*ValorantMapScoreState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{9}
}

func (x *ValorantMapScoreState) GetHomeScore() uint32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *ValorantMapScoreState) GetAwayScore() uint32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

type ValorantPreviousRoundsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds []*ValorantPreviousRound `protobuf:"bytes,1,rep,name=rounds,proto3" json:"rounds,omitempty"`
}

func (x *ValorantPreviousRoundsState) Reset() {
	*x = ValorantPreviousRoundsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPreviousRoundsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPreviousRoundsState) ProtoMessage() {}

func (x *ValorantPreviousRoundsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPreviousRoundsState.ProtoReflect.Descriptor instead.
func (*ValorantPreviousRoundsState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{10}
}

func (x *ValorantPreviousRoundsState) GetRounds() []*ValorantPreviousRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

type ValorantTeamCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                            `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Payload *ValorantTeamCurrentMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ValorantTeamCurrentMapStatePartialUpdate) Reset() {
	*x = ValorantTeamCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantTeamCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantTeamCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *ValorantTeamCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantTeamCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*ValorantTeamCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{11}
}

func (x *ValorantTeamCurrentMapStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *ValorantTeamCurrentMapStatePartialUpdate) GetPayload() *ValorantTeamCurrentMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ValorantTeamCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                    `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Side    ValorantSide                              `protobuf:"varint,2,opt,name=side,proto3,enum=bragi.ValorantSide" json:"side,omitempty"`
	Players map[string]*ValorantPlayerCurrentMapState `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValorantTeamCurrentMapState) Reset() {
	*x = ValorantTeamCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantTeamCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantTeamCurrentMapState) ProtoMessage() {}

func (x *ValorantTeamCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantTeamCurrentMapState.ProtoReflect.Descriptor instead.
func (*ValorantTeamCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{12}
}

func (x *ValorantTeamCurrentMapState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *ValorantTeamCurrentMapState) GetSide() ValorantSide {
	if x != nil {
		return x.Side
	}
	return ValorantSide_VALORANT_SIDE_UNSPECIFIED
}

func (x *ValorantTeamCurrentMapState) GetPlayers() map[string]*ValorantPlayerCurrentMapState {
	if x != nil {
		return x.Players
	}
	return nil
}

type ValorantPlayerCurrentMapStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string                                              `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Payload   *ValorantPlayerCurrentMapStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate) Reset() {
	*x = ValorantPlayerCurrentMapStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerCurrentMapStatePartialUpdate) ProtoMessage() {}

func (x *ValorantPlayerCurrentMapStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerCurrentMapStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*ValorantPlayerCurrentMapStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{13}
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate) GetPayload() *ValorantPlayerCurrentMapStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ValorantPlayerCurrentMapState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                                   `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	AgentUrn   string                                   `protobuf:"bytes,2,opt,name=agent_urn,json=agentUrn,proto3" json:"agent_urn,omitempty"`
	PlayerInfo *ValorantPlayerInfoState                 `protobuf:"bytes,3,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Abilities  *ValorantAbilitiesState                  `protobuf:"bytes,4,opt,name=abilities,proto3" json:"abilities,omitempty"`
	Statistics *ValorantPlayerCurrentMapStatisticsState `protobuf:"bytes,5,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *ValorantPlayerCurrentMapState) Reset() {
	*x = ValorantPlayerCurrentMapState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerCurrentMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerCurrentMapState) ProtoMessage() {}

func (x *ValorantPlayerCurrentMapState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerCurrentMapState.ProtoReflect.Descriptor instead.
func (*ValorantPlayerCurrentMapState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{14}
}

func (x *ValorantPlayerCurrentMapState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantPlayerCurrentMapState) GetAgentUrn() string {
	if x != nil {
		return x.AgentUrn
	}
	return ""
}

func (x *ValorantPlayerCurrentMapState) GetPlayerInfo() *ValorantPlayerInfoState {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *ValorantPlayerCurrentMapState) GetAbilities() *ValorantAbilitiesState {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *ValorantPlayerCurrentMapState) GetStatistics() *ValorantPlayerCurrentMapStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type ValorantPlayerCurrentMapStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Kills     uint32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths    uint32 `protobuf:"varint,3,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists   uint32 `protobuf:"varint,4,opt,name=assists,proto3" json:"assists,omitempty"`
}

func (x *ValorantPlayerCurrentMapStatisticsState) Reset() {
	*x = ValorantPlayerCurrentMapStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerCurrentMapStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerCurrentMapStatisticsState) ProtoMessage() {}

func (x *ValorantPlayerCurrentMapStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerCurrentMapStatisticsState.ProtoReflect.Descriptor instead.
func (*ValorantPlayerCurrentMapStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{15}
}

func (x *ValorantPlayerCurrentMapStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantPlayerCurrentMapStatisticsState) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *ValorantPlayerCurrentMapStatisticsState) GetDeaths() uint32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *ValorantPlayerCurrentMapStatisticsState) GetAssists() uint32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

type ValorantCurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*ValorantCurrentRoundStatePartialUpdate_RoundInfo
	//	*ValorantCurrentRoundStatePartialUpdate_Time
	//	*ValorantCurrentRoundStatePartialUpdate_Spike
	//	*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundState
	//	*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundPartialUpdate
	Update isValorantCurrentRoundStatePartialUpdate_Update `protobuf_oneof:"update"`
}

func (x *ValorantCurrentRoundStatePartialUpdate) Reset() {
	*x = ValorantCurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantCurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantCurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *ValorantCurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantCurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*ValorantCurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{16}
}

func (m *ValorantCurrentRoundStatePartialUpdate) GetUpdate() isValorantCurrentRoundStatePartialUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *ValorantCurrentRoundStatePartialUpdate) GetRoundInfo() *ValorantRoundInfoState {
	if x, ok := x.GetUpdate().(*ValorantCurrentRoundStatePartialUpdate_RoundInfo); ok {
		return x.RoundInfo
	}
	return nil
}

func (x *ValorantCurrentRoundStatePartialUpdate) GetTime() *ValorantCurrentRoundTimeState {
	if x, ok := x.GetUpdate().(*ValorantCurrentRoundStatePartialUpdate_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ValorantCurrentRoundStatePartialUpdate) GetSpike() *ValorantCurrentRoundTeamSpikeState {
	if x, ok := x.GetUpdate().(*ValorantCurrentRoundStatePartialUpdate_Spike); ok {
		return x.Spike
	}
	return nil
}

func (x *ValorantCurrentRoundStatePartialUpdate) GetTeamCurrentRoundState() *ValorantTeamCurrentRoundState {
	if x, ok := x.GetUpdate().(*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundState); ok {
		return x.TeamCurrentRoundState
	}
	return nil
}

func (x *ValorantCurrentRoundStatePartialUpdate) GetTeamCurrentRoundPartialUpdate() *ValorantTeamCurrentRoundStatePartialUpdate {
	if x, ok := x.GetUpdate().(*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundPartialUpdate); ok {
		return x.TeamCurrentRoundPartialUpdate
	}
	return nil
}

type isValorantCurrentRoundStatePartialUpdate_Update interface {
	isValorantCurrentRoundStatePartialUpdate_Update()
}

type ValorantCurrentRoundStatePartialUpdate_RoundInfo struct {
	// Replaces "round_info" property in ValorantCurrentRoundState.
	RoundInfo *ValorantRoundInfoState `protobuf:"bytes,1,opt,name=round_info,json=roundInfo,proto3,oneof"`
}

type ValorantCurrentRoundStatePartialUpdate_Time struct {
	// Replaces "time" property in ValorantCurrentRoundState.
	Time *ValorantCurrentRoundTimeState `protobuf:"bytes,2,opt,name=time,proto3,oneof"`
}

type ValorantCurrentRoundStatePartialUpdate_Spike struct {
	// Replaces "spike" property in ValorantCurrentRoundState.
	Spike *ValorantCurrentRoundTeamSpikeState `protobuf:"bytes,3,opt,name=spike,proto3,oneof"`
}

type ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundState struct {
	// Replaces whole value under given key in teams hash map property in ValorantCurrentRoundState.
	TeamCurrentRoundState *ValorantTeamCurrentRoundState `protobuf:"bytes,4,opt,name=team_current_round_state,json=teamCurrentRoundState,proto3,oneof"`
}

type ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundPartialUpdate struct {
	// Apply partial update on value under given key in teams hash map property in ValorantCurrentRoundState.
	TeamCurrentRoundPartialUpdate *ValorantTeamCurrentRoundStatePartialUpdate `protobuf:"bytes,5,opt,name=team_current_round_partial_update,json=teamCurrentRoundPartialUpdate,proto3,oneof"`
}

func (*ValorantCurrentRoundStatePartialUpdate_RoundInfo) isValorantCurrentRoundStatePartialUpdate_Update() {
}

func (*ValorantCurrentRoundStatePartialUpdate_Time) isValorantCurrentRoundStatePartialUpdate_Update() {
}

func (*ValorantCurrentRoundStatePartialUpdate_Spike) isValorantCurrentRoundStatePartialUpdate_Update() {
}

func (*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundState) isValorantCurrentRoundStatePartialUpdate_Update() {
}

func (*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundPartialUpdate) isValorantCurrentRoundStatePartialUpdate_Update() {
}

type ValorantCurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundInfo *ValorantRoundInfoState                   `protobuf:"bytes,1,opt,name=round_info,json=roundInfo,proto3" json:"round_info,omitempty"`
	Time      *ValorantCurrentRoundTimeState            `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Spike     *ValorantCurrentRoundTeamSpikeState       `protobuf:"bytes,3,opt,name=spike,proto3" json:"spike,omitempty"`
	Teams     map[string]*ValorantTeamCurrentRoundState `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValorantCurrentRoundState) Reset() {
	*x = ValorantCurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantCurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantCurrentRoundState) ProtoMessage() {}

func (x *ValorantCurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantCurrentRoundState.ProtoReflect.Descriptor instead.
func (*ValorantCurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{17}
}

func (x *ValorantCurrentRoundState) GetRoundInfo() *ValorantRoundInfoState {
	if x != nil {
		return x.RoundInfo
	}
	return nil
}

func (x *ValorantCurrentRoundState) GetTime() *ValorantCurrentRoundTimeState {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ValorantCurrentRoundState) GetSpike() *ValorantCurrentRoundTeamSpikeState {
	if x != nil {
		return x.Spike
	}
	return nil
}

func (x *ValorantCurrentRoundState) GetTeams() map[string]*ValorantTeamCurrentRoundState {
	if x != nil {
		return x.Teams
	}
	return nil
}

type ValorantRoundInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32             `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Phase  ValorantRoundPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=bragi.ValorantRoundPhase" json:"phase,omitempty"`
}

func (x *ValorantRoundInfoState) Reset() {
	*x = ValorantRoundInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantRoundInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantRoundInfoState) ProtoMessage() {}

func (x *ValorantRoundInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantRoundInfoState.ProtoReflect.Descriptor instead.
func (*ValorantRoundInfoState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{18}
}

func (x *ValorantRoundInfoState) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ValorantRoundInfoState) GetPhase() ValorantRoundPhase {
	if x != nil {
		return x.Phase
	}
	return ValorantRoundPhase_VALORANT_ROUND_PHASE_UNSPECIFIED
}

type ValorantCurrentRoundTimeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRemaining *durationpb.Duration `protobuf:"bytes,1,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
}

func (x *ValorantCurrentRoundTimeState) Reset() {
	*x = ValorantCurrentRoundTimeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantCurrentRoundTimeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantCurrentRoundTimeState) ProtoMessage() {}

func (x *ValorantCurrentRoundTimeState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantCurrentRoundTimeState.ProtoReflect.Descriptor instead.
func (*ValorantCurrentRoundTimeState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{19}
}

func (x *ValorantCurrentRoundTimeState) GetTimeRemaining() *durationpb.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

type ValorantCurrentRoundTeamSpikeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State         ValorantSpikeState   `protobuf:"varint,1,opt,name=state,proto3,enum=bragi.ValorantSpikeState" json:"state,omitempty"`
	TimeToDefused *durationpb.Duration `protobuf:"bytes,2,opt,name=time_to_defused,json=timeToDefused,proto3" json:"time_to_defused,omitempty"`
}

func (x *ValorantCurrentRoundTeamSpikeState) Reset() {
	*x = ValorantCurrentRoundTeamSpikeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantCurrentRoundTeamSpikeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantCurrentRoundTeamSpikeState) ProtoMessage() {}

func (x *ValorantCurrentRoundTeamSpikeState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantCurrentRoundTeamSpikeState.ProtoReflect.Descriptor instead.
func (*ValorantCurrentRoundTeamSpikeState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{20}
}

func (x *ValorantCurrentRoundTeamSpikeState) GetState() ValorantSpikeState {
	if x != nil {
		return x.State
	}
	return ValorantSpikeState_VALORANT_SPIKE_STATE_UNSPECIFIED
}

func (x *ValorantCurrentRoundTeamSpikeState) GetTimeToDefused() *durationpb.Duration {
	if x != nil {
		return x.TimeToDefused
	}
	return nil
}

type ValorantTeamCurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                              `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Payload *ValorantTeamCurrentRoundStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ValorantTeamCurrentRoundStatePartialUpdate) Reset() {
	*x = ValorantTeamCurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantTeamCurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantTeamCurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *ValorantTeamCurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantTeamCurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*ValorantTeamCurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{21}
}

func (x *ValorantTeamCurrentRoundStatePartialUpdate) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *ValorantTeamCurrentRoundStatePartialUpdate) GetPayload() *ValorantTeamCurrentRoundStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ValorantTeamCurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUrn string                                      `protobuf:"bytes,1,opt,name=team_urn,json=teamUrn,proto3" json:"team_urn,omitempty"`
	Side    ValorantSide                                `protobuf:"varint,2,opt,name=side,proto3,enum=bragi.ValorantSide" json:"side,omitempty"`
	Players map[string]*ValorantPlayerCurrentRoundState `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValorantTeamCurrentRoundState) Reset() {
	*x = ValorantTeamCurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantTeamCurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantTeamCurrentRoundState) ProtoMessage() {}

func (x *ValorantTeamCurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantTeamCurrentRoundState.ProtoReflect.Descriptor instead.
func (*ValorantTeamCurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{22}
}

func (x *ValorantTeamCurrentRoundState) GetTeamUrn() string {
	if x != nil {
		return x.TeamUrn
	}
	return ""
}

func (x *ValorantTeamCurrentRoundState) GetSide() ValorantSide {
	if x != nil {
		return x.Side
	}
	return ValorantSide_VALORANT_SIDE_UNSPECIFIED
}

func (x *ValorantTeamCurrentRoundState) GetPlayers() map[string]*ValorantPlayerCurrentRoundState {
	if x != nil {
		return x.Players
	}
	return nil
}

type ValorantPlayerCurrentRoundStatePartialUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string                                                `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Payload   *ValorantPlayerCurrentRoundStatePartialUpdate_Payload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate) Reset() {
	*x = ValorantPlayerCurrentRoundStatePartialUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerCurrentRoundStatePartialUpdate) ProtoMessage() {}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerCurrentRoundStatePartialUpdate.ProtoReflect.Descriptor instead.
func (*ValorantPlayerCurrentRoundStatePartialUpdate) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{23}
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate) GetPayload() *ValorantPlayerCurrentRoundStatePartialUpdate_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ValorantPlayerCurrentRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn  string                                     `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	PlayerInfo *ValorantPlayerInfoState                   `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
	Statistics *ValorantPlayerCurrentRoundStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Weapons    *ValorantWeaponsState                      `protobuf:"bytes,4,opt,name=weapons,proto3" json:"weapons,omitempty"`
	Position   *ValorantPositionState                     `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *ValorantPlayerCurrentRoundState) Reset() {
	*x = ValorantPlayerCurrentRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerCurrentRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerCurrentRoundState) ProtoMessage() {}

func (x *ValorantPlayerCurrentRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerCurrentRoundState.ProtoReflect.Descriptor instead.
func (*ValorantPlayerCurrentRoundState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{24}
}

func (x *ValorantPlayerCurrentRoundState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantPlayerCurrentRoundState) GetPlayerInfo() *ValorantPlayerInfoState {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *ValorantPlayerCurrentRoundState) GetStatistics() *ValorantPlayerCurrentRoundStatisticsState {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ValorantPlayerCurrentRoundState) GetWeapons() *ValorantWeaponsState {
	if x != nil {
		return x.Weapons
	}
	return nil
}

func (x *ValorantPlayerCurrentRoundState) GetPosition() *ValorantPositionState {
	if x != nil {
		return x.Position
	}
	return nil
}

type ValorantPlayerCurrentRoundStatisticsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	IsAlive   bool   `protobuf:"varint,2,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
}

func (x *ValorantPlayerCurrentRoundStatisticsState) Reset() {
	*x = ValorantPlayerCurrentRoundStatisticsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerCurrentRoundStatisticsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerCurrentRoundStatisticsState) ProtoMessage() {}

func (x *ValorantPlayerCurrentRoundStatisticsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerCurrentRoundStatisticsState.ProtoReflect.Descriptor instead.
func (*ValorantPlayerCurrentRoundStatisticsState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{25}
}

func (x *ValorantPlayerCurrentRoundStatisticsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantPlayerCurrentRoundStatisticsState) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

type ValorantAbilitiesState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string             `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Abilities []*ValorantAbility `protobuf:"bytes,2,rep,name=abilities,proto3" json:"abilities,omitempty"`
}

func (x *ValorantAbilitiesState) Reset() {
	*x = ValorantAbilitiesState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantAbilitiesState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantAbilitiesState) ProtoMessage() {}

func (x *ValorantAbilitiesState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantAbilitiesState.ProtoReflect.Descriptor instead.
func (*ValorantAbilitiesState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{26}
}

func (x *ValorantAbilitiesState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantAbilitiesState) GetAbilities() []*ValorantAbility {
	if x != nil {
		return x.Abilities
	}
	return nil
}

type ValorantWeaponsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string            `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	Weapons   []*ValorantWeapon `protobuf:"bytes,2,rep,name=weapons,proto3" json:"weapons,omitempty"`
}

func (x *ValorantWeaponsState) Reset() {
	*x = ValorantWeaponsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantWeaponsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantWeaponsState) ProtoMessage() {}

func (x *ValorantWeaponsState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantWeaponsState.ProtoReflect.Descriptor instead.
func (*ValorantWeaponsState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{27}
}

func (x *ValorantWeaponsState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantWeaponsState) GetWeapons() []*ValorantWeapon {
	if x != nil {
		return x.Weapons
	}
	return nil
}

type ValorantPlayerInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	SlotId    uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	ExtName   string `protobuf:"bytes,3,opt,name=ext_name,json=extName,proto3" json:"ext_name,omitempty"`
}

func (x *ValorantPlayerInfoState) Reset() {
	*x = ValorantPlayerInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerInfoState) ProtoMessage() {}

func (x *ValorantPlayerInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerInfoState.ProtoReflect.Descriptor instead.
func (*ValorantPlayerInfoState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{28}
}

func (x *ValorantPlayerInfoState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantPlayerInfoState) GetSlotId() uint32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *ValorantPlayerInfoState) GetExtName() string {
	if x != nil {
		return x.ExtName
	}
	return ""
}

type ValorantPositionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrn string  `protobuf:"bytes,1,opt,name=player_urn,json=playerUrn,proto3" json:"player_urn,omitempty"`
	X         float32 `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"`
	Y         float32 `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *ValorantPositionState) Reset() {
	*x = ValorantPositionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPositionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPositionState) ProtoMessage() {}

func (x *ValorantPositionState) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPositionState.ProtoReflect.Descriptor instead.
func (*ValorantPositionState) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{29}
}

func (x *ValorantPositionState) GetPlayerUrn() string {
	if x != nil {
		return x.PlayerUrn
	}
	return ""
}

func (x *ValorantPositionState) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ValorantPositionState) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ValorantPreviousRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number  uint32               `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Outcome ValorantRoundOutcome `protobuf:"varint,2,opt,name=outcome,proto3,enum=bragi.ValorantRoundOutcome" json:"outcome,omitempty"`
	HomeWon bool                 `protobuf:"varint,3,opt,name=home_won,json=homeWon,proto3" json:"home_won,omitempty"`
}

func (x *ValorantPreviousRound) Reset() {
	*x = ValorantPreviousRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPreviousRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPreviousRound) ProtoMessage() {}

func (x *ValorantPreviousRound) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPreviousRound.ProtoReflect.Descriptor instead.
func (*ValorantPreviousRound) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{30}
}

func (x *ValorantPreviousRound) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ValorantPreviousRound) GetOutcome() ValorantRoundOutcome {
	if x != nil {
		return x.Outcome
	}
	return ValorantRoundOutcome_VALORANT_ROUND_OUTCOME_UNSPECIFIED
}

func (x *ValorantPreviousRound) GetHomeWon() bool {
	if x != nil {
		return x.HomeWon
	}
	return false
}

type ValorantWeapon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ValorantWeapon) Reset() {
	*x = ValorantWeapon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantWeapon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantWeapon) ProtoMessage() {}

func (x *ValorantWeapon) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantWeapon.ProtoReflect.Descriptor instead.
func (*ValorantWeapon) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{31}
}

func (x *ValorantWeapon) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ValorantAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ready      bool   `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
	IsUltimate bool   `protobuf:"varint,3,opt,name=is_ultimate,json=isUltimate,proto3" json:"is_ultimate,omitempty"`
}

func (x *ValorantAbility) Reset() {
	*x = ValorantAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantAbility) ProtoMessage() {}

func (x *ValorantAbility) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantAbility.ProtoReflect.Descriptor instead.
func (*ValorantAbility) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{32}
}

func (x *ValorantAbility) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ValorantAbility) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ValorantAbility) GetIsUltimate() bool {
	if x != nil {
		return x.IsUltimate
	}
	return false
}

type ValorantMatchMessage_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ValorantMatchMessage_Payload_Snapshot
	//	*ValorantMatchMessage_Payload_Update
	Payload isValorantMatchMessage_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *ValorantMatchMessage_Payload) Reset() {
	*x = ValorantMatchMessage_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchMessage_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchMessage_Payload) ProtoMessage() {}

func (x *ValorantMatchMessage_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchMessage_Payload.ProtoReflect.Descriptor instead.
func (*ValorantMatchMessage_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ValorantMatchMessage_Payload) GetPayload() isValorantMatchMessage_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ValorantMatchMessage_Payload) GetSnapshot() *ValorantMatchSnapshot {
	if x, ok := x.GetPayload().(*ValorantMatchMessage_Payload_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *ValorantMatchMessage_Payload) GetUpdate() *ValorantMatchUpdate {
	if x, ok := x.GetPayload().(*ValorantMatchMessage_Payload_Update); ok {
		return x.Update
	}
	return nil
}

type isValorantMatchMessage_Payload_Payload interface {
	isValorantMatchMessage_Payload_Payload()
}

type ValorantMatchMessage_Payload_Snapshot struct {
	// Initial snapshot
	Snapshot *ValorantMatchSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type ValorantMatchMessage_Payload_Update struct {
	// Particular updates which are applied on property match_state in MatchState.
	Update *ValorantMatchUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

func (*ValorantMatchMessage_Payload_Snapshot) isValorantMatchMessage_Payload_Payload() {}

func (*ValorantMatchMessage_Payload_Update) isValorantMatchMessage_Payload_Payload() {}

type ValorantMatchUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ValorantMatchUpdate_Payload_MatchState
	//	*ValorantMatchUpdate_Payload_PartialUpdates
	Payload isValorantMatchUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *ValorantMatchUpdate_Payload) Reset() {
	*x = ValorantMatchUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantMatchUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantMatchUpdate_Payload) ProtoMessage() {}

func (x *ValorantMatchUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantMatchUpdate_Payload.ProtoReflect.Descriptor instead.
func (*ValorantMatchUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{2, 0}
}

func (m *ValorantMatchUpdate_Payload) GetPayload() isValorantMatchUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ValorantMatchUpdate_Payload) GetMatchState() *ValorantMatchState {
	if x, ok := x.GetPayload().(*ValorantMatchUpdate_Payload_MatchState); ok {
		return x.MatchState
	}
	return nil
}

func (x *ValorantMatchUpdate_Payload) GetPartialUpdates() *ValorantMatchStatePartialUpdates {
	if x, ok := x.GetPayload().(*ValorantMatchUpdate_Payload_PartialUpdates); ok {
		return x.PartialUpdates
	}
	return nil
}

type isValorantMatchUpdate_Payload_Payload interface {
	isValorantMatchUpdate_Payload_Payload()
}

type ValorantMatchUpdate_Payload_MatchState struct {
	MatchState *ValorantMatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3,oneof"`
}

type ValorantMatchUpdate_Payload_PartialUpdates struct {
	PartialUpdates *ValorantMatchStatePartialUpdates `protobuf:"bytes,2,opt,name=partial_updates,json=partialUpdates,proto3,oneof"`
}

func (*ValorantMatchUpdate_Payload_MatchState) isValorantMatchUpdate_Payload_Payload() {}

func (*ValorantMatchUpdate_Payload_PartialUpdates) isValorantMatchUpdate_Payload_Payload() {}

type ValorantTeamCurrentMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState
	//	*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate
	Payload isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *ValorantTeamCurrentMapStatePartialUpdate_Payload) Reset() {
	*x = ValorantTeamCurrentMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantTeamCurrentMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantTeamCurrentMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *ValorantTeamCurrentMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantTeamCurrentMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*ValorantTeamCurrentMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{11, 0}
}

func (m *ValorantTeamCurrentMapStatePartialUpdate_Payload) GetPayload() isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ValorantTeamCurrentMapStatePartialUpdate_Payload) GetPlayerCurrentMapState() *ValorantPlayerCurrentMapState {
	if x, ok := x.GetPayload().(*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState); ok {
		return x.PlayerCurrentMapState
	}
	return nil
}

func (x *ValorantTeamCurrentMapStatePartialUpdate_Payload) GetPlayerCurrentMapPartialUpdate() *ValorantPlayerCurrentMapStatePartialUpdate {
	if x, ok := x.GetPayload().(*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate); ok {
		return x.PlayerCurrentMapPartialUpdate
	}
	return nil
}

type isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload interface {
	isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload()
}

type ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState struct {
	// Replaces whole value under given key in players hash map property in ValorantTeamCurrentMapState.
	PlayerCurrentMapState *ValorantPlayerCurrentMapState `protobuf:"bytes,1,opt,name=player_current_map_state,json=playerCurrentMapState,proto3,oneof"`
}

type ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate struct {
	// Apply partial update on value under given key in players hash map property in ValorantTeamCurrentMapState.
	PlayerCurrentMapPartialUpdate *ValorantPlayerCurrentMapStatePartialUpdate `protobuf:"bytes,2,opt,name=player_current_map_partial_update,json=playerCurrentMapPartialUpdate,proto3,oneof"`
}

func (*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState) isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate) isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload() {
}

type ValorantPlayerCurrentMapStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ValorantPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo
	//	*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Abilities
	//	*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Statistics
	Payload isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate_Payload) Reset() {
	*x = ValorantPlayerCurrentMapStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerCurrentMapStatePartialUpdate_Payload) ProtoMessage() {}

func (x *ValorantPlayerCurrentMapStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerCurrentMapStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*ValorantPlayerCurrentMapStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{13, 0}
}

func (m *ValorantPlayerCurrentMapStatePartialUpdate_Payload) GetPayload() isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate_Payload) GetPlayerInfo() *ValorantPlayerInfoState {
	if x, ok := x.GetPayload().(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo); ok {
		return x.PlayerInfo
	}
	return nil
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate_Payload) GetAbilities() *ValorantAbilitiesState {
	if x, ok := x.GetPayload().(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Abilities); ok {
		return x.Abilities
	}
	return nil
}

func (x *ValorantPlayerCurrentMapStatePartialUpdate_Payload) GetStatistics() *ValorantPlayerCurrentMapStatisticsState {
	if x, ok := x.GetPayload().(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

type isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload interface {
	isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload()
}

type ValorantPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo struct {
	// Replaces "player_info" property in ValorantPlayerCurrentMapState.
	PlayerInfo *ValorantPlayerInfoState `protobuf:"bytes,1,opt,name=player_info,json=playerInfo,proto3,oneof"`
}

type ValorantPlayerCurrentMapStatePartialUpdate_Payload_Abilities struct {
	// Replaces "abilities" property in ValorantPlayerCurrentMapState.
	Abilities *ValorantAbilitiesState `protobuf:"bytes,2,opt,name=abilities,proto3,oneof"`
}

type ValorantPlayerCurrentMapStatePartialUpdate_Payload_Statistics struct {
	// Replaces "statistics" property in ValorantPlayerCurrentMapState.
	Statistics *ValorantPlayerCurrentMapStatisticsState `protobuf:"bytes,3,opt,name=statistics,proto3,oneof"`
}

func (*ValorantPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo) isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Abilities) isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

func (*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Statistics) isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload() {
}

type ValorantTeamCurrentRoundStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundState
	//	*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundPartialUpdate
	Payload isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *ValorantTeamCurrentRoundStatePartialUpdate_Payload) Reset() {
	*x = ValorantTeamCurrentRoundStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantTeamCurrentRoundStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantTeamCurrentRoundStatePartialUpdate_Payload) ProtoMessage() {}

func (x *ValorantTeamCurrentRoundStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantTeamCurrentRoundStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*ValorantTeamCurrentRoundStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{21, 0}
}

func (m *ValorantTeamCurrentRoundStatePartialUpdate_Payload) GetPayload() isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ValorantTeamCurrentRoundStatePartialUpdate_Payload) GetPlayerCurrentRoundState() *ValorantPlayerCurrentRoundState {
	if x, ok := x.GetPayload().(*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundState); ok {
		return x.PlayerCurrentRoundState
	}
	return nil
}

func (x *ValorantTeamCurrentRoundStatePartialUpdate_Payload) GetPlayerCurrentRoundPartialUpdate() *ValorantPlayerCurrentRoundStatePartialUpdate {
	if x, ok := x.GetPayload().(*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundPartialUpdate); ok {
		return x.PlayerCurrentRoundPartialUpdate
	}
	return nil
}

type isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload interface {
	isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload()
}

type ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundState struct {
	// Replaces whole value under given key in players hash map property in ValorantTeamCurrentRoundState.
	PlayerCurrentRoundState *ValorantPlayerCurrentRoundState `protobuf:"bytes,3,opt,name=player_current_round_state,json=playerCurrentRoundState,proto3,oneof"`
}

type ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundPartialUpdate struct {
	// Apply partial update on value under given key in players hash map property in ValorantTeamCurrentRoundState.
	PlayerCurrentRoundPartialUpdate *ValorantPlayerCurrentRoundStatePartialUpdate `protobuf:"bytes,2,opt,name=player_current_round_partial_update,json=playerCurrentRoundPartialUpdate,proto3,oneof"`
}

func (*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundState) isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundPartialUpdate) isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload() {
}

type ValorantPlayerCurrentRoundStatePartialUpdate_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_PlayerInfo
	//	*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Statistics
	//	*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Weapons
	//	*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Position
	Payload isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload `protobuf_oneof:"payload"`
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) Reset() {
	*x = ValorantPlayerCurrentRoundStatePartialUpdate_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bragi_valorant_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValorantPlayerCurrentRoundStatePartialUpdate_Payload) ProtoMessage() {}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bragi_valorant_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValorantPlayerCurrentRoundStatePartialUpdate_Payload.ProtoReflect.Descriptor instead.
func (*ValorantPlayerCurrentRoundStatePartialUpdate_Payload) Descriptor() ([]byte, []int) {
	return file_bragi_valorant_proto_rawDescGZIP(), []int{23, 0}
}

func (m *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) GetPayload() isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) GetPlayerInfo() *ValorantPlayerInfoState {
	if x, ok := x.GetPayload().(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_PlayerInfo); ok {
		return x.PlayerInfo
	}
	return nil
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) GetStatistics() *ValorantPlayerCurrentRoundStatisticsState {
	if x, ok := x.GetPayload().(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) GetWeapons() *ValorantWeaponsState {
	if x, ok := x.GetPayload().(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Weapons); ok {
		return x.Weapons
	}
	return nil
}

func (x *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) GetPosition() *ValorantPositionState {
	if x, ok := x.GetPayload().(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Position); ok {
		return x.Position
	}
	return nil
}

type isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload interface {
	isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload()
}

type ValorantPlayerCurrentRoundStatePartialUpdate_Payload_PlayerInfo struct {
	// Replaces "player_info" property in ValorantPlayerCurrentRoundState.
	PlayerInfo *ValorantPlayerInfoState `protobuf:"bytes,1,opt,name=player_info,json=playerInfo,proto3,oneof"`
}

type ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Statistics struct {
	// Replaces "statistics" property in ValorantPlayerCurrentRoundState.
	Statistics *ValorantPlayerCurrentRoundStatisticsState `protobuf:"bytes,2,opt,name=statistics,proto3,oneof"`
}

type ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Weapons struct {
	// Replaces "weapons" property in ValorantPlayerCurrentRoundState.
	Weapons *ValorantWeaponsState `protobuf:"bytes,3,opt,name=weapons,proto3,oneof"`
}

type ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Position struct {
	// Replaces "position" property in ValorantPlayerCurrentRoundState.
	Position *ValorantPositionState `protobuf:"bytes,4,opt,name=position,proto3,oneof"`
}

func (*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_PlayerInfo) isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Statistics) isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Weapons) isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

func (*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Position) isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload() {
}

var File_bragi_valorant_proto protoreflect.FileDescriptor

var file_bragi_valorant_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x76, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62, 0x72, 0x61, 0x67, 0x69, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x85, 0x03, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x86, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3a, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x15, 0x56,
	0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xa6, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x64, 0x0a, 0x20, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56,
	0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x6a, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xe9, 0x02, 0x0a,
	0x12, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6e,
	0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x42, 0x65, 0x73,
	0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x09,
	0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77,
	0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x57, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xc4, 0x04, 0x0a, 0x24, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x47, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x70, 0x0a, 0x1c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x77, 0x0a, 0x1f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x1b, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x4d, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x8f, 0x04, 0x0a, 0x17, 0x56, 0x61, 0x6c,
	0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x77,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3f, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x4b,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x5c, 0x0a, 0x0a, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69,
	0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x22, 0x55, 0x0a, 0x15, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x53, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x28, 0x56, 0x61, 0x6c, 0x6f, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x51,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0xf4, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5f, 0x0a,
	0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7d,
	0x0a, 0x21, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x1b, 0x56, 0x61, 0x6c,
	0x6f, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x60, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x03, 0x0a, 0x2a, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x53, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xe8, 0x01, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x55, 0x72, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x27, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x6f, 0x72,
	0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x05, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x69,
	0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x12, 0x5f, 0x0a, 0x18, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x15, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x7d, 0x0a, 0x21, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x1d, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x19, 0x56,
	0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c,
	0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x70, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x1a, 0x5e, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x6f, 0x72,
	0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x22, 0x56,
	0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e,
	0x74, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x44, 0x65,
	0x66, 0x75, 0x73, 0x65, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x2a, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12,
	0x53, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x81, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x65, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c,
	0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x23, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x1d, 0x56, 0x61, 0x6c,
	0x6f, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x4b,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x62, 0x0a, 0x0c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc7, 0x03, 0x0a, 0x2c, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12,
	0x55, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xa0, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c,
	0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x1f, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x3f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x35, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e,
	0x74, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x65, 0x0a, 0x29, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x6d, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x6f, 0x72,
	0x61, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e,
	0x12, 0x34, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x2f, 0x0a,
	0x07, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x52, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x22, 0x6c,
	0x0a, 0x17, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x15,
	0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x72, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x22, 0x81, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x6f, 0x6d,
	0x65, 0x57, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61,
	0x6e, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x2a, 0x8b, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x55, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x56, 0x41,
	0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54,
	0x5f, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x41, 0x4c, 0x4f, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x2a, 0x67,
	0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x41,
	0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x45, 0x52, 0x53, 0x10, 0x02, 0x2a, 0xbf, 0x02, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x6f,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x22, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x56, 0x41, 0x4c, 0x4f,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f,
	0x4d, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x57, 0x49, 0x4e,
	0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x30,
	0x0a, 0x2c, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x53, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02,
	0x12, 0x2f, 0x0a, 0x2b, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x53, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10,
	0x03, 0x12, 0x34, 0x0a, 0x30, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x45, 0x52, 0x53, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x56, 0x41, 0x4c, 0x4f, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x53, 0x5f, 0x57, 0x49, 0x4e, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x2a, 0x9f, 0x01, 0x0a, 0x12, 0x56, 0x61,
	0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41,
	0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x42,
	0x55, 0x59, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x41,
	0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xab, 0x02, 0x0a, 0x12,
	0x56, 0x61, 0x6c, 0x6f, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53,
	0x50, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x41, 0x4c, 0x4f,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x41,
	0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4b, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x21, 0x0a, 0x1d, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4b,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x55, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53,
	0x50, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x41, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x54,
	0x5f, 0x53, 0x50, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x41, 0x4c, 0x4f, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x07, 0x42, 0x21, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x2e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x5a, 0x0e, 0x6f, 0x64,
	0x64, 0x69, 0x6e, 0x2e, 0x67, 0x67, 0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bragi_valorant_proto_rawDescOnce sync.Once
	file_bragi_valorant_proto_rawDescData = file_bragi_valorant_proto_rawDesc
)

func file_bragi_valorant_proto_rawDescGZIP() []byte {
	file_bragi_valorant_proto_rawDescOnce.Do(func() {
		file_bragi_valorant_proto_rawDescData = protoimpl.X.CompressGZIP(file_bragi_valorant_proto_rawDescData)
	})
	return file_bragi_valorant_proto_rawDescData
}

var file_bragi_valorant_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bragi_valorant_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_bragi_valorant_proto_goTypes = []interface{}{
	(ValorantUltimateState)(0),                               // 0: bragi.ValorantUltimateState
	(ValorantSide)(0),                                        // 1: bragi.ValorantSide
	(ValorantRoundOutcome)(0),                                // 2: bragi.ValorantRoundOutcome
	(ValorantRoundPhase)(0),                                  // 3: bragi.ValorantRoundPhase
	(ValorantSpikeState)(0),                                  // 4: bragi.ValorantSpikeState
	(*ValorantMatchMessage)(nil),                             // 5: bragi.ValorantMatchMessage
	(*ValorantMatchSnapshot)(nil),                            // 6: bragi.ValorantMatchSnapshot
	(*ValorantMatchUpdate)(nil),                              // 7: bragi.ValorantMatchUpdate
	(*ValorantMatchStatePartialUpdates)(nil),                 // 8: bragi.ValorantMatchStatePartialUpdates
	(*ValorantMatchStatePartialUpdate)(nil),                  // 9: bragi.ValorantMatchStatePartialUpdate
	(*ValorantMatchState)(nil),                               // 10: bragi.ValorantMatchState
	(*ValorantMatchScoreState)(nil),                          // 11: bragi.ValorantMatchScoreState
	(*ValorantCurrentMapStatePartialUpdate)(nil),             // 12: bragi.ValorantCurrentMapStatePartialUpdate
	(*ValorantCurrentMapState)(nil),                          // 13: bragi.ValorantCurrentMapState
	(*ValorantMapScoreState)(nil),                            // 14: bragi.ValorantMapScoreState
	(*ValorantPreviousRoundsState)(nil),                      // 15: bragi.ValorantPreviousRoundsState
	(*ValorantTeamCurrentMapStatePartialUpdate)(nil),         // 16: bragi.ValorantTeamCurrentMapStatePartialUpdate
	(*ValorantTeamCurrentMapState)(nil),                      // 17: bragi.ValorantTeamCurrentMapState
	(*ValorantPlayerCurrentMapStatePartialUpdate)(nil),       // 18: bragi.ValorantPlayerCurrentMapStatePartialUpdate
	(*ValorantPlayerCurrentMapState)(nil),                    // 19: bragi.ValorantPlayerCurrentMapState
	(*ValorantPlayerCurrentMapStatisticsState)(nil),          // 20: bragi.ValorantPlayerCurrentMapStatisticsState
	(*ValorantCurrentRoundStatePartialUpdate)(nil),           // 21: bragi.ValorantCurrentRoundStatePartialUpdate
	(*ValorantCurrentRoundState)(nil),                        // 22: bragi.ValorantCurrentRoundState
	(*ValorantRoundInfoState)(nil),                           // 23: bragi.ValorantRoundInfoState
	(*ValorantCurrentRoundTimeState)(nil),                    // 24: bragi.ValorantCurrentRoundTimeState
	(*ValorantCurrentRoundTeamSpikeState)(nil),               // 25: bragi.ValorantCurrentRoundTeamSpikeState
	(*ValorantTeamCurrentRoundStatePartialUpdate)(nil),       // 26: bragi.ValorantTeamCurrentRoundStatePartialUpdate
	(*ValorantTeamCurrentRoundState)(nil),                    // 27: bragi.ValorantTeamCurrentRoundState
	(*ValorantPlayerCurrentRoundStatePartialUpdate)(nil),     // 28: bragi.ValorantPlayerCurrentRoundStatePartialUpdate
	(*ValorantPlayerCurrentRoundState)(nil),                  // 29: bragi.ValorantPlayerCurrentRoundState
	(*ValorantPlayerCurrentRoundStatisticsState)(nil),        // 30: bragi.ValorantPlayerCurrentRoundStatisticsState
	(*ValorantAbilitiesState)(nil),                           // 31: bragi.ValorantAbilitiesState
	(*ValorantWeaponsState)(nil),                             // 32: bragi.ValorantWeaponsState
	(*ValorantPlayerInfoState)(nil),                          // 33: bragi.ValorantPlayerInfoState
	(*ValorantPositionState)(nil),                            // 34: bragi.ValorantPositionState
	(*ValorantPreviousRound)(nil),                            // 35: bragi.ValorantPreviousRound
	(*ValorantWeapon)(nil),                                   // 36: bragi.ValorantWeapon
	(*ValorantAbility)(nil),                                  // 37: bragi.ValorantAbility
	(*ValorantMatchMessage_Payload)(nil),                     // 38: bragi.ValorantMatchMessage.Payload
	(*ValorantMatchUpdate_Payload)(nil),                      // 39: bragi.ValorantMatchUpdate.Payload
	nil,                                                      // 40: bragi.ValorantCurrentMapState.TeamsEntry
	(*ValorantTeamCurrentMapStatePartialUpdate_Payload)(nil), // 41: bragi.ValorantTeamCurrentMapStatePartialUpdate.Payload
	nil, // 42: bragi.ValorantTeamCurrentMapState.PlayersEntry
	(*ValorantPlayerCurrentMapStatePartialUpdate_Payload)(nil), // 43: bragi.ValorantPlayerCurrentMapStatePartialUpdate.Payload
	nil, // 44: bragi.ValorantCurrentRoundState.TeamsEntry
	(*ValorantTeamCurrentRoundStatePartialUpdate_Payload)(nil), // 45: bragi.ValorantTeamCurrentRoundStatePartialUpdate.Payload
	nil, // 46: bragi.ValorantTeamCurrentRoundState.PlayersEntry
	(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload)(nil), // 47: bragi.ValorantPlayerCurrentRoundStatePartialUpdate.Payload
	(*timestamppb.Timestamp)(nil),                                // 48: google.protobuf.Timestamp
	(DataStatus)(0),                                              // 49: bragi.DataStatus
	(*Announcement)(nil),                                         // 50: bragi.Announcement
	(BestOfType)(0),                                              // 51: bragi.BestOfType
	(*Team)(nil),                                                 // 52: bragi.Team
	(MatchStatusType)(0),                                         // 53: bragi.MatchStatusType
	(*durationpb.Duration)(nil),                                  // 54: google.protobuf.Duration
}
var file_bragi_valorant_proto_depIdxs = []int32{
	48, // 0: bragi.ValorantMatchMessage.timestamp:type_name -> google.protobuf.Timestamp
	49, // 1: bragi.ValorantMatchMessage.data_status:type_name -> bragi.DataStatus
	38, // 2: bragi.ValorantMatchMessage.payload:type_name -> bragi.ValorantMatchMessage.Payload
	48, // 3: bragi.ValorantMatchSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	49, // 4: bragi.ValorantMatchSnapshot.data_status:type_name -> bragi.DataStatus
	50, // 5: bragi.ValorantMatchSnapshot.announcements:type_name -> bragi.Announcement
	10, // 6: bragi.ValorantMatchSnapshot.match_state:type_name -> bragi.ValorantMatchState
	39, // 7: bragi.ValorantMatchUpdate.payload:type_name -> bragi.ValorantMatchUpdate.Payload
	9,  // 8: bragi.ValorantMatchStatePartialUpdates.updates:type_name -> bragi.ValorantMatchStatePartialUpdate
	11, // 9: bragi.ValorantMatchStatePartialUpdate.score:type_name -> bragi.ValorantMatchScoreState
	13, // 10: bragi.ValorantMatchStatePartialUpdate.current_map:type_name -> bragi.ValorantCurrentMapState
	12, // 11: bragi.ValorantMatchStatePartialUpdate.current_map_partial_update:type_name -> bragi.ValorantCurrentMapStatePartialUpdate
	51, // 12: bragi.ValorantMatchState.match_type:type_name -> bragi.BestOfType
	52, // 13: bragi.ValorantMatchState.home_team:type_name -> bragi.Team
	52, // 14: bragi.ValorantMatchState.away_team:type_name -> bragi.Team
	11, // 15: bragi.ValorantMatchState.score:type_name -> bragi.ValorantMatchScoreState
	53, // 16: bragi.ValorantMatchState.match_status:type_name -> bragi.MatchStatusType
	13, // 17: bragi.ValorantMatchState.current_map:type_name -> bragi.ValorantCurrentMapState
	14, // 18: bragi.ValorantCurrentMapStatePartialUpdate.score:type_name -> bragi.ValorantMapScoreState
	22, // 19: bragi.ValorantCurrentMapStatePartialUpdate.current_round:type_name -> bragi.ValorantCurrentRoundState
	21, // 20: bragi.ValorantCurrentMapStatePartialUpdate.current_round_partial_update:type_name -> bragi.ValorantCurrentRoundStatePartialUpdate
	17, // 21: bragi.ValorantCurrentMapStatePartialUpdate.team_current_map_state:type_name -> bragi.ValorantTeamCurrentMapState
	16, // 22: bragi.ValorantCurrentMapStatePartialUpdate.team_current_map_partial_update:type_name -> bragi.ValorantTeamCurrentMapStatePartialUpdate
	15, // 23: bragi.ValorantCurrentMapStatePartialUpdate.previous_rounds:type_name -> bragi.ValorantPreviousRoundsState
	14, // 24: bragi.ValorantCurrentMapState.score:type_name -> bragi.ValorantMapScoreState
	22, // 25: bragi.ValorantCurrentMapState.current_round:type_name -> bragi.ValorantCurrentRoundState
	40, // 26: bragi.ValorantCurrentMapState.teams:type_name -> bragi.ValorantCurrentMapState.TeamsEntry
	15, // 27: bragi.ValorantCurrentMapState.previous_rounds:type_name -> bragi.ValorantPreviousRoundsState
	35, // 28: bragi.ValorantPreviousRoundsState.rounds:type_name -> bragi.ValorantPreviousRound
	41, // 29: bragi.ValorantTeamCurrentMapStatePartialUpdate.payload:type_name -> bragi.ValorantTeamCurrentMapStatePartialUpdate.Payload
	1,  // 30: bragi.ValorantTeamCurrentMapState.side:type_name -> bragi.ValorantSide
	42, // 31: bragi.ValorantTeamCurrentMapState.players:type_name -> bragi.ValorantTeamCurrentMapState.PlayersEntry
	43, // 32: bragi.ValorantPlayerCurrentMapStatePartialUpdate.payload:type_name -> bragi.ValorantPlayerCurrentMapStatePartialUpdate.Payload
	33, // 33: bragi.ValorantPlayerCurrentMapState.player_info:type_name -> bragi.ValorantPlayerInfoState
	31, // 34: bragi.ValorantPlayerCurrentMapState.abilities:type_name -> bragi.ValorantAbilitiesState
	20, // 35: bragi.ValorantPlayerCurrentMapState.statistics:type_name -> bragi.ValorantPlayerCurrentMapStatisticsState
	23, // 36: bragi.ValorantCurrentRoundStatePartialUpdate.round_info:type_name -> bragi.ValorantRoundInfoState
	24, // 37: bragi.ValorantCurrentRoundStatePartialUpdate.time:type_name -> bragi.ValorantCurrentRoundTimeState
	25, // 38: bragi.ValorantCurrentRoundStatePartialUpdate.spike:type_name -> bragi.ValorantCurrentRoundTeamSpikeState
	27, // 39: bragi.ValorantCurrentRoundStatePartialUpdate.team_current_round_state:type_name -> bragi.ValorantTeamCurrentRoundState
	26, // 40: bragi.ValorantCurrentRoundStatePartialUpdate.team_current_round_partial_update:type_name -> bragi.ValorantTeamCurrentRoundStatePartialUpdate
	23, // 41: bragi.ValorantCurrentRoundState.round_info:type_name -> bragi.ValorantRoundInfoState
	24, // 42: bragi.ValorantCurrentRoundState.time:type_name -> bragi.ValorantCurrentRoundTimeState
	25, // 43: bragi.ValorantCurrentRoundState.spike:type_name -> bragi.ValorantCurrentRoundTeamSpikeState
	44, // 44: bragi.ValorantCurrentRoundState.teams:type_name -> bragi.ValorantCurrentRoundState.TeamsEntry
	3,  // 45: bragi.ValorantRoundInfoState.phase:type_name -> bragi.ValorantRoundPhase
	54, // 46: bragi.ValorantCurrentRoundTimeState.time_remaining:type_name -> google.protobuf.Duration
	4,  // 47: bragi.ValorantCurrentRoundTeamSpikeState.state:type_name -> bragi.ValorantSpikeState
	54, // 48: bragi.ValorantCurrentRoundTeamSpikeState.time_to_defused:type_name -> google.protobuf.Duration
	45, // 49: bragi.ValorantTeamCurrentRoundStatePartialUpdate.payload:type_name -> bragi.ValorantTeamCurrentRoundStatePartialUpdate.Payload
	1,  // 50: bragi.ValorantTeamCurrentRoundState.side:type_name -> bragi.ValorantSide
	46, // 51: bragi.ValorantTeamCurrentRoundState.players:type_name -> bragi.ValorantTeamCurrentRoundState.PlayersEntry
	47, // 52: bragi.ValorantPlayerCurrentRoundStatePartialUpdate.payload:type_name -> bragi.ValorantPlayerCurrentRoundStatePartialUpdate.Payload
	33, // 53: bragi.ValorantPlayerCurrentRoundState.player_info:type_name -> bragi.ValorantPlayerInfoState
	30, // 54: bragi.ValorantPlayerCurrentRoundState.statistics:type_name -> bragi.ValorantPlayerCurrentRoundStatisticsState
	32, // 55: bragi.ValorantPlayerCurrentRoundState.weapons:type_name -> bragi.ValorantWeaponsState
	34, // 56: bragi.ValorantPlayerCurrentRoundState.position:type_name -> bragi.ValorantPositionState
	37, // 57: bragi.ValorantAbilitiesState.abilities:type_name -> bragi.ValorantAbility
	36, // 58: bragi.ValorantWeaponsState.weapons:type_name -> bragi.ValorantWeapon
	2,  // 59: bragi.ValorantPreviousRound.outcome:type_name -> bragi.ValorantRoundOutcome
	6,  // 60: bragi.ValorantMatchMessage.Payload.snapshot:type_name -> bragi.ValorantMatchSnapshot
	7,  // 61: bragi.ValorantMatchMessage.Payload.update:type_name -> bragi.ValorantMatchUpdate
	10, // 62: bragi.ValorantMatchUpdate.Payload.match_state:type_name -> bragi.ValorantMatchState
	8,  // 63: bragi.ValorantMatchUpdate.Payload.partial_updates:type_name -> bragi.ValorantMatchStatePartialUpdates
	17, // 64: bragi.ValorantCurrentMapState.TeamsEntry.value:type_name -> bragi.ValorantTeamCurrentMapState
	19, // 65: bragi.ValorantTeamCurrentMapStatePartialUpdate.Payload.player_current_map_state:type_name -> bragi.ValorantPlayerCurrentMapState
	18, // 66: bragi.ValorantTeamCurrentMapStatePartialUpdate.Payload.player_current_map_partial_update:type_name -> bragi.ValorantPlayerCurrentMapStatePartialUpdate
	19, // 67: bragi.ValorantTeamCurrentMapState.PlayersEntry.value:type_name -> bragi.ValorantPlayerCurrentMapState
	33, // 68: bragi.ValorantPlayerCurrentMapStatePartialUpdate.Payload.player_info:type_name -> bragi.ValorantPlayerInfoState
	31, // 69: bragi.ValorantPlayerCurrentMapStatePartialUpdate.Payload.abilities:type_name -> bragi.ValorantAbilitiesState
	20, // 70: bragi.ValorantPlayerCurrentMapStatePartialUpdate.Payload.statistics:type_name -> bragi.ValorantPlayerCurrentMapStatisticsState
	27, // 71: bragi.ValorantCurrentRoundState.TeamsEntry.value:type_name -> bragi.ValorantTeamCurrentRoundState
	29, // 72: bragi.ValorantTeamCurrentRoundStatePartialUpdate.Payload.player_current_round_state:type_name -> bragi.ValorantPlayerCurrentRoundState
	28, // 73: bragi.ValorantTeamCurrentRoundStatePartialUpdate.Payload.player_current_round_partial_update:type_name -> bragi.ValorantPlayerCurrentRoundStatePartialUpdate
	29, // 74: bragi.ValorantTeamCurrentRoundState.PlayersEntry.value:type_name -> bragi.ValorantPlayerCurrentRoundState
	33, // 75: bragi.ValorantPlayerCurrentRoundStatePartialUpdate.Payload.player_info:type_name -> bragi.ValorantPlayerInfoState
	30, // 76: bragi.ValorantPlayerCurrentRoundStatePartialUpdate.Payload.statistics:type_name -> bragi.ValorantPlayerCurrentRoundStatisticsState
	32, // 77: bragi.ValorantPlayerCurrentRoundStatePartialUpdate.Payload.weapons:type_name -> bragi.ValorantWeaponsState
	34, // 78: bragi.ValorantPlayerCurrentRoundStatePartialUpdate.Payload.position:type_name -> bragi.ValorantPositionState
	79, // [79:79] is the sub-list for method output_type
	79, // [79:79] is the sub-list for method input_type
	79, // [79:79] is the sub-list for extension type_name
	79, // [79:79] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_bragi_valorant_proto_init() }
func file_bragi_valorant_proto_init() {
	if File_bragi_valorant_proto != nil {
		return
	}
	file_bragi_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bragi_valorant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchStatePartialUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMapScoreState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPreviousRoundsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantTeamCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantTeamCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerCurrentMapStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerCurrentMapState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerCurrentMapStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantCurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantCurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantRoundInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantCurrentRoundTimeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantCurrentRoundTeamSpikeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantTeamCurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantTeamCurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerCurrentRoundStatePartialUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerCurrentRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerCurrentRoundStatisticsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantAbilitiesState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantWeaponsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPositionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPreviousRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantWeapon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchMessage_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantMatchUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantTeamCurrentMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerCurrentMapStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantTeamCurrentRoundStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bragi_valorant_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bragi_valorant_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ValorantMatchStatePartialUpdate_Score)(nil),
		(*ValorantMatchStatePartialUpdate_CurrentMap)(nil),
		(*ValorantMatchStatePartialUpdate_CurrentMapPartialUpdate)(nil),
	}
	file_bragi_valorant_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ValorantCurrentMapStatePartialUpdate_Score)(nil),
		(*ValorantCurrentMapStatePartialUpdate_CurrentRound)(nil),
		(*ValorantCurrentMapStatePartialUpdate_CurrentRoundPartialUpdate)(nil),
		(*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapState)(nil),
		(*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)(nil),
		(*ValorantCurrentMapStatePartialUpdate_PreviousRounds)(nil),
	}
	file_bragi_valorant_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_bragi_valorant_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ValorantCurrentRoundStatePartialUpdate_RoundInfo)(nil),
		(*ValorantCurrentRoundStatePartialUpdate_Time)(nil),
		(*ValorantCurrentRoundStatePartialUpdate_Spike)(nil),
		(*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundState)(nil),
		(*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundPartialUpdate)(nil),
	}
	file_bragi_valorant_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*ValorantMatchMessage_Payload_Snapshot)(nil),
		(*ValorantMatchMessage_Payload_Update)(nil),
	}
	file_bragi_valorant_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*ValorantMatchUpdate_Payload_MatchState)(nil),
		(*ValorantMatchUpdate_Payload_PartialUpdates)(nil),
	}
	file_bragi_valorant_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState)(nil),
		(*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate)(nil),
	}
	file_bragi_valorant_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo)(nil),
		(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Abilities)(nil),
		(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Statistics)(nil),
	}
	file_bragi_valorant_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundState)(nil),
		(*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundPartialUpdate)(nil),
	}
	file_bragi_valorant_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_PlayerInfo)(nil),
		(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Statistics)(nil),
		(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Weapons)(nil),
		(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Position)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bragi_valorant_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bragi_valorant_proto_goTypes,
		DependencyIndexes: file_bragi_valorant_proto_depIdxs,
		EnumInfos:         file_bragi_valorant_proto_enumTypes,
		MessageInfos:      file_bragi_valorant_proto_msgTypes,
	}.Build()
	File_bragi_valorant_proto = out.File
	file_bragi_valorant_proto_rawDesc = nil
	file_bragi_valorant_proto_goTypes = nil
	file_bragi_valorant_proto_depIdxs = nil
}
