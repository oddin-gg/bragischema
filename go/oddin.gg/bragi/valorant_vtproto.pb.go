// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.1-0.20241121165744-79df5c4772f2
// source: bragi/valorant.proto

package bragi

import (
	durationpb "github.com/planetscale/vtprotobuf/types/known/durationpb"
	timestamppb "github.com/planetscale/vtprotobuf/types/known/timestamppb"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (this *ValorantMatchMessage_Payload) EqualVT(that *ValorantMatchMessage_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isValorantMatchMessage_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchMessage_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchMessage_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMatchMessage_Payload_Snapshot) EqualVT(thatIface isValorantMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantMatchMessage_Payload_Snapshot)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Snapshot, that.Snapshot; p != q {
		if p == nil {
			p = &ValorantMatchSnapshot{}
		}
		if q == nil {
			q = &ValorantMatchSnapshot{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantMatchMessage_Payload_Update) EqualVT(thatIface isValorantMatchMessage_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantMatchMessage_Payload_Update)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Update, that.Update; p != q {
		if p == nil {
			p = &ValorantMatchUpdate{}
		}
		if q == nil {
			q = &ValorantMatchUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantMatchMessage) EqualVT(that *ValorantMatchMessage) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchMessage) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchMessage)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMatchSnapshot) EqualVT(that *ValorantMatchSnapshot) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.Sequence != that.Sequence {
		return false
	}
	if !(*timestamppb.Timestamp)(this.Timestamp).EqualVT((*timestamppb.Timestamp)(that.Timestamp)) {
		return false
	}
	if this.DataStatus != that.DataStatus {
		return false
	}
	if len(this.Announcements) != len(that.Announcements) {
		return false
	}
	for i, vx := range this.Announcements {
		vy := that.Announcements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Announcement{}
			}
			if q == nil {
				q = &Announcement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.MatchState.EqualVT(that.MatchState) {
		return false
	}
	if !this.Tournament.EqualVT(that.Tournament) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchSnapshot) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchSnapshot)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMatchUpdate_Payload) EqualVT(that *ValorantMatchUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isValorantMatchUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMatchUpdate_Payload_MatchState) EqualVT(thatIface isValorantMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantMatchUpdate_Payload_MatchState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MatchState, that.MatchState; p != q {
		if p == nil {
			p = &ValorantMatchState{}
		}
		if q == nil {
			q = &ValorantMatchState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantMatchUpdate_Payload_PartialUpdates) EqualVT(thatIface isValorantMatchUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantMatchUpdate_Payload_PartialUpdates)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PartialUpdates, that.PartialUpdates; p != q {
		if p == nil {
			p = &ValorantMatchStatePartialUpdates{}
		}
		if q == nil {
			q = &ValorantMatchStatePartialUpdates{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantMatchUpdate) EqualVT(that *ValorantMatchUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMatchStatePartialUpdates) EqualVT(that *ValorantMatchStatePartialUpdates) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Updates) != len(that.Updates) {
		return false
	}
	for i, vx := range this.Updates {
		vy := that.Updates[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ValorantMatchStatePartialUpdate{}
			}
			if q == nil {
				q = &ValorantMatchStatePartialUpdate{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchStatePartialUpdates) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchStatePartialUpdates)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMatchStatePartialUpdate) EqualVT(that *ValorantMatchStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isValorantMatchStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMatchStatePartialUpdate_Score) EqualVT(thatIface isValorantMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantMatchStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &ValorantMatchScoreState{}
		}
		if q == nil {
			q = &ValorantMatchScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantMatchStatePartialUpdate_CurrentMap) EqualVT(thatIface isValorantMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantMatchStatePartialUpdate_CurrentMap)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMap, that.CurrentMap; p != q {
		if p == nil {
			p = &ValorantCurrentMapState{}
		}
		if q == nil {
			q = &ValorantCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantMatchStatePartialUpdate_CurrentMapPartialUpdate) EqualVT(thatIface isValorantMatchStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantMatchStatePartialUpdate_CurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentMapPartialUpdate, that.CurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &ValorantCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &ValorantCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantMatchState) EqualVT(that *ValorantMatchState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MatchUrn != that.MatchUrn {
		return false
	}
	if this.MatchType != that.MatchType {
		return false
	}
	if !this.HomeTeam.EqualVT(that.HomeTeam) {
		return false
	}
	if !this.AwayTeam.EqualVT(that.AwayTeam) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if this.MatchStatus != that.MatchStatus {
		return false
	}
	if !this.CurrentMap.EqualVT(that.CurrentMap) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMatchScoreState) EqualVT(that *ValorantMatchScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMatchScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMatchScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantCurrentMapStatePartialUpdate) EqualVT(that *ValorantCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isValorantCurrentMapStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantCurrentMapStatePartialUpdate_Score) EqualVT(thatIface isValorantCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentMapStatePartialUpdate_Score)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Score, that.Score; p != q {
		if p == nil {
			p = &ValorantMapScoreState{}
		}
		if q == nil {
			q = &ValorantMapScoreState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentMapStatePartialUpdate_CurrentRound) EqualVT(thatIface isValorantCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentMapStatePartialUpdate_CurrentRound)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentRound, that.CurrentRound; p != q {
		if p == nil {
			p = &ValorantCurrentRoundState{}
		}
		if q == nil {
			q = &ValorantCurrentRoundState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentMapStatePartialUpdate_CurrentRoundPartialUpdate) EqualVT(thatIface isValorantCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentMapStatePartialUpdate_CurrentRoundPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.CurrentRoundPartialUpdate, that.CurrentRoundPartialUpdate; p != q {
		if p == nil {
			p = &ValorantCurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &ValorantCurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentMapStatePartialUpdate_TeamCurrentMapState) EqualVT(thatIface isValorantCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapState, that.TeamCurrentMapState; p != q {
		if p == nil {
			p = &ValorantTeamCurrentMapState{}
		}
		if q == nil {
			q = &ValorantTeamCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate) EqualVT(thatIface isValorantCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentMapStatePartialUpdate_TeamCurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentMapPartialUpdate, that.TeamCurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &ValorantTeamCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &ValorantTeamCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentMapStatePartialUpdate_PreviousRounds) EqualVT(thatIface isValorantCurrentMapStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentMapStatePartialUpdate_PreviousRounds)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PreviousRounds, that.PreviousRounds; p != q {
		if p == nil {
			p = &ValorantPreviousRoundsState{}
		}
		if q == nil {
			q = &ValorantPreviousRoundsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentMapState) EqualVT(that *ValorantCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.MapOrder != that.MapOrder {
		return false
	}
	if this.MapPaused != that.MapPaused {
		return false
	}
	if this.MapName != that.MapName {
		return false
	}
	if p, q := this.WinTeamUrn, that.WinTeamUrn; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if !this.Score.EqualVT(that.Score) {
		return false
	}
	if !this.CurrentRound.EqualVT(that.CurrentRound) {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ValorantTeamCurrentMapState{}
			}
			if q == nil {
				q = &ValorantTeamCurrentMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.PreviousRounds.EqualVT(that.PreviousRounds) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantMapScoreState) EqualVT(that *ValorantMapScoreState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HomeScore != that.HomeScore {
		return false
	}
	if this.AwayScore != that.AwayScore {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantMapScoreState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantMapScoreState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPreviousRoundsState) EqualVT(that *ValorantPreviousRoundsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Rounds) != len(that.Rounds) {
		return false
	}
	for i, vx := range this.Rounds {
		vy := that.Rounds[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ValorantPreviousRound{}
			}
			if q == nil {
				q = &ValorantPreviousRound{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPreviousRoundsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPreviousRoundsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantTeamCurrentMapStatePartialUpdate_Payload) EqualVT(that *ValorantTeamCurrentMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantTeamCurrentMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantTeamCurrentMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState) EqualVT(thatIface isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerCurrentMapState, that.PlayerCurrentMapState; p != q {
		if p == nil {
			p = &ValorantPlayerCurrentMapState{}
		}
		if q == nil {
			q = &ValorantPlayerCurrentMapState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate) EqualVT(thatIface isValorantTeamCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantTeamCurrentMapStatePartialUpdate_Payload_PlayerCurrentMapPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerCurrentMapPartialUpdate, that.PlayerCurrentMapPartialUpdate; p != q {
		if p == nil {
			p = &ValorantPlayerCurrentMapStatePartialUpdate{}
		}
		if q == nil {
			q = &ValorantPlayerCurrentMapStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantTeamCurrentMapStatePartialUpdate) EqualVT(that *ValorantTeamCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantTeamCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantTeamCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantTeamCurrentMapState) EqualVT(that *ValorantTeamCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Side != that.Side {
		return false
	}
	if len(this.Players) != len(that.Players) {
		return false
	}
	for i, vx := range this.Players {
		vy, ok := that.Players[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ValorantPlayerCurrentMapState{}
			}
			if q == nil {
				q = &ValorantPlayerCurrentMapState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantTeamCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantTeamCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerCurrentMapStatePartialUpdate_Payload) EqualVT(that *ValorantPlayerCurrentMapStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerCurrentMapStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerCurrentMapStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo) EqualVT(thatIface isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_PlayerInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerInfo, that.PlayerInfo; p != q {
		if p == nil {
			p = &ValorantPlayerInfoState{}
		}
		if q == nil {
			q = &ValorantPlayerInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantPlayerCurrentMapStatePartialUpdate_Payload_Abilities) EqualVT(thatIface isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Abilities)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Abilities, that.Abilities; p != q {
		if p == nil {
			p = &ValorantAbilitiesState{}
		}
		if q == nil {
			q = &ValorantAbilitiesState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantPlayerCurrentMapStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isValorantPlayerCurrentMapStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantPlayerCurrentMapStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &ValorantPlayerCurrentMapStatisticsState{}
		}
		if q == nil {
			q = &ValorantPlayerCurrentMapStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantPlayerCurrentMapStatePartialUpdate) EqualVT(that *ValorantPlayerCurrentMapStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerCurrentMapStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerCurrentMapStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerCurrentMapState) EqualVT(that *ValorantPlayerCurrentMapState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.AgentUrn != that.AgentUrn {
		return false
	}
	if !this.PlayerInfo.EqualVT(that.PlayerInfo) {
		return false
	}
	if !this.Abilities.EqualVT(that.Abilities) {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerCurrentMapState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerCurrentMapState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerCurrentMapStatisticsState) EqualVT(that *ValorantPlayerCurrentMapStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.Kills != that.Kills {
		return false
	}
	if this.Deaths != that.Deaths {
		return false
	}
	if this.Assists != that.Assists {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerCurrentMapStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerCurrentMapStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantCurrentRoundStatePartialUpdate) EqualVT(that *ValorantCurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Update == nil && that.Update != nil {
		return false
	} else if this.Update != nil {
		if that.Update == nil {
			return false
		}
		if !this.Update.(interface {
			EqualVT(isValorantCurrentRoundStatePartialUpdate_Update) bool
		}).EqualVT(that.Update) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantCurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantCurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantCurrentRoundStatePartialUpdate_RoundInfo) EqualVT(thatIface isValorantCurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentRoundStatePartialUpdate_RoundInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.RoundInfo, that.RoundInfo; p != q {
		if p == nil {
			p = &ValorantRoundInfoState{}
		}
		if q == nil {
			q = &ValorantRoundInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentRoundStatePartialUpdate_Time) EqualVT(thatIface isValorantCurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentRoundStatePartialUpdate_Time)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Time, that.Time; p != q {
		if p == nil {
			p = &ValorantCurrentRoundTimeState{}
		}
		if q == nil {
			q = &ValorantCurrentRoundTimeState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentRoundStatePartialUpdate_Spike) EqualVT(thatIface isValorantCurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentRoundStatePartialUpdate_Spike)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Spike, that.Spike; p != q {
		if p == nil {
			p = &ValorantCurrentRoundTeamSpikeState{}
		}
		if q == nil {
			q = &ValorantCurrentRoundTeamSpikeState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundState) EqualVT(thatIface isValorantCurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentRoundState, that.TeamCurrentRoundState; p != q {
		if p == nil {
			p = &ValorantTeamCurrentRoundState{}
		}
		if q == nil {
			q = &ValorantTeamCurrentRoundState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundPartialUpdate) EqualVT(thatIface isValorantCurrentRoundStatePartialUpdate_Update) bool {
	that, ok := thatIface.(*ValorantCurrentRoundStatePartialUpdate_TeamCurrentRoundPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TeamCurrentRoundPartialUpdate, that.TeamCurrentRoundPartialUpdate; p != q {
		if p == nil {
			p = &ValorantTeamCurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &ValorantTeamCurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantCurrentRoundState) EqualVT(that *ValorantCurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.RoundInfo.EqualVT(that.RoundInfo) {
		return false
	}
	if !this.Time.EqualVT(that.Time) {
		return false
	}
	if !this.Spike.EqualVT(that.Spike) {
		return false
	}
	if len(this.Teams) != len(that.Teams) {
		return false
	}
	for i, vx := range this.Teams {
		vy, ok := that.Teams[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ValorantTeamCurrentRoundState{}
			}
			if q == nil {
				q = &ValorantTeamCurrentRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantCurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantCurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantRoundInfoState) EqualVT(that *ValorantRoundInfoState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Number != that.Number {
		return false
	}
	if this.Phase != that.Phase {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantRoundInfoState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantRoundInfoState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantCurrentRoundTimeState) EqualVT(that *ValorantCurrentRoundTimeState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !(*durationpb.Duration)(this.TimeRemaining).EqualVT((*durationpb.Duration)(that.TimeRemaining)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantCurrentRoundTimeState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantCurrentRoundTimeState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantCurrentRoundTeamSpikeState) EqualVT(that *ValorantCurrentRoundTeamSpikeState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.State != that.State {
		return false
	}
	if !(*durationpb.Duration)(this.TimeToDefused).EqualVT((*durationpb.Duration)(that.TimeToDefused)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantCurrentRoundTeamSpikeState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantCurrentRoundTeamSpikeState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantTeamCurrentRoundStatePartialUpdate_Payload) EqualVT(that *ValorantTeamCurrentRoundStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantTeamCurrentRoundStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantTeamCurrentRoundStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundPartialUpdate) EqualVT(thatIface isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundPartialUpdate)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerCurrentRoundPartialUpdate, that.PlayerCurrentRoundPartialUpdate; p != q {
		if p == nil {
			p = &ValorantPlayerCurrentRoundStatePartialUpdate{}
		}
		if q == nil {
			q = &ValorantPlayerCurrentRoundStatePartialUpdate{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundState) EqualVT(thatIface isValorantTeamCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantTeamCurrentRoundStatePartialUpdate_Payload_PlayerCurrentRoundState)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerCurrentRoundState, that.PlayerCurrentRoundState; p != q {
		if p == nil {
			p = &ValorantPlayerCurrentRoundState{}
		}
		if q == nil {
			q = &ValorantPlayerCurrentRoundState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantTeamCurrentRoundStatePartialUpdate) EqualVT(that *ValorantTeamCurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantTeamCurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantTeamCurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantTeamCurrentRoundState) EqualVT(that *ValorantTeamCurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TeamUrn != that.TeamUrn {
		return false
	}
	if this.Side != that.Side {
		return false
	}
	if len(this.Players) != len(that.Players) {
		return false
	}
	for i, vx := range this.Players {
		vy, ok := that.Players[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ValorantPlayerCurrentRoundState{}
			}
			if q == nil {
				q = &ValorantPlayerCurrentRoundState{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantTeamCurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantTeamCurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) EqualVT(that *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Payload == nil && that.Payload != nil {
		return false
	} else if this.Payload != nil {
		if that.Payload == nil {
			return false
		}
		if !this.Payload.(interface {
			EqualVT(isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool
		}).EqualVT(that.Payload) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerCurrentRoundStatePartialUpdate_Payload) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerCurrentRoundStatePartialUpdate_Payload_PlayerInfo) EqualVT(thatIface isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_PlayerInfo)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PlayerInfo, that.PlayerInfo; p != q {
		if p == nil {
			p = &ValorantPlayerInfoState{}
		}
		if q == nil {
			q = &ValorantPlayerInfoState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Statistics) EqualVT(thatIface isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Statistics)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Statistics, that.Statistics; p != q {
		if p == nil {
			p = &ValorantPlayerCurrentRoundStatisticsState{}
		}
		if q == nil {
			q = &ValorantPlayerCurrentRoundStatisticsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Weapons) EqualVT(thatIface isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Weapons)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Weapons, that.Weapons; p != q {
		if p == nil {
			p = &ValorantWeaponsState{}
		}
		if q == nil {
			q = &ValorantWeaponsState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Position) EqualVT(thatIface isValorantPlayerCurrentRoundStatePartialUpdate_Payload_Payload) bool {
	that, ok := thatIface.(*ValorantPlayerCurrentRoundStatePartialUpdate_Payload_Position)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.Position, that.Position; p != q {
		if p == nil {
			p = &ValorantPositionState{}
		}
		if q == nil {
			q = &ValorantPositionState{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *ValorantPlayerCurrentRoundStatePartialUpdate) EqualVT(that *ValorantPlayerCurrentRoundStatePartialUpdate) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.Payload.EqualVT(that.Payload) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerCurrentRoundStatePartialUpdate) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerCurrentRoundStatePartialUpdate)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerCurrentRoundState) EqualVT(that *ValorantPlayerCurrentRoundState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if !this.PlayerInfo.EqualVT(that.PlayerInfo) {
		return false
	}
	if !this.Statistics.EqualVT(that.Statistics) {
		return false
	}
	if !this.Weapons.EqualVT(that.Weapons) {
		return false
	}
	if !this.Position.EqualVT(that.Position) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerCurrentRoundState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerCurrentRoundState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerCurrentRoundStatisticsState) EqualVT(that *ValorantPlayerCurrentRoundStatisticsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.IsAlive != that.IsAlive {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerCurrentRoundStatisticsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerCurrentRoundStatisticsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantAbilitiesState) EqualVT(that *ValorantAbilitiesState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if len(this.Abilities) != len(that.Abilities) {
		return false
	}
	for i, vx := range this.Abilities {
		vy := that.Abilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ValorantAbility{}
			}
			if q == nil {
				q = &ValorantAbility{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantAbilitiesState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantAbilitiesState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantWeaponsState) EqualVT(that *ValorantWeaponsState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if len(this.Weapons) != len(that.Weapons) {
		return false
	}
	for i, vx := range this.Weapons {
		vy := that.Weapons[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ValorantWeapon{}
			}
			if q == nil {
				q = &ValorantWeapon{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantWeaponsState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantWeaponsState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPlayerInfoState) EqualVT(that *ValorantPlayerInfoState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.SlotId != that.SlotId {
		return false
	}
	if this.ExtName != that.ExtName {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPlayerInfoState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPlayerInfoState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPositionState) EqualVT(that *ValorantPositionState) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.PlayerUrn != that.PlayerUrn {
		return false
	}
	if this.X != that.X {
		return false
	}
	if this.Y != that.Y {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPositionState) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPositionState)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantPreviousRound) EqualVT(that *ValorantPreviousRound) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Number != that.Number {
		return false
	}
	if this.Outcome != that.Outcome {
		return false
	}
	if this.HomeWon != that.HomeWon {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantPreviousRound) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantPreviousRound)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantWeapon) EqualVT(that *ValorantWeapon) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantWeapon) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantWeapon)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ValorantAbility) EqualVT(that *ValorantAbility) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.Ready != that.Ready {
		return false
	}
	if this.IsUltimate != that.IsUltimate {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ValorantAbility) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*ValorantAbility)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
