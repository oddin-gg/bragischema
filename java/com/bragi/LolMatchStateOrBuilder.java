// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: bragi/lol.proto
// Protobuf Java Version: 4.29.3

package com.bragi;

public interface LolMatchStateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bragi.LolMatchState)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string match_urn = 1 [json_name = "matchUrn"];</code>
   * @return The matchUrn.
   */
  java.lang.String getMatchUrn();
  /**
   * <code>string match_urn = 1 [json_name = "matchUrn"];</code>
   * @return The bytes for matchUrn.
   */
  com.google.protobuf.ByteString
      getMatchUrnBytes();

  /**
   * <code>.bragi.BestOfType match_type = 2 [json_name = "matchType"];</code>
   * @return The enum numeric value on the wire for matchType.
   */
  int getMatchTypeValue();
  /**
   * <code>.bragi.BestOfType match_type = 2 [json_name = "matchType"];</code>
   * @return The matchType.
   */
  com.bragi.BestOfType getMatchType();

  /**
   * <code>.bragi.Team home_team = 3 [json_name = "homeTeam"];</code>
   * @return Whether the homeTeam field is set.
   */
  boolean hasHomeTeam();
  /**
   * <code>.bragi.Team home_team = 3 [json_name = "homeTeam"];</code>
   * @return The homeTeam.
   */
  com.bragi.Team getHomeTeam();
  /**
   * <code>.bragi.Team home_team = 3 [json_name = "homeTeam"];</code>
   */
  com.bragi.TeamOrBuilder getHomeTeamOrBuilder();

  /**
   * <code>.bragi.Team away_team = 4 [json_name = "awayTeam"];</code>
   * @return Whether the awayTeam field is set.
   */
  boolean hasAwayTeam();
  /**
   * <code>.bragi.Team away_team = 4 [json_name = "awayTeam"];</code>
   * @return The awayTeam.
   */
  com.bragi.Team getAwayTeam();
  /**
   * <code>.bragi.Team away_team = 4 [json_name = "awayTeam"];</code>
   */
  com.bragi.TeamOrBuilder getAwayTeamOrBuilder();

  /**
   * <code>.bragi.LolMatchScoreState score = 5 [json_name = "score"];</code>
   * @return Whether the score field is set.
   */
  boolean hasScore();
  /**
   * <code>.bragi.LolMatchScoreState score = 5 [json_name = "score"];</code>
   * @return The score.
   */
  com.bragi.LolMatchScoreState getScore();
  /**
   * <code>.bragi.LolMatchScoreState score = 5 [json_name = "score"];</code>
   */
  com.bragi.LolMatchScoreStateOrBuilder getScoreOrBuilder();

  /**
   * <code>.bragi.MatchStatusType match_status = 6 [json_name = "matchStatus"];</code>
   * @return The enum numeric value on the wire for matchStatus.
   */
  int getMatchStatusValue();
  /**
   * <code>.bragi.MatchStatusType match_status = 6 [json_name = "matchStatus"];</code>
   * @return The matchStatus.
   */
  com.bragi.MatchStatusType getMatchStatus();

  /**
   * <code>.bragi.LolCurrentMapState current_map = 7 [json_name = "currentMap"];</code>
   * @return Whether the currentMap field is set.
   */
  boolean hasCurrentMap();
  /**
   * <code>.bragi.LolCurrentMapState current_map = 7 [json_name = "currentMap"];</code>
   * @return The currentMap.
   */
  com.bragi.LolCurrentMapState getCurrentMap();
  /**
   * <code>.bragi.LolCurrentMapState current_map = 7 [json_name = "currentMap"];</code>
   */
  com.bragi.LolCurrentMapStateOrBuilder getCurrentMapOrBuilder();

  /**
   * <code>repeated .bragi.LolPreviousMapState previous_maps = 8 [json_name = "previousMaps"];</code>
   */
  java.util.List<com.bragi.LolPreviousMapState> 
      getPreviousMapsList();
  /**
   * <code>repeated .bragi.LolPreviousMapState previous_maps = 8 [json_name = "previousMaps"];</code>
   */
  com.bragi.LolPreviousMapState getPreviousMaps(int index);
  /**
   * <code>repeated .bragi.LolPreviousMapState previous_maps = 8 [json_name = "previousMaps"];</code>
   */
  int getPreviousMapsCount();
  /**
   * <code>repeated .bragi.LolPreviousMapState previous_maps = 8 [json_name = "previousMaps"];</code>
   */
  java.util.List<? extends com.bragi.LolPreviousMapStateOrBuilder> 
      getPreviousMapsOrBuilderList();
  /**
   * <code>repeated .bragi.LolPreviousMapState previous_maps = 8 [json_name = "previousMaps"];</code>
   */
  com.bragi.LolPreviousMapStateOrBuilder getPreviousMapsOrBuilder(
      int index);
}
