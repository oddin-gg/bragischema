/**
 * @fileoverview gRPC-Web generated client stub for bragi
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: bragi/bragi_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var bragi_common_pb = require('../bragi/common_pb.js')

var bragi_cs2_pb = require('../bragi/cs2_pb.js')

var bragi_dota2_pb = require('../bragi/dota2_pb.js')

var bragi_rush_soccer_pb = require('../bragi/rush_soccer_pb.js')

var bragi_lol_pb = require('../bragi/lol_pb.js')

var bragi_rush_basketball_pb = require('../bragi/rush_basketball_pb.js')

var bragi_valorant_pb = require('../bragi/valorant_pb.js')
const proto = {};
proto.bragi = require('./bragi_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.bragi.BragiClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.bragi.BragiPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.bragi.MatchTimelineRequest,
 *   !proto.bragi.MatchTimelineResponse>}
 */
const methodDescriptor_Bragi_MatchTimeline = new grpc.web.MethodDescriptor(
  '/bragi.Bragi/MatchTimeline',
  grpc.web.MethodType.UNARY,
  proto.bragi.MatchTimelineRequest,
  proto.bragi.MatchTimelineResponse,
  /**
   * @param {!proto.bragi.MatchTimelineRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.bragi.MatchTimelineResponse.deserializeBinary
);


/**
 * @param {!proto.bragi.MatchTimelineRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.bragi.MatchTimelineResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.bragi.MatchTimelineResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.bragi.BragiClient.prototype.matchTimeline =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/bragi.Bragi/MatchTimeline',
      request,
      metadata || {},
      methodDescriptor_Bragi_MatchTimeline,
      callback);
};


/**
 * @param {!proto.bragi.MatchTimelineRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.bragi.MatchTimelineResponse>}
 *     Promise that resolves to the response
 */
proto.bragi.BragiPromiseClient.prototype.matchTimeline =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/bragi.Bragi/MatchTimeline',
      request,
      metadata || {},
      methodDescriptor_Bragi_MatchTimeline);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.bragi.MatchTimelineFeedRequest,
 *   !proto.bragi.MatchTimelineFeedMessage>}
 */
const methodDescriptor_Bragi_MatchTimelineFeed = new grpc.web.MethodDescriptor(
  '/bragi.Bragi/MatchTimelineFeed',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.bragi.MatchTimelineFeedRequest,
  proto.bragi.MatchTimelineFeedMessage,
  /**
   * @param {!proto.bragi.MatchTimelineFeedRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.bragi.MatchTimelineFeedMessage.deserializeBinary
);


/**
 * @param {!proto.bragi.MatchTimelineFeedRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.bragi.MatchTimelineFeedMessage>}
 *     The XHR Node Readable Stream
 */
proto.bragi.BragiClient.prototype.matchTimelineFeed =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/bragi.Bragi/MatchTimelineFeed',
      request,
      metadata || {},
      methodDescriptor_Bragi_MatchTimelineFeed);
};


/**
 * @param {!proto.bragi.MatchTimelineFeedRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.bragi.MatchTimelineFeedMessage>}
 *     The XHR Node Readable Stream
 */
proto.bragi.BragiPromiseClient.prototype.matchTimelineFeed =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/bragi.Bragi/MatchTimelineFeed',
      request,
      metadata || {},
      methodDescriptor_Bragi_MatchTimelineFeed);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.bragi.LiveDataFeedRequest,
 *   !proto.bragi.LiveDataFeedMessage>}
 */
const methodDescriptor_Bragi_LiveDataFeed = new grpc.web.MethodDescriptor(
  '/bragi.Bragi/LiveDataFeed',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.bragi.LiveDataFeedRequest,
  proto.bragi.LiveDataFeedMessage,
  /**
   * @param {!proto.bragi.LiveDataFeedRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.bragi.LiveDataFeedMessage.deserializeBinary
);


/**
 * @param {!proto.bragi.LiveDataFeedRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.bragi.LiveDataFeedMessage>}
 *     The XHR Node Readable Stream
 */
proto.bragi.BragiClient.prototype.liveDataFeed =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/bragi.Bragi/LiveDataFeed',
      request,
      metadata || {},
      methodDescriptor_Bragi_LiveDataFeed);
};


/**
 * @param {!proto.bragi.LiveDataFeedRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.bragi.LiveDataFeedMessage>}
 *     The XHR Node Readable Stream
 */
proto.bragi.BragiPromiseClient.prototype.liveDataFeed =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/bragi.Bragi/LiveDataFeed',
      request,
      metadata || {},
      methodDescriptor_Bragi_LiveDataFeed);
};


module.exports = proto.bragi;

