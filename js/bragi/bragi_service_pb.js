// source: bragi/bragi_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var bragi_csgo_pb = require('../bragi/csgo_pb.js');
goog.object.extend(proto, bragi_csgo_pb);
var bragi_common_pb = require('../bragi/common_pb.js');
goog.object.extend(proto, bragi_common_pb);
goog.exportSymbol('proto.bragi.KeepAlive', null, global);
goog.exportSymbol('proto.bragi.LiveDataFeedMessage', null, global);
goog.exportSymbol('proto.bragi.LiveDataFeedMessage.MessageCase', null, global);
goog.exportSymbol('proto.bragi.LiveDataFeedRequest', null, global);
goog.exportSymbol('proto.bragi.MatchMessage', null, global);
goog.exportSymbol('proto.bragi.MatchMessage.MessageCase', null, global);
goog.exportSymbol('proto.bragi.MatchSnapshot', null, global);
goog.exportSymbol('proto.bragi.MatchSnapshot.SnapshotCase', null, global);
goog.exportSymbol('proto.bragi.MatchState', null, global);
goog.exportSymbol('proto.bragi.MatchState.StateCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.LiveDataFeedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.LiveDataFeedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.LiveDataFeedRequest.displayName = 'proto.bragi.LiveDataFeedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.LiveDataFeedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bragi.LiveDataFeedMessage.oneofGroups_);
};
goog.inherits(proto.bragi.LiveDataFeedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.LiveDataFeedMessage.displayName = 'proto.bragi.LiveDataFeedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.KeepAlive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.KeepAlive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.KeepAlive.displayName = 'proto.bragi.KeepAlive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.MatchMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bragi.MatchMessage.oneofGroups_);
};
goog.inherits(proto.bragi.MatchMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.MatchMessage.displayName = 'proto.bragi.MatchMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.MatchSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bragi.MatchSnapshot.oneofGroups_);
};
goog.inherits(proto.bragi.MatchSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.MatchSnapshot.displayName = 'proto.bragi.MatchSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.MatchState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bragi.MatchState.oneofGroups_);
};
goog.inherits(proto.bragi.MatchState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.MatchState.displayName = 'proto.bragi.MatchState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.LiveDataFeedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.LiveDataFeedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.LiveDataFeedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.LiveDataFeedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    after: (f = msg.getAfter()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.LiveDataFeedRequest}
 */
proto.bragi.LiveDataFeedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.LiveDataFeedRequest;
  return proto.bragi.LiveDataFeedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.LiveDataFeedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.LiveDataFeedRequest}
 */
proto.bragi.LiveDataFeedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.LiveDataFeedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.LiveDataFeedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.LiveDataFeedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.LiveDataFeedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp after = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.bragi.LiveDataFeedRequest.prototype.getAfter = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.bragi.LiveDataFeedRequest} returns this
*/
proto.bragi.LiveDataFeedRequest.prototype.setAfter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.LiveDataFeedRequest} returns this
 */
proto.bragi.LiveDataFeedRequest.prototype.clearAfter = function() {
  return this.setAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.LiveDataFeedRequest.prototype.hasAfter = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bragi.LiveDataFeedMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.bragi.LiveDataFeedMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  KEEPALIVE: 1,
  MATCH: 2
};

/**
 * @return {proto.bragi.LiveDataFeedMessage.MessageCase}
 */
proto.bragi.LiveDataFeedMessage.prototype.getMessageCase = function() {
  return /** @type {proto.bragi.LiveDataFeedMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.bragi.LiveDataFeedMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.LiveDataFeedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.LiveDataFeedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.LiveDataFeedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.LiveDataFeedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    keepalive: (f = msg.getKeepalive()) && proto.bragi.KeepAlive.toObject(includeInstance, f),
    match: (f = msg.getMatch()) && proto.bragi.MatchMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.LiveDataFeedMessage}
 */
proto.bragi.LiveDataFeedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.LiveDataFeedMessage;
  return proto.bragi.LiveDataFeedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.LiveDataFeedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.LiveDataFeedMessage}
 */
proto.bragi.LiveDataFeedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bragi.KeepAlive;
      reader.readMessage(value,proto.bragi.KeepAlive.deserializeBinaryFromReader);
      msg.setKeepalive(value);
      break;
    case 2:
      var value = new proto.bragi.MatchMessage;
      reader.readMessage(value,proto.bragi.MatchMessage.deserializeBinaryFromReader);
      msg.setMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.LiveDataFeedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.LiveDataFeedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.LiveDataFeedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.LiveDataFeedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeepalive();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bragi.KeepAlive.serializeBinaryToWriter
    );
  }
  f = message.getMatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bragi.MatchMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeepAlive keepalive = 1;
 * @return {?proto.bragi.KeepAlive}
 */
proto.bragi.LiveDataFeedMessage.prototype.getKeepalive = function() {
  return /** @type{?proto.bragi.KeepAlive} */ (
    jspb.Message.getWrapperField(this, proto.bragi.KeepAlive, 1));
};


/**
 * @param {?proto.bragi.KeepAlive|undefined} value
 * @return {!proto.bragi.LiveDataFeedMessage} returns this
*/
proto.bragi.LiveDataFeedMessage.prototype.setKeepalive = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.bragi.LiveDataFeedMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.LiveDataFeedMessage} returns this
 */
proto.bragi.LiveDataFeedMessage.prototype.clearKeepalive = function() {
  return this.setKeepalive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.LiveDataFeedMessage.prototype.hasKeepalive = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchMessage match = 2;
 * @return {?proto.bragi.MatchMessage}
 */
proto.bragi.LiveDataFeedMessage.prototype.getMatch = function() {
  return /** @type{?proto.bragi.MatchMessage} */ (
    jspb.Message.getWrapperField(this, proto.bragi.MatchMessage, 2));
};


/**
 * @param {?proto.bragi.MatchMessage|undefined} value
 * @return {!proto.bragi.LiveDataFeedMessage} returns this
*/
proto.bragi.LiveDataFeedMessage.prototype.setMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.bragi.LiveDataFeedMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.LiveDataFeedMessage} returns this
 */
proto.bragi.LiveDataFeedMessage.prototype.clearMatch = function() {
  return this.setMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.LiveDataFeedMessage.prototype.hasMatch = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.KeepAlive.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.KeepAlive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.KeepAlive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.KeepAlive.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.KeepAlive}
 */
proto.bragi.KeepAlive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.KeepAlive;
  return proto.bragi.KeepAlive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.KeepAlive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.KeepAlive}
 */
proto.bragi.KeepAlive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.KeepAlive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.KeepAlive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.KeepAlive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.KeepAlive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.bragi.KeepAlive.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.bragi.KeepAlive} returns this
*/
proto.bragi.KeepAlive.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.KeepAlive} returns this
 */
proto.bragi.KeepAlive.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.KeepAlive.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bragi.MatchMessage.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.bragi.MatchMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ANNOUNCEMENT: 1,
  CSGO: 2,
  CSGO_WINGMAN: 3
};

/**
 * @return {proto.bragi.MatchMessage.MessageCase}
 */
proto.bragi.MatchMessage.prototype.getMessageCase = function() {
  return /** @type {proto.bragi.MatchMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.bragi.MatchMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.MatchMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.MatchMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.MatchMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.MatchMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    announcement: (f = msg.getAnnouncement()) && bragi_common_pb.AnnouncementUpdate.toObject(includeInstance, f),
    csgo: (f = msg.getCsgo()) && bragi_csgo_pb.CsgoMatchMessage.toObject(includeInstance, f),
    csgoWingman: (f = msg.getCsgoWingman()) && bragi_csgo_pb.CsgoMatchMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.MatchMessage}
 */
proto.bragi.MatchMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.MatchMessage;
  return proto.bragi.MatchMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.MatchMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.MatchMessage}
 */
proto.bragi.MatchMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bragi_common_pb.AnnouncementUpdate;
      reader.readMessage(value,bragi_common_pb.AnnouncementUpdate.deserializeBinaryFromReader);
      msg.setAnnouncement(value);
      break;
    case 2:
      var value = new bragi_csgo_pb.CsgoMatchMessage;
      reader.readMessage(value,bragi_csgo_pb.CsgoMatchMessage.deserializeBinaryFromReader);
      msg.setCsgo(value);
      break;
    case 3:
      var value = new bragi_csgo_pb.CsgoMatchMessage;
      reader.readMessage(value,bragi_csgo_pb.CsgoMatchMessage.deserializeBinaryFromReader);
      msg.setCsgoWingman(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.MatchMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.MatchMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.MatchMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.MatchMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnouncement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bragi_common_pb.AnnouncementUpdate.serializeBinaryToWriter
    );
  }
  f = message.getCsgo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bragi_csgo_pb.CsgoMatchMessage.serializeBinaryToWriter
    );
  }
  f = message.getCsgoWingman();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      bragi_csgo_pb.CsgoMatchMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional AnnouncementUpdate announcement = 1;
 * @return {?proto.bragi.AnnouncementUpdate}
 */
proto.bragi.MatchMessage.prototype.getAnnouncement = function() {
  return /** @type{?proto.bragi.AnnouncementUpdate} */ (
    jspb.Message.getWrapperField(this, bragi_common_pb.AnnouncementUpdate, 1));
};


/**
 * @param {?proto.bragi.AnnouncementUpdate|undefined} value
 * @return {!proto.bragi.MatchMessage} returns this
*/
proto.bragi.MatchMessage.prototype.setAnnouncement = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.bragi.MatchMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.MatchMessage} returns this
 */
proto.bragi.MatchMessage.prototype.clearAnnouncement = function() {
  return this.setAnnouncement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.MatchMessage.prototype.hasAnnouncement = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CsgoMatchMessage csgo = 2;
 * @return {?proto.bragi.CsgoMatchMessage}
 */
proto.bragi.MatchMessage.prototype.getCsgo = function() {
  return /** @type{?proto.bragi.CsgoMatchMessage} */ (
    jspb.Message.getWrapperField(this, bragi_csgo_pb.CsgoMatchMessage, 2));
};


/**
 * @param {?proto.bragi.CsgoMatchMessage|undefined} value
 * @return {!proto.bragi.MatchMessage} returns this
*/
proto.bragi.MatchMessage.prototype.setCsgo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.bragi.MatchMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.MatchMessage} returns this
 */
proto.bragi.MatchMessage.prototype.clearCsgo = function() {
  return this.setCsgo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.MatchMessage.prototype.hasCsgo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CsgoMatchMessage csgo_wingman = 3;
 * @return {?proto.bragi.CsgoMatchMessage}
 */
proto.bragi.MatchMessage.prototype.getCsgoWingman = function() {
  return /** @type{?proto.bragi.CsgoMatchMessage} */ (
    jspb.Message.getWrapperField(this, bragi_csgo_pb.CsgoMatchMessage, 3));
};


/**
 * @param {?proto.bragi.CsgoMatchMessage|undefined} value
 * @return {!proto.bragi.MatchMessage} returns this
*/
proto.bragi.MatchMessage.prototype.setCsgoWingman = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.bragi.MatchMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.MatchMessage} returns this
 */
proto.bragi.MatchMessage.prototype.clearCsgoWingman = function() {
  return this.setCsgoWingman(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.MatchMessage.prototype.hasCsgoWingman = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bragi.MatchSnapshot.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.bragi.MatchSnapshot.SnapshotCase = {
  SNAPSHOT_NOT_SET: 0,
  CSGO: 1,
  CSGO_WINGMAN: 2
};

/**
 * @return {proto.bragi.MatchSnapshot.SnapshotCase}
 */
proto.bragi.MatchSnapshot.prototype.getSnapshotCase = function() {
  return /** @type {proto.bragi.MatchSnapshot.SnapshotCase} */(jspb.Message.computeOneofCase(this, proto.bragi.MatchSnapshot.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.MatchSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.MatchSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.MatchSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.MatchSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    csgo: (f = msg.getCsgo()) && bragi_csgo_pb.CsgoMatchSnapshot.toObject(includeInstance, f),
    csgoWingman: (f = msg.getCsgoWingman()) && bragi_csgo_pb.CsgoMatchSnapshot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.MatchSnapshot}
 */
proto.bragi.MatchSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.MatchSnapshot;
  return proto.bragi.MatchSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.MatchSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.MatchSnapshot}
 */
proto.bragi.MatchSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bragi_csgo_pb.CsgoMatchSnapshot;
      reader.readMessage(value,bragi_csgo_pb.CsgoMatchSnapshot.deserializeBinaryFromReader);
      msg.setCsgo(value);
      break;
    case 2:
      var value = new bragi_csgo_pb.CsgoMatchSnapshot;
      reader.readMessage(value,bragi_csgo_pb.CsgoMatchSnapshot.deserializeBinaryFromReader);
      msg.setCsgoWingman(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.MatchSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.MatchSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.MatchSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.MatchSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsgo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bragi_csgo_pb.CsgoMatchSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getCsgoWingman();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bragi_csgo_pb.CsgoMatchSnapshot.serializeBinaryToWriter
    );
  }
};


/**
 * optional CsgoMatchSnapshot csgo = 1;
 * @return {?proto.bragi.CsgoMatchSnapshot}
 */
proto.bragi.MatchSnapshot.prototype.getCsgo = function() {
  return /** @type{?proto.bragi.CsgoMatchSnapshot} */ (
    jspb.Message.getWrapperField(this, bragi_csgo_pb.CsgoMatchSnapshot, 1));
};


/**
 * @param {?proto.bragi.CsgoMatchSnapshot|undefined} value
 * @return {!proto.bragi.MatchSnapshot} returns this
*/
proto.bragi.MatchSnapshot.prototype.setCsgo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.bragi.MatchSnapshot.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.MatchSnapshot} returns this
 */
proto.bragi.MatchSnapshot.prototype.clearCsgo = function() {
  return this.setCsgo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.MatchSnapshot.prototype.hasCsgo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CsgoMatchSnapshot csgo_wingman = 2;
 * @return {?proto.bragi.CsgoMatchSnapshot}
 */
proto.bragi.MatchSnapshot.prototype.getCsgoWingman = function() {
  return /** @type{?proto.bragi.CsgoMatchSnapshot} */ (
    jspb.Message.getWrapperField(this, bragi_csgo_pb.CsgoMatchSnapshot, 2));
};


/**
 * @param {?proto.bragi.CsgoMatchSnapshot|undefined} value
 * @return {!proto.bragi.MatchSnapshot} returns this
*/
proto.bragi.MatchSnapshot.prototype.setCsgoWingman = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.bragi.MatchSnapshot.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.MatchSnapshot} returns this
 */
proto.bragi.MatchSnapshot.prototype.clearCsgoWingman = function() {
  return this.setCsgoWingman(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.MatchSnapshot.prototype.hasCsgoWingman = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bragi.MatchState.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.bragi.MatchState.StateCase = {
  STATE_NOT_SET: 0,
  CSGO: 1,
  CSGO_WINGMAN: 2
};

/**
 * @return {proto.bragi.MatchState.StateCase}
 */
proto.bragi.MatchState.prototype.getStateCase = function() {
  return /** @type {proto.bragi.MatchState.StateCase} */(jspb.Message.computeOneofCase(this, proto.bragi.MatchState.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.MatchState.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.MatchState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.MatchState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.MatchState.toObject = function(includeInstance, msg) {
  var f, obj = {
    csgo: (f = msg.getCsgo()) && bragi_csgo_pb.CsgoMatchState.toObject(includeInstance, f),
    csgoWingman: (f = msg.getCsgoWingman()) && bragi_csgo_pb.CsgoMatchState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.MatchState}
 */
proto.bragi.MatchState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.MatchState;
  return proto.bragi.MatchState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.MatchState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.MatchState}
 */
proto.bragi.MatchState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new bragi_csgo_pb.CsgoMatchState;
      reader.readMessage(value,bragi_csgo_pb.CsgoMatchState.deserializeBinaryFromReader);
      msg.setCsgo(value);
      break;
    case 2:
      var value = new bragi_csgo_pb.CsgoMatchState;
      reader.readMessage(value,bragi_csgo_pb.CsgoMatchState.deserializeBinaryFromReader);
      msg.setCsgoWingman(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.MatchState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.MatchState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.MatchState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.MatchState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCsgo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      bragi_csgo_pb.CsgoMatchState.serializeBinaryToWriter
    );
  }
  f = message.getCsgoWingman();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      bragi_csgo_pb.CsgoMatchState.serializeBinaryToWriter
    );
  }
};


/**
 * optional CsgoMatchState csgo = 1;
 * @return {?proto.bragi.CsgoMatchState}
 */
proto.bragi.MatchState.prototype.getCsgo = function() {
  return /** @type{?proto.bragi.CsgoMatchState} */ (
    jspb.Message.getWrapperField(this, bragi_csgo_pb.CsgoMatchState, 1));
};


/**
 * @param {?proto.bragi.CsgoMatchState|undefined} value
 * @return {!proto.bragi.MatchState} returns this
*/
proto.bragi.MatchState.prototype.setCsgo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.bragi.MatchState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.MatchState} returns this
 */
proto.bragi.MatchState.prototype.clearCsgo = function() {
  return this.setCsgo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.MatchState.prototype.hasCsgo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CsgoMatchState csgo_wingman = 2;
 * @return {?proto.bragi.CsgoMatchState}
 */
proto.bragi.MatchState.prototype.getCsgoWingman = function() {
  return /** @type{?proto.bragi.CsgoMatchState} */ (
    jspb.Message.getWrapperField(this, bragi_csgo_pb.CsgoMatchState, 2));
};


/**
 * @param {?proto.bragi.CsgoMatchState|undefined} value
 * @return {!proto.bragi.MatchState} returns this
*/
proto.bragi.MatchState.prototype.setCsgoWingman = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.bragi.MatchState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.MatchState} returns this
 */
proto.bragi.MatchState.prototype.clearCsgoWingman = function() {
  return this.setCsgoWingman(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.MatchState.prototype.hasCsgoWingman = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.bragi);
