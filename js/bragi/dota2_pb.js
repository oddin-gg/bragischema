// source: bragi/dota2.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var bragi_common_pb = require('../bragi/common_pb.js');
goog.object.extend(proto, bragi_common_pb);
goog.exportSymbol('proto.bragi.Dota2BarrackType', null, global);
goog.exportSymbol('proto.bragi.Dota2Faction', null, global);
goog.exportSymbol('proto.bragi.Dota2Lane', null, global);
goog.exportSymbol('proto.bragi.Dota2MapScoreboard', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchMessage', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchMessage.Payload', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchMessage.Payload.PayloadCase', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchScoreboard', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchSnapshot', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchState', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchUpdate', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchUpdate.Payload', null, global);
goog.exportSymbol('proto.bragi.Dota2MatchUpdate.Payload.PayloadCase', null, global);
goog.exportSymbol('proto.bragi.Dota2Minimap', null, global);
goog.exportSymbol('proto.bragi.Dota2MinimapBarrack', null, global);
goog.exportSymbol('proto.bragi.Dota2MinimapTower', null, global);
goog.exportSymbol('proto.bragi.Dota2PlayerScoreboard', null, global);
goog.exportSymbol('proto.bragi.Dota2TeamScoreboard', null, global);
goog.exportSymbol('proto.bragi.Dota2TowerTier', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MatchMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.Dota2MatchMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MatchMessage.displayName = 'proto.bragi.Dota2MatchMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MatchMessage.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bragi.Dota2MatchMessage.Payload.oneofGroups_);
};
goog.inherits(proto.bragi.Dota2MatchMessage.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MatchMessage.Payload.displayName = 'proto.bragi.Dota2MatchMessage.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MatchSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bragi.Dota2MatchSnapshot.repeatedFields_, null);
};
goog.inherits(proto.bragi.Dota2MatchSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MatchSnapshot.displayName = 'proto.bragi.Dota2MatchSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MatchUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.Dota2MatchUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MatchUpdate.displayName = 'proto.bragi.Dota2MatchUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MatchUpdate.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.bragi.Dota2MatchUpdate.Payload.oneofGroups_);
};
goog.inherits(proto.bragi.Dota2MatchUpdate.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MatchUpdate.Payload.displayName = 'proto.bragi.Dota2MatchUpdate.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MatchState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.Dota2MatchState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MatchState.displayName = 'proto.bragi.Dota2MatchState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MatchScoreboard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bragi.Dota2MatchScoreboard.repeatedFields_, null);
};
goog.inherits(proto.bragi.Dota2MatchScoreboard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MatchScoreboard.displayName = 'proto.bragi.Dota2MatchScoreboard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MapScoreboard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.Dota2MapScoreboard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MapScoreboard.displayName = 'proto.bragi.Dota2MapScoreboard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2TeamScoreboard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bragi.Dota2TeamScoreboard.repeatedFields_, null);
};
goog.inherits(proto.bragi.Dota2TeamScoreboard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2TeamScoreboard.displayName = 'proto.bragi.Dota2TeamScoreboard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2PlayerScoreboard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.Dota2PlayerScoreboard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2PlayerScoreboard.displayName = 'proto.bragi.Dota2PlayerScoreboard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2Minimap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bragi.Dota2Minimap.repeatedFields_, null);
};
goog.inherits(proto.bragi.Dota2Minimap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2Minimap.displayName = 'proto.bragi.Dota2Minimap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MinimapTower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.Dota2MinimapTower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MinimapTower.displayName = 'proto.bragi.Dota2MinimapTower';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bragi.Dota2MinimapBarrack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bragi.Dota2MinimapBarrack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bragi.Dota2MinimapBarrack.displayName = 'proto.bragi.Dota2MinimapBarrack';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MatchMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MatchMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MatchMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchUrn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    dataStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    payload: (f = msg.getPayload()) && proto.bragi.Dota2MatchMessage.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MatchMessage}
 */
proto.bragi.Dota2MatchMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MatchMessage;
  return proto.bragi.Dota2MatchMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MatchMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MatchMessage}
 */
proto.bragi.Dota2MatchMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchUrn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!proto.bragi.DataStatus} */ (reader.readEnum());
      msg.setDataStatus(value);
      break;
    case 4:
      var value = new proto.bragi.Dota2MatchMessage.Payload;
      reader.readMessage(value,proto.bragi.Dota2MatchMessage.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MatchMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MatchMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MatchMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchUrn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDataStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bragi.Dota2MatchMessage.Payload.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bragi.Dota2MatchMessage.Payload.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.bragi.Dota2MatchMessage.Payload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  SNAPSHOT: 1,
  UPDATE: 2
};

/**
 * @return {proto.bragi.Dota2MatchMessage.Payload.PayloadCase}
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.getPayloadCase = function() {
  return /** @type {proto.bragi.Dota2MatchMessage.Payload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.bragi.Dota2MatchMessage.Payload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MatchMessage.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MatchMessage.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchMessage.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    snapshot: (f = msg.getSnapshot()) && proto.bragi.Dota2MatchSnapshot.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.bragi.Dota2MatchUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MatchMessage.Payload}
 */
proto.bragi.Dota2MatchMessage.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MatchMessage.Payload;
  return proto.bragi.Dota2MatchMessage.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MatchMessage.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MatchMessage.Payload}
 */
proto.bragi.Dota2MatchMessage.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bragi.Dota2MatchSnapshot;
      reader.readMessage(value,proto.bragi.Dota2MatchSnapshot.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 2:
      var value = new proto.bragi.Dota2MatchUpdate;
      reader.readMessage(value,proto.bragi.Dota2MatchUpdate.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MatchMessage.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MatchMessage.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchMessage.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bragi.Dota2MatchSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bragi.Dota2MatchUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Dota2MatchSnapshot snapshot = 1;
 * @return {?proto.bragi.Dota2MatchSnapshot}
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.getSnapshot = function() {
  return /** @type{?proto.bragi.Dota2MatchSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2MatchSnapshot, 1));
};


/**
 * @param {?proto.bragi.Dota2MatchSnapshot|undefined} value
 * @return {!proto.bragi.Dota2MatchMessage.Payload} returns this
*/
proto.bragi.Dota2MatchMessage.Payload.prototype.setSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.bragi.Dota2MatchMessage.Payload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchMessage.Payload} returns this
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Dota2MatchUpdate update = 2;
 * @return {?proto.bragi.Dota2MatchUpdate}
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.getUpdate = function() {
  return /** @type{?proto.bragi.Dota2MatchUpdate} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2MatchUpdate, 2));
};


/**
 * @param {?proto.bragi.Dota2MatchUpdate|undefined} value
 * @return {!proto.bragi.Dota2MatchMessage.Payload} returns this
*/
proto.bragi.Dota2MatchMessage.Payload.prototype.setUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.bragi.Dota2MatchMessage.Payload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchMessage.Payload} returns this
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchMessage.Payload.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string match_urn = 1;
 * @return {string}
 */
proto.bragi.Dota2MatchMessage.prototype.getMatchUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bragi.Dota2MatchMessage} returns this
 */
proto.bragi.Dota2MatchMessage.prototype.setMatchUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 sequence = 2;
 * @return {number}
 */
proto.bragi.Dota2MatchMessage.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2MatchMessage} returns this
 */
proto.bragi.Dota2MatchMessage.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.bragi.Dota2MatchMessage.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.bragi.Dota2MatchMessage} returns this
*/
proto.bragi.Dota2MatchMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchMessage} returns this
 */
proto.bragi.Dota2MatchMessage.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataStatus data_status = 5;
 * @return {!proto.bragi.DataStatus}
 */
proto.bragi.Dota2MatchMessage.prototype.getDataStatus = function() {
  return /** @type {!proto.bragi.DataStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.bragi.DataStatus} value
 * @return {!proto.bragi.Dota2MatchMessage} returns this
 */
proto.bragi.Dota2MatchMessage.prototype.setDataStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Payload payload = 4;
 * @return {?proto.bragi.Dota2MatchMessage.Payload}
 */
proto.bragi.Dota2MatchMessage.prototype.getPayload = function() {
  return /** @type{?proto.bragi.Dota2MatchMessage.Payload} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2MatchMessage.Payload, 4));
};


/**
 * @param {?proto.bragi.Dota2MatchMessage.Payload|undefined} value
 * @return {!proto.bragi.Dota2MatchMessage} returns this
*/
proto.bragi.Dota2MatchMessage.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchMessage} returns this
 */
proto.bragi.Dota2MatchMessage.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bragi.Dota2MatchSnapshot.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MatchSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MatchSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MatchSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchUrn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    dataStatus: jspb.Message.getFieldWithDefault(msg, 6, 0),
    announcementsList: jspb.Message.toObjectList(msg.getAnnouncementsList(),
    bragi_common_pb.Announcement.toObject, includeInstance),
    matchState: (f = msg.getMatchState()) && proto.bragi.Dota2MatchState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MatchSnapshot}
 */
proto.bragi.Dota2MatchSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MatchSnapshot;
  return proto.bragi.Dota2MatchSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MatchSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MatchSnapshot}
 */
proto.bragi.Dota2MatchSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchUrn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {!proto.bragi.DataStatus} */ (reader.readEnum());
      msg.setDataStatus(value);
      break;
    case 4:
      var value = new bragi_common_pb.Announcement;
      reader.readMessage(value,bragi_common_pb.Announcement.deserializeBinaryFromReader);
      msg.addAnnouncements(value);
      break;
    case 5:
      var value = new proto.bragi.Dota2MatchState;
      reader.readMessage(value,proto.bragi.Dota2MatchState.deserializeBinaryFromReader);
      msg.setMatchState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MatchSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MatchSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MatchSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchUrn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDataStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getAnnouncementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      bragi_common_pb.Announcement.serializeBinaryToWriter
    );
  }
  f = message.getMatchState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.bragi.Dota2MatchState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string match_urn = 1;
 * @return {string}
 */
proto.bragi.Dota2MatchSnapshot.prototype.getMatchUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
 */
proto.bragi.Dota2MatchSnapshot.prototype.setMatchUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 sequence = 2;
 * @return {number}
 */
proto.bragi.Dota2MatchSnapshot.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
 */
proto.bragi.Dota2MatchSnapshot.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.bragi.Dota2MatchSnapshot.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
*/
proto.bragi.Dota2MatchSnapshot.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
 */
proto.bragi.Dota2MatchSnapshot.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchSnapshot.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataStatus data_status = 6;
 * @return {!proto.bragi.DataStatus}
 */
proto.bragi.Dota2MatchSnapshot.prototype.getDataStatus = function() {
  return /** @type {!proto.bragi.DataStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.bragi.DataStatus} value
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
 */
proto.bragi.Dota2MatchSnapshot.prototype.setDataStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * repeated Announcement announcements = 4;
 * @return {!Array<!proto.bragi.Announcement>}
 */
proto.bragi.Dota2MatchSnapshot.prototype.getAnnouncementsList = function() {
  return /** @type{!Array<!proto.bragi.Announcement>} */ (
    jspb.Message.getRepeatedWrapperField(this, bragi_common_pb.Announcement, 4));
};


/**
 * @param {!Array<!proto.bragi.Announcement>} value
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
*/
proto.bragi.Dota2MatchSnapshot.prototype.setAnnouncementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.bragi.Announcement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bragi.Announcement}
 */
proto.bragi.Dota2MatchSnapshot.prototype.addAnnouncements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bragi.Announcement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
 */
proto.bragi.Dota2MatchSnapshot.prototype.clearAnnouncementsList = function() {
  return this.setAnnouncementsList([]);
};


/**
 * optional Dota2MatchState match_state = 5;
 * @return {?proto.bragi.Dota2MatchState}
 */
proto.bragi.Dota2MatchSnapshot.prototype.getMatchState = function() {
  return /** @type{?proto.bragi.Dota2MatchState} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2MatchState, 5));
};


/**
 * @param {?proto.bragi.Dota2MatchState|undefined} value
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
*/
proto.bragi.Dota2MatchSnapshot.prototype.setMatchState = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchSnapshot} returns this
 */
proto.bragi.Dota2MatchSnapshot.prototype.clearMatchState = function() {
  return this.setMatchState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchSnapshot.prototype.hasMatchState = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MatchUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MatchUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MatchUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.bragi.Dota2MatchUpdate.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MatchUpdate}
 */
proto.bragi.Dota2MatchUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MatchUpdate;
  return proto.bragi.Dota2MatchUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MatchUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MatchUpdate}
 */
proto.bragi.Dota2MatchUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bragi.Dota2MatchUpdate.Payload;
      reader.readMessage(value,proto.bragi.Dota2MatchUpdate.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MatchUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MatchUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MatchUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bragi.Dota2MatchUpdate.Payload.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.bragi.Dota2MatchUpdate.Payload.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.bragi.Dota2MatchUpdate.Payload.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  MATCH_STATE: 1
};

/**
 * @return {proto.bragi.Dota2MatchUpdate.Payload.PayloadCase}
 */
proto.bragi.Dota2MatchUpdate.Payload.prototype.getPayloadCase = function() {
  return /** @type {proto.bragi.Dota2MatchUpdate.Payload.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.bragi.Dota2MatchUpdate.Payload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MatchUpdate.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MatchUpdate.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MatchUpdate.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchUpdate.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchState: (f = msg.getMatchState()) && proto.bragi.Dota2MatchState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MatchUpdate.Payload}
 */
proto.bragi.Dota2MatchUpdate.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MatchUpdate.Payload;
  return proto.bragi.Dota2MatchUpdate.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MatchUpdate.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MatchUpdate.Payload}
 */
proto.bragi.Dota2MatchUpdate.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bragi.Dota2MatchState;
      reader.readMessage(value,proto.bragi.Dota2MatchState.deserializeBinaryFromReader);
      msg.setMatchState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MatchUpdate.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MatchUpdate.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MatchUpdate.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchUpdate.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bragi.Dota2MatchState.serializeBinaryToWriter
    );
  }
};


/**
 * optional Dota2MatchState match_state = 1;
 * @return {?proto.bragi.Dota2MatchState}
 */
proto.bragi.Dota2MatchUpdate.Payload.prototype.getMatchState = function() {
  return /** @type{?proto.bragi.Dota2MatchState} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2MatchState, 1));
};


/**
 * @param {?proto.bragi.Dota2MatchState|undefined} value
 * @return {!proto.bragi.Dota2MatchUpdate.Payload} returns this
*/
proto.bragi.Dota2MatchUpdate.Payload.prototype.setMatchState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.bragi.Dota2MatchUpdate.Payload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchUpdate.Payload} returns this
 */
proto.bragi.Dota2MatchUpdate.Payload.prototype.clearMatchState = function() {
  return this.setMatchState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchUpdate.Payload.prototype.hasMatchState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Payload payload = 1;
 * @return {?proto.bragi.Dota2MatchUpdate.Payload}
 */
proto.bragi.Dota2MatchUpdate.prototype.getPayload = function() {
  return /** @type{?proto.bragi.Dota2MatchUpdate.Payload} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2MatchUpdate.Payload, 1));
};


/**
 * @param {?proto.bragi.Dota2MatchUpdate.Payload|undefined} value
 * @return {!proto.bragi.Dota2MatchUpdate} returns this
*/
proto.bragi.Dota2MatchUpdate.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchUpdate} returns this
 */
proto.bragi.Dota2MatchUpdate.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchUpdate.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MatchState.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MatchState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MatchState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchState.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchUrn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scoreboard: (f = msg.getScoreboard()) && proto.bragi.Dota2MatchScoreboard.toObject(includeInstance, f),
    minimap: (f = msg.getMinimap()) && proto.bragi.Dota2Minimap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MatchState}
 */
proto.bragi.Dota2MatchState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MatchState;
  return proto.bragi.Dota2MatchState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MatchState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MatchState}
 */
proto.bragi.Dota2MatchState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchUrn(value);
      break;
    case 2:
      var value = new proto.bragi.Dota2MatchScoreboard;
      reader.readMessage(value,proto.bragi.Dota2MatchScoreboard.deserializeBinaryFromReader);
      msg.setScoreboard(value);
      break;
    case 3:
      var value = new proto.bragi.Dota2Minimap;
      reader.readMessage(value,proto.bragi.Dota2Minimap.deserializeBinaryFromReader);
      msg.setMinimap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MatchState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MatchState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MatchState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchUrn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScoreboard();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bragi.Dota2MatchScoreboard.serializeBinaryToWriter
    );
  }
  f = message.getMinimap();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bragi.Dota2Minimap.serializeBinaryToWriter
    );
  }
};


/**
 * optional string match_urn = 1;
 * @return {string}
 */
proto.bragi.Dota2MatchState.prototype.getMatchUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bragi.Dota2MatchState} returns this
 */
proto.bragi.Dota2MatchState.prototype.setMatchUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Dota2MatchScoreboard scoreboard = 2;
 * @return {?proto.bragi.Dota2MatchScoreboard}
 */
proto.bragi.Dota2MatchState.prototype.getScoreboard = function() {
  return /** @type{?proto.bragi.Dota2MatchScoreboard} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2MatchScoreboard, 2));
};


/**
 * @param {?proto.bragi.Dota2MatchScoreboard|undefined} value
 * @return {!proto.bragi.Dota2MatchState} returns this
*/
proto.bragi.Dota2MatchState.prototype.setScoreboard = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchState} returns this
 */
proto.bragi.Dota2MatchState.prototype.clearScoreboard = function() {
  return this.setScoreboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchState.prototype.hasScoreboard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Dota2Minimap minimap = 3;
 * @return {?proto.bragi.Dota2Minimap}
 */
proto.bragi.Dota2MatchState.prototype.getMinimap = function() {
  return /** @type{?proto.bragi.Dota2Minimap} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2Minimap, 3));
};


/**
 * @param {?proto.bragi.Dota2Minimap|undefined} value
 * @return {!proto.bragi.Dota2MatchState} returns this
*/
proto.bragi.Dota2MatchState.prototype.setMinimap = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchState} returns this
 */
proto.bragi.Dota2MatchState.prototype.clearMinimap = function() {
  return this.setMinimap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchState.prototype.hasMinimap = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bragi.Dota2MatchScoreboard.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MatchScoreboard.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MatchScoreboard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MatchScoreboard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchScoreboard.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchUrn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mapPaused: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    homeTeamUrn: jspb.Message.getFieldWithDefault(msg, 3, 0),
    awayTeamUrn: jspb.Message.getFieldWithDefault(msg, 4, 0),
    homeScore: jspb.Message.getFieldWithDefault(msg, 5, 0),
    awayScore: jspb.Message.getFieldWithDefault(msg, 6, 0),
    matchStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    currentMap: (f = msg.getCurrentMap()) && proto.bragi.Dota2MapScoreboard.toObject(includeInstance, f),
    previousMapsList: jspb.Message.toObjectList(msg.getPreviousMapsList(),
    proto.bragi.Dota2MapScoreboard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MatchScoreboard}
 */
proto.bragi.Dota2MatchScoreboard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MatchScoreboard;
  return proto.bragi.Dota2MatchScoreboard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MatchScoreboard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MatchScoreboard}
 */
proto.bragi.Dota2MatchScoreboard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchUrn(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMapPaused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHomeTeamUrn(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAwayTeamUrn(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHomeScore(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAwayScore(value);
      break;
    case 7:
      var value = /** @type {!proto.bragi.MatchStatusType} */ (reader.readEnum());
      msg.setMatchStatus(value);
      break;
    case 8:
      var value = new proto.bragi.Dota2MapScoreboard;
      reader.readMessage(value,proto.bragi.Dota2MapScoreboard.deserializeBinaryFromReader);
      msg.setCurrentMap(value);
      break;
    case 9:
      var value = new proto.bragi.Dota2MapScoreboard;
      reader.readMessage(value,proto.bragi.Dota2MapScoreboard.deserializeBinaryFromReader);
      msg.addPreviousMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MatchScoreboard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MatchScoreboard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MatchScoreboard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MatchScoreboard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchUrn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMapPaused();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getHomeTeamUrn();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAwayTeamUrn();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getHomeScore();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getAwayScore();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMatchStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getCurrentMap();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.bragi.Dota2MapScoreboard.serializeBinaryToWriter
    );
  }
  f = message.getPreviousMapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.bragi.Dota2MapScoreboard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string match_urn = 1;
 * @return {string}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getMatchUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.setMatchUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool map_paused = 2;
 * @return {boolean}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getMapPaused = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.setMapPaused = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 home_team_urn = 3;
 * @return {number}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getHomeTeamUrn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.setHomeTeamUrn = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 away_team_urn = 4;
 * @return {number}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getAwayTeamUrn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.setAwayTeamUrn = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 home_score = 5;
 * @return {number}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getHomeScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.setHomeScore = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 away_score = 6;
 * @return {number}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getAwayScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.setAwayScore = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional MatchStatusType match_status = 7;
 * @return {!proto.bragi.MatchStatusType}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getMatchStatus = function() {
  return /** @type {!proto.bragi.MatchStatusType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.bragi.MatchStatusType} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.setMatchStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Dota2MapScoreboard current_map = 8;
 * @return {?proto.bragi.Dota2MapScoreboard}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getCurrentMap = function() {
  return /** @type{?proto.bragi.Dota2MapScoreboard} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2MapScoreboard, 8));
};


/**
 * @param {?proto.bragi.Dota2MapScoreboard|undefined} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
*/
proto.bragi.Dota2MatchScoreboard.prototype.setCurrentMap = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.clearCurrentMap = function() {
  return this.setCurrentMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MatchScoreboard.prototype.hasCurrentMap = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated Dota2MapScoreboard previous_maps = 9;
 * @return {!Array<!proto.bragi.Dota2MapScoreboard>}
 */
proto.bragi.Dota2MatchScoreboard.prototype.getPreviousMapsList = function() {
  return /** @type{!Array<!proto.bragi.Dota2MapScoreboard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bragi.Dota2MapScoreboard, 9));
};


/**
 * @param {!Array<!proto.bragi.Dota2MapScoreboard>} value
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
*/
proto.bragi.Dota2MatchScoreboard.prototype.setPreviousMapsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.bragi.Dota2MapScoreboard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bragi.Dota2MapScoreboard}
 */
proto.bragi.Dota2MatchScoreboard.prototype.addPreviousMaps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.bragi.Dota2MapScoreboard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bragi.Dota2MatchScoreboard} returns this
 */
proto.bragi.Dota2MatchScoreboard.prototype.clearPreviousMapsList = function() {
  return this.setPreviousMapsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MapScoreboard.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MapScoreboard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MapScoreboard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MapScoreboard.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapOrder: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameTime: (f = msg.getGameTime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    homeTeam: (f = msg.getHomeTeam()) && proto.bragi.Dota2TeamScoreboard.toObject(includeInstance, f),
    awayTeam: (f = msg.getAwayTeam()) && proto.bragi.Dota2TeamScoreboard.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MapScoreboard}
 */
proto.bragi.Dota2MapScoreboard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MapScoreboard;
  return proto.bragi.Dota2MapScoreboard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MapScoreboard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MapScoreboard}
 */
proto.bragi.Dota2MapScoreboard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMapOrder(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setGameTime(value);
      break;
    case 3:
      var value = new proto.bragi.Dota2TeamScoreboard;
      reader.readMessage(value,proto.bragi.Dota2TeamScoreboard.deserializeBinaryFromReader);
      msg.setHomeTeam(value);
      break;
    case 4:
      var value = new proto.bragi.Dota2TeamScoreboard;
      reader.readMessage(value,proto.bragi.Dota2TeamScoreboard.deserializeBinaryFromReader);
      msg.setAwayTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MapScoreboard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MapScoreboard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MapScoreboard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MapScoreboard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapOrder();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGameTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getHomeTeam();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bragi.Dota2TeamScoreboard.serializeBinaryToWriter
    );
  }
  f = message.getAwayTeam();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.bragi.Dota2TeamScoreboard.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 map_order = 1;
 * @return {number}
 */
proto.bragi.Dota2MapScoreboard.prototype.getMapOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2MapScoreboard} returns this
 */
proto.bragi.Dota2MapScoreboard.prototype.setMapOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Duration game_time = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.bragi.Dota2MapScoreboard.prototype.getGameTime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.bragi.Dota2MapScoreboard} returns this
*/
proto.bragi.Dota2MapScoreboard.prototype.setGameTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MapScoreboard} returns this
 */
proto.bragi.Dota2MapScoreboard.prototype.clearGameTime = function() {
  return this.setGameTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MapScoreboard.prototype.hasGameTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Dota2TeamScoreboard home_team = 3;
 * @return {?proto.bragi.Dota2TeamScoreboard}
 */
proto.bragi.Dota2MapScoreboard.prototype.getHomeTeam = function() {
  return /** @type{?proto.bragi.Dota2TeamScoreboard} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2TeamScoreboard, 3));
};


/**
 * @param {?proto.bragi.Dota2TeamScoreboard|undefined} value
 * @return {!proto.bragi.Dota2MapScoreboard} returns this
*/
proto.bragi.Dota2MapScoreboard.prototype.setHomeTeam = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MapScoreboard} returns this
 */
proto.bragi.Dota2MapScoreboard.prototype.clearHomeTeam = function() {
  return this.setHomeTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MapScoreboard.prototype.hasHomeTeam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Dota2TeamScoreboard away_team = 4;
 * @return {?proto.bragi.Dota2TeamScoreboard}
 */
proto.bragi.Dota2MapScoreboard.prototype.getAwayTeam = function() {
  return /** @type{?proto.bragi.Dota2TeamScoreboard} */ (
    jspb.Message.getWrapperField(this, proto.bragi.Dota2TeamScoreboard, 4));
};


/**
 * @param {?proto.bragi.Dota2TeamScoreboard|undefined} value
 * @return {!proto.bragi.Dota2MapScoreboard} returns this
*/
proto.bragi.Dota2MapScoreboard.prototype.setAwayTeam = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2MapScoreboard} returns this
 */
proto.bragi.Dota2MapScoreboard.prototype.clearAwayTeam = function() {
  return this.setAwayTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2MapScoreboard.prototype.hasAwayTeam = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bragi.Dota2TeamScoreboard.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2TeamScoreboard.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2TeamScoreboard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2TeamScoreboard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2TeamScoreboard.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamUrn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    faction: jspb.Message.getFieldWithDefault(msg, 3, 0),
    barracks: jspb.Message.getFieldWithDefault(msg, 4, 0),
    kills: jspb.Message.getFieldWithDefault(msg, 5, 0),
    netWorth: jspb.Message.getFieldWithDefault(msg, 6, 0),
    roshans: jspb.Message.getFieldWithDefault(msg, 7, 0),
    towers: jspb.Message.getFieldWithDefault(msg, 8, 0),
    won: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.bragi.Dota2PlayerScoreboard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2TeamScoreboard}
 */
proto.bragi.Dota2TeamScoreboard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2TeamScoreboard;
  return proto.bragi.Dota2TeamScoreboard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2TeamScoreboard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2TeamScoreboard}
 */
proto.bragi.Dota2TeamScoreboard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeamUrn(value);
      break;
    case 3:
      var value = /** @type {!proto.bragi.Dota2Faction} */ (reader.readEnum());
      msg.setFaction(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBarracks(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKills(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNetWorth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoshans(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTowers(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWon(value);
      break;
    case 10:
      var value = new proto.bragi.Dota2PlayerScoreboard;
      reader.readMessage(value,proto.bragi.Dota2PlayerScoreboard.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2TeamScoreboard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2TeamScoreboard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2TeamScoreboard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2TeamScoreboard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamUrn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFaction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getBarracks();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getKills();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getNetWorth();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRoshans();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTowers();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.bragi.Dota2PlayerScoreboard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string team_urn = 2;
 * @return {string}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getTeamUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.setTeamUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Dota2Faction faction = 3;
 * @return {!proto.bragi.Dota2Faction}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getFaction = function() {
  return /** @type {!proto.bragi.Dota2Faction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bragi.Dota2Faction} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.setFaction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 barracks = 4;
 * @return {number}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getBarracks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.setBarracks = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 kills = 5;
 * @return {number}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getKills = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.setKills = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 net_worth = 6;
 * @return {number}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getNetWorth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.setNetWorth = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 roshans = 7;
 * @return {number}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getRoshans = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.setRoshans = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 towers = 8;
 * @return {number}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getTowers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.setTowers = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool won = 9;
 * @return {boolean}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getWon = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.setWon = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.clearWon = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2TeamScoreboard.prototype.hasWon = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated Dota2PlayerScoreboard players = 10;
 * @return {!Array<!proto.bragi.Dota2PlayerScoreboard>}
 */
proto.bragi.Dota2TeamScoreboard.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.bragi.Dota2PlayerScoreboard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bragi.Dota2PlayerScoreboard, 10));
};


/**
 * @param {!Array<!proto.bragi.Dota2PlayerScoreboard>} value
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
*/
proto.bragi.Dota2TeamScoreboard.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.bragi.Dota2PlayerScoreboard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bragi.Dota2PlayerScoreboard}
 */
proto.bragi.Dota2TeamScoreboard.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.bragi.Dota2PlayerScoreboard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bragi.Dota2TeamScoreboard} returns this
 */
proto.bragi.Dota2TeamScoreboard.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2PlayerScoreboard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2PlayerScoreboard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2PlayerScoreboard.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerUrn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    slotId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    extName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    heroId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hasAegis: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    respawnTimer: (f = msg.getRespawnTimer()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    assists: jspb.Message.getFieldWithDefault(msg, 6, 0),
    deaths: jspb.Message.getFieldWithDefault(msg, 7, 0),
    kills: jspb.Message.getFieldWithDefault(msg, 8, 0),
    netWorth: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2PlayerScoreboard}
 */
proto.bragi.Dota2PlayerScoreboard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2PlayerScoreboard;
  return proto.bragi.Dota2PlayerScoreboard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2PlayerScoreboard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2PlayerScoreboard}
 */
proto.bragi.Dota2PlayerScoreboard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerUrn(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlotId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeroId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasAegis(value);
      break;
    case 5:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setRespawnTimer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssists(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeaths(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKills(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNetWorth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2PlayerScoreboard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2PlayerScoreboard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2PlayerScoreboard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerUrn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlotId();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getExtName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeroId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHasAegis();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRespawnTimer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getAssists();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getDeaths();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getKills();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getNetWorth();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional string player_urn = 1;
 * @return {string}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getPlayerUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setPlayerUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 slot_id = 10;
 * @return {number}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getSlotId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setSlotId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string ext_name = 2;
 * @return {string}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getExtName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setExtName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 hero_id = 3;
 * @return {number}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getHeroId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setHeroId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool has_aegis = 4;
 * @return {boolean}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getHasAegis = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setHasAegis = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional google.protobuf.Duration respawn_timer = 5;
 * @return {?proto.google.protobuf.Duration}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getRespawnTimer = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 5));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
*/
proto.bragi.Dota2PlayerScoreboard.prototype.setRespawnTimer = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.clearRespawnTimer = function() {
  return this.setRespawnTimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.hasRespawnTimer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 assists = 6;
 * @return {number}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getAssists = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setAssists = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 deaths = 7;
 * @return {number}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getDeaths = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setDeaths = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 kills = 8;
 * @return {number}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getKills = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setKills = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 net_worth = 9;
 * @return {number}
 */
proto.bragi.Dota2PlayerScoreboard.prototype.getNetWorth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2PlayerScoreboard} returns this
 */
proto.bragi.Dota2PlayerScoreboard.prototype.setNetWorth = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bragi.Dota2Minimap.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2Minimap.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2Minimap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2Minimap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2Minimap.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchUrn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mapOrder: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mapPaused: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    towersList: jspb.Message.toObjectList(msg.getTowersList(),
    proto.bragi.Dota2MinimapTower.toObject, includeInstance),
    barracksList: jspb.Message.toObjectList(msg.getBarracksList(),
    proto.bragi.Dota2MinimapBarrack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2Minimap}
 */
proto.bragi.Dota2Minimap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2Minimap;
  return proto.bragi.Dota2Minimap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2Minimap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2Minimap}
 */
proto.bragi.Dota2Minimap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchUrn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMapOrder(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMapPaused(value);
      break;
    case 4:
      var value = new proto.bragi.Dota2MinimapTower;
      reader.readMessage(value,proto.bragi.Dota2MinimapTower.deserializeBinaryFromReader);
      msg.addTowers(value);
      break;
    case 5:
      var value = new proto.bragi.Dota2MinimapBarrack;
      reader.readMessage(value,proto.bragi.Dota2MinimapBarrack.deserializeBinaryFromReader);
      msg.addBarracks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2Minimap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2Minimap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2Minimap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2Minimap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchUrn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMapOrder();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMapPaused();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTowersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.bragi.Dota2MinimapTower.serializeBinaryToWriter
    );
  }
  f = message.getBarracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.bragi.Dota2MinimapBarrack.serializeBinaryToWriter
    );
  }
};


/**
 * optional string match_urn = 1;
 * @return {string}
 */
proto.bragi.Dota2Minimap.prototype.getMatchUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bragi.Dota2Minimap} returns this
 */
proto.bragi.Dota2Minimap.prototype.setMatchUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 map_order = 2;
 * @return {number}
 */
proto.bragi.Dota2Minimap.prototype.getMapOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bragi.Dota2Minimap} returns this
 */
proto.bragi.Dota2Minimap.prototype.setMapOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool map_paused = 3;
 * @return {boolean}
 */
proto.bragi.Dota2Minimap.prototype.getMapPaused = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bragi.Dota2Minimap} returns this
 */
proto.bragi.Dota2Minimap.prototype.setMapPaused = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated Dota2MinimapTower towers = 4;
 * @return {!Array<!proto.bragi.Dota2MinimapTower>}
 */
proto.bragi.Dota2Minimap.prototype.getTowersList = function() {
  return /** @type{!Array<!proto.bragi.Dota2MinimapTower>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bragi.Dota2MinimapTower, 4));
};


/**
 * @param {!Array<!proto.bragi.Dota2MinimapTower>} value
 * @return {!proto.bragi.Dota2Minimap} returns this
*/
proto.bragi.Dota2Minimap.prototype.setTowersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.bragi.Dota2MinimapTower=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bragi.Dota2MinimapTower}
 */
proto.bragi.Dota2Minimap.prototype.addTowers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bragi.Dota2MinimapTower, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bragi.Dota2Minimap} returns this
 */
proto.bragi.Dota2Minimap.prototype.clearTowersList = function() {
  return this.setTowersList([]);
};


/**
 * repeated Dota2MinimapBarrack barracks = 5;
 * @return {!Array<!proto.bragi.Dota2MinimapBarrack>}
 */
proto.bragi.Dota2Minimap.prototype.getBarracksList = function() {
  return /** @type{!Array<!proto.bragi.Dota2MinimapBarrack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bragi.Dota2MinimapBarrack, 5));
};


/**
 * @param {!Array<!proto.bragi.Dota2MinimapBarrack>} value
 * @return {!proto.bragi.Dota2Minimap} returns this
*/
proto.bragi.Dota2Minimap.prototype.setBarracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.bragi.Dota2MinimapBarrack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bragi.Dota2MinimapBarrack}
 */
proto.bragi.Dota2Minimap.prototype.addBarracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bragi.Dota2MinimapBarrack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bragi.Dota2Minimap} returns this
 */
proto.bragi.Dota2Minimap.prototype.clearBarracksList = function() {
  return this.setBarracksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MinimapTower.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MinimapTower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MinimapTower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MinimapTower.toObject = function(includeInstance, msg) {
  var f, obj = {
    lane: jspb.Message.getFieldWithDefault(msg, 1, 0),
    faction: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    alive: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MinimapTower}
 */
proto.bragi.Dota2MinimapTower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MinimapTower;
  return proto.bragi.Dota2MinimapTower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MinimapTower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MinimapTower}
 */
proto.bragi.Dota2MinimapTower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bragi.Dota2Lane} */ (reader.readEnum());
      msg.setLane(value);
      break;
    case 2:
      var value = /** @type {!proto.bragi.Dota2Faction} */ (reader.readEnum());
      msg.setFaction(value);
      break;
    case 3:
      var value = /** @type {!proto.bragi.Dota2TowerTier} */ (reader.readEnum());
      msg.setTier(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MinimapTower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MinimapTower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MinimapTower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MinimapTower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLane();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFaction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTier();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAlive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional Dota2Lane lane = 1;
 * @return {!proto.bragi.Dota2Lane}
 */
proto.bragi.Dota2MinimapTower.prototype.getLane = function() {
  return /** @type {!proto.bragi.Dota2Lane} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bragi.Dota2Lane} value
 * @return {!proto.bragi.Dota2MinimapTower} returns this
 */
proto.bragi.Dota2MinimapTower.prototype.setLane = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Dota2Faction faction = 2;
 * @return {!proto.bragi.Dota2Faction}
 */
proto.bragi.Dota2MinimapTower.prototype.getFaction = function() {
  return /** @type {!proto.bragi.Dota2Faction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bragi.Dota2Faction} value
 * @return {!proto.bragi.Dota2MinimapTower} returns this
 */
proto.bragi.Dota2MinimapTower.prototype.setFaction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Dota2TowerTier tier = 3;
 * @return {!proto.bragi.Dota2TowerTier}
 */
proto.bragi.Dota2MinimapTower.prototype.getTier = function() {
  return /** @type {!proto.bragi.Dota2TowerTier} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bragi.Dota2TowerTier} value
 * @return {!proto.bragi.Dota2MinimapTower} returns this
 */
proto.bragi.Dota2MinimapTower.prototype.setTier = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool alive = 4;
 * @return {boolean}
 */
proto.bragi.Dota2MinimapTower.prototype.getAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bragi.Dota2MinimapTower} returns this
 */
proto.bragi.Dota2MinimapTower.prototype.setAlive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bragi.Dota2MinimapBarrack.prototype.toObject = function(opt_includeInstance) {
  return proto.bragi.Dota2MinimapBarrack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bragi.Dota2MinimapBarrack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MinimapBarrack.toObject = function(includeInstance, msg) {
  var f, obj = {
    lane: jspb.Message.getFieldWithDefault(msg, 1, 0),
    faction: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    alive: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bragi.Dota2MinimapBarrack}
 */
proto.bragi.Dota2MinimapBarrack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bragi.Dota2MinimapBarrack;
  return proto.bragi.Dota2MinimapBarrack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bragi.Dota2MinimapBarrack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bragi.Dota2MinimapBarrack}
 */
proto.bragi.Dota2MinimapBarrack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bragi.Dota2Lane} */ (reader.readEnum());
      msg.setLane(value);
      break;
    case 2:
      var value = /** @type {!proto.bragi.Dota2Faction} */ (reader.readEnum());
      msg.setFaction(value);
      break;
    case 3:
      var value = /** @type {!proto.bragi.Dota2BarrackType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bragi.Dota2MinimapBarrack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bragi.Dota2MinimapBarrack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bragi.Dota2MinimapBarrack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bragi.Dota2MinimapBarrack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLane();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFaction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAlive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional Dota2Lane lane = 1;
 * @return {!proto.bragi.Dota2Lane}
 */
proto.bragi.Dota2MinimapBarrack.prototype.getLane = function() {
  return /** @type {!proto.bragi.Dota2Lane} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bragi.Dota2Lane} value
 * @return {!proto.bragi.Dota2MinimapBarrack} returns this
 */
proto.bragi.Dota2MinimapBarrack.prototype.setLane = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Dota2Faction faction = 2;
 * @return {!proto.bragi.Dota2Faction}
 */
proto.bragi.Dota2MinimapBarrack.prototype.getFaction = function() {
  return /** @type {!proto.bragi.Dota2Faction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.bragi.Dota2Faction} value
 * @return {!proto.bragi.Dota2MinimapBarrack} returns this
 */
proto.bragi.Dota2MinimapBarrack.prototype.setFaction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Dota2BarrackType type = 3;
 * @return {!proto.bragi.Dota2BarrackType}
 */
proto.bragi.Dota2MinimapBarrack.prototype.getType = function() {
  return /** @type {!proto.bragi.Dota2BarrackType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.bragi.Dota2BarrackType} value
 * @return {!proto.bragi.Dota2MinimapBarrack} returns this
 */
proto.bragi.Dota2MinimapBarrack.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool alive = 4;
 * @return {boolean}
 */
proto.bragi.Dota2MinimapBarrack.prototype.getAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bragi.Dota2MinimapBarrack} returns this
 */
proto.bragi.Dota2MinimapBarrack.prototype.setAlive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.bragi.Dota2Faction = {
  DOTA2_FACTION_UNSPECIFIED: 0,
  DOTA2_FACTION_RADIANT: 1,
  DOTA2_FACTION_DIRE: 2
};

/**
 * @enum {number}
 */
proto.bragi.Dota2Lane = {
  DOTA2_LANE_UNSPECIFIED: 0,
  DOTA2_LANE_TOP: 1,
  DOTA2_LANE_MID: 2,
  DOTA2_LANE_BOT: 3
};

/**
 * @enum {number}
 */
proto.bragi.Dota2TowerTier = {
  DOTA2_TOWER_TIER_UNSPECIFIED: 0,
  DOTA2_TOWER_TIER_1: 1,
  DOTA2_TOWER_TIER_2: 2,
  DOTA2_TOWER_TIER_3: 3,
  DOTA2_TOWER_TIER_4: 4
};

/**
 * @enum {number}
 */
proto.bragi.Dota2BarrackType = {
  DOTA2_BARRACK_TYPE_UNSPECIFIED: 0,
  DOTA2_BARRACK_TYPE_RANGED: 1,
  DOTA2_BARRACK_TYPE_MELEE: 2
};

goog.object.extend(exports, proto.bragi);
