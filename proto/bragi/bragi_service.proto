syntax = "proto3";

package bragi;

option go_package = "oddin.gg/bragi";
option java_package = "com.oddin.bragi";

import "google/protobuf/timestamp.proto";
import "bragi/common.proto";
import "bragi/cs2.proto";
import "bragi/dota2.proto";
import "bragi/rush_soccer.proto";
import "bragi/lol.proto";
import "bragi/rush_basketball.proto";
import "bragi/valorant.proto";


service Bragi {

  // Matches gRPC unary call returns all planned or currently played matches
  rpc MatchTimeline(MatchTimelineRequest) returns (MatchTimelineResponse) {}

  // LiveDataFeed gRPC stream returning LiveDataFeedMessage one direction stream
  rpc LiveDataFeed(LiveDataFeedRequest) returns (stream LiveDataFeedMessage) {}

}

message MatchTimelineRequest {}

message MatchTimelineResponse {
  repeated Match matches = 1;
}

message LiveDataFeedRequest {
  // Represent timestamp since matches states should be received. If value is null then currently played matches are
  // received. If "after" property is defined, then matches which were updated after the "after" timestamp are received.
  optional google.protobuf.Timestamp after = 1;
}

message LiveDataFeedMessage{

  oneof message {
    KeepAlive keepalive = 1;
    MatchMessage match = 2;
  }
}

// Heartbeat message which is sent periodically.
message KeepAlive {
  google.protobuf.Timestamp timestamp = 1;
}

// (Game)MatchSnapshot - each sport has own defined MatchSnapshot (eg. CS2MatchSnapshot). Because Protocol buffers do not
// support any interface or trait definition, there is no defined proto message called MatchSnapshot. But still we
// use (Game)MatchSnapshot term in this documentation. If (Game)MatchSnapshot is mentioned then it represents a game specific proto
// message which contains exactly five properties. Four of them ("match_urn", "sequence", "timestamp", "announcements")
// are not game specific and the last one is game specific "match_state" (eg. CS2MatchState).

// (Game)MatchMessage - each sport has own defined MatchMessage (eg. CS2MatchMessage). Because Protocol buffers do not
// support any interface or trait definition, there is no defined proto message called MatchMessage. But still we
// use (Game)MatchMessage term in this documentation. If (Game)MatchMessage is mentioned then it represents a game specific proto
// message which contains exactly four properties. Three of them ("match_urn", "sequence", "timestamp") are not game specific
// and the last one is game specific "payload" (eg. CS2MatchState). Property "payload" is the oneof which can have just two items.
// One item is a (Game)MatchSnapshot and the second one (Game)MatchUpdate.

// At the beginning, when the stream is established, an initial (Game)MatchMessage with a (Game)MatchSnapshot payload
// (eg. CS2MatchSnapshot) is received (just only once during the stream lifecycle, to recover (Game)MatchSnapshot you
// need to reconnect to server). Cache this (Game)MatchSnapshot into memory. Then only AnnouncementUpdate or (Game)MatchMessage
// with (Game)MatchUpdate payload (eg. CS2MatchUpdate) can be received. Those updates are supposed to be applied on cached
// (Game)MatchSnapshot. If AnnouncementUpdate is received then append its "payload" property value to the array of "announcements"
// in cached (Game)MatchSnapshot. If update (e.g. CS2MatchUpdate) payload is received then apply this update on "match_state"
// property in cached (Game)MatchSnapshot. For both update cases do not forget also to update "sequence" and "timestamp"
// properties in the cached (Game)MatchSnapshot with values from the received (Game)MatchMessage.
message MatchMessage {
  oneof message {

    // Append announcement's payload to property announcements array in (Game)MatchSnapshot.
    AnnouncementUpdate announcement = 1;

    // Message which wraps CS2MatchSnapshot or CS2MatchUpdate message with given match_urn and sequence for CS2 sport.
    CS2MatchMessage cs2 = 2;

    // Message which wraps CS2MatchSnapshot or CS2MatchUpdate message with given match_urn and sequence for CS2 Duels sport.
    CS2MatchMessage cs2_duels = 3;
    // Message which wraps Dota2MatchSnapshot or Dota2MatchUpdate message with given match_urn and sequence for Dota2 sport.
    Dota2MatchMessage dota2 = 4;

    // Message which wraps RushSoccerMatchSnapshot or RushSoccerMatchUpdate message with given match_urn and sequence for RushSoccer sport.
    RushSoccerMatchMessage rush_soccer = 5;

    // Message which wraps LolMatchSnapshot or LolMatchUpdate message with given match_urn and sequence for Lol sport.
    LolMatchMessage lol = 6;

    // Message which wraps RushBasketballMatchSnapshot or RushBasketballMatchUpdate message with given match_urn and sequence for RushBasketball sport.
    RushBasketballMatchMessage rush_basketball = 7;

    // Message which wraps ValorantMatchSnapshot or ValorantMatchUpdate message with given match_urn and sequence for Valorant sport.
    ValorantMatchMessage valorant = 8;
  }
}

// This oneof joins together all possible (Game)MatchSnapshots. It servers as a helper wrapper for match snapshots, so
// it is not necessary to use it for match state maintain/reconstruction.
message MatchSnapshot {
  oneof snapshot {
    CS2MatchSnapshot cs2 = 1;
    CS2MatchSnapshot cs2_duels = 2;
    Dota2MatchSnapshot dota2 = 3;
    RushSoccerMatchSnapshot rush_soccer = 4;
    LolMatchSnapshot lol = 5;
    RushBasketballMatchSnapshot rush_basketball = 6;
    ValorantMatchSnapshot valorant = 7;
  }
}

// This oneof joins together all possible (Game)MatchStates. It servers as a helper wrapper for match states, so
// it is not necessary to use it for match state maintain/reconstruction.
message MatchState {
  oneof state {
    CS2MatchState cs2 = 1;
    CS2MatchState cs2_duels = 2;
    Dota2MatchState dota2 = 3;
    RushSoccerMatchState rush_soccer = 4;
    LolMatchState lol = 5;
    RushBasketballMatchState rush_basketball = 6;
    ValorantMatchState valorant = 7;
  }
}
