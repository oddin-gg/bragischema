syntax = "proto3";

package bragi;

option go_package = "oddin.gg/bragi";
option java_package = "com.oddin.bragi";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "bragi/common.proto";

// Represent an implementation of proto message which satisfies (Game)MatchMessage requirements. For doc about (Game)MatchMessage
// check bragi_service.proto file.
message CS2MatchMessage {
  message Payload {
    oneof payload {
      // Initial snapshot
      CS2MatchSnapshot snapshot = 1;

      // Particular updates which are applied on property match_state in MatchState.
      CS2MatchUpdate update = 2;
    }
  }

  string match_urn = 1;
  uint64 sequence = 2;
  google.protobuf.Timestamp timestamp = 3;
  DataStatus data_status = 5;
  Payload payload = 4;
}

// Is an implementation of proto message which satisfies (Game)MatchSnapshot requirements. For doc about (Game)MatchSnapshot
// check bragi_service.proto file. CS2MatchSnapshot represent whole set of data about particular match. This entity is
// received only at the beginning of stream. Cache CS2MatchSnapshot in memory and then update it with received updates.
// If AnnouncementUpdate is received then append its payload to property announcements. If game update is received (CS2MatchUpdate)
// then apply this update on property match_state. For both update cases do not forget also to update "sequence" and "timestamp"
// properties with corresponding values from CS2MatchMessage.
message CS2MatchSnapshot {
  string match_urn = 1;
  uint64 sequence = 2;
  google.protobuf.Timestamp timestamp = 3;
  DataStatus data_status = 6;
  repeated Announcement announcements = 4;
  CS2MatchState match_state = 5;
}

// Represents an update message which "payload" property is supposed to be applied to update match_state property of
// cached match entity (CS2MatchSnapshot). Each CS2MatchUpdate is received wrapped in CS2MatchMessage which carries
// properties "sequence", "timestamp". Replace cached properties "sequence" and "timestamp" in cached CS2MatchSnapshot
// with values of "sequence", "timestamp" from CS2MatchMessage after you successfully applied updates.
// If any update is missed, client can recover whole snapshot (CS2MatchSnapshot) with given sequence number and then
// continue applying new incoming updates with sequence number higher than snapshot one.
message CS2MatchUpdate {
  message Payload {
    oneof payload {
      CS2MatchState match_state = 1;
      CS2MatchStatePartialUpdates partial_updates = 2;
    }
  }

  Payload payload = 1;

  // Array of events (can be empty). Notifies about occurred situation in game. Those events are non-idempotent messages
  // ordered according timestamp and they are not supposed to be applied on cached match state. Those events represents
  // a history of match. If any eventis missed there is no way how to recover missing events.
  repeated CS2Event events = 2 [deprecated = true];
}

// One CS2MatchUpdate contains non-empty array property called "updates". These updates represents idempotent updates
// which are supposed to be applied on match_state property in CS2MatchSnapshot.
message CS2MatchStatePartialUpdates {

  repeated CS2MatchStatePartialUpdate updates = 1;
}

// ---------------------------------------------------------------------------------------------------------------------

message CS2MatchStatePartialUpdate {
  oneof update {
    // Replaces "score" property in CS2MatchState.
    CS2MatchScoreState score = 1;

    // Replaces "current_map_state" property in CS2MatchState. To minimalize issues with incorrect updates application
    // on current_map_state, server sends CS2MatchStatePartialUpdate with CS2MapState in periodic time set by customer.
    CS2CurrentMapState current_map_state = 2;

    // Apply partial update on "current_map_state" property in CS2MapState.
    CS2CurrentMapStatePartialUpdate current_map_state_partial_update = 3;

    // There are no particular updates for eg. previous_map_states, whole current_map_state defined. In case when those
    // states are updated, then whole update with CS2MatchState update is sent.
  }
}

message CS2MatchState {
  string match_urn = 1;
  BestOfType match_type = 2;
  CS2Team home_team = 3;
  CS2Team away_team = 4;
  CS2MatchScoreState score = 5;
  MatchStatusType match_status = 6;
  CS2CurrentMapState current_map_state = 7;
  repeated CS2PreviousMapState previous_map_states = 8;  //this property is updated only when whole CS2MatchState update is received
}

message CS2MatchScoreState {
  uint32 home_score = 1;
  uint32 away_score = 2;
}

message CS2Team {
  string team_urn = 1;
  string team_name = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message CS2CurrentMapStatePartialUpdate {
  oneof update {
    // Replaces "info" property in CS2MapState.
    CS2MapInfoState info = 1;

    // Replaces "score" property in CS2MapState.
    CS2MapScoreState score = 2;

    // Replaces "current_round_state" property in CS2MapState.
    CS2CurrentRoundState current_round_state = 3;

    // Apply partial update on "current_round_state" property in CS2MapState.
    CS2CurrentRoundStatePartialUpdate current_round_state_partial_update = 4;

    // Apply partial update on value under given key in team_map_states map property in CS2MapState.
    CS2TeamMapStatePartialUpdate team_map_states_partial_update = 5;

    // There are no particular updates for eg. previous_round_states, whole current_round_state defined. In case when those
    // states are updated, then whole update with CS2MapState update is sent.
  }
}

message CS2CurrentMapState {
  uint32 map_order = 1;
  CS2MapInfoState info = 2;
  CS2MapScoreState score = 3;
  CS2CurrentRoundState current_round_state = 4;
  repeated CS2PreviousRoundState previous_round_states = 5; //this property is updated only when whole CS2MapState update is received
  map<string, CS2TeamMapState> team_map_states = 6; // keys are type of team_urn
}

message CS2PreviousMapState {
  uint32 map_order = 1;
  CS2MapInfoState info = 2;
  CS2MapScoreState score = 3;
  repeated CS2PreviousRoundState round_states = 4;
  map<string, CS2TeamMapState> team_map_states = 5;
}

message CS2MapInfoState {
  string map_name = 1;
  uint32 max_rounds_default = 2;
  uint32 max_rounds_overtime = 3;
  optional google.protobuf.Duration freeze_time_duration = 4;
  optional google.protobuf.Duration round_time_duration = 5;
  optional google.protobuf.Duration bomb_time_duration = 6;
  optional google.protobuf.Timestamp start_time = 7;
  optional google.protobuf.Timestamp end_time = 8;
  bool map_ended = 9;
  optional string win_team_urn = 10;
}

message CS2MapScoreState {
  uint32 home_score = 1;
  uint32 away_score = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message CS2CurrentRoundStatePartialUpdate {
  oneof update {

    // Replaces "info" property in CS2CurrentRoundState.
    CS2RoundInfoState info = 1;

    // Replaces "time" property in CS2CurrentRoundState.
    CS2RoundTimeState time = 2;

    // Replaces "bomb_state" property in CS2CurrentRoundState.
    CS2BombState bomb_state = 3;

    // Apply partial update on value under given key in team_states map property in CS2CurrentRoundState.
    CS2TeamCurrentRoundStatePartialUpdate team_states_partial_update = 4;
  }
}

message CS2CurrentRoundState {
  uint32 round_number = 1;
  CS2RoundInfoState info = 2;
  CS2RoundTimeState time = 3;
  CS2BombState bomb_state = 4;
  map<string, CS2TeamCurrentRoundState> team_states = 5; // keys are type of team_urn
}

message CS2PreviousRoundState {
  uint32 round_number = 1;
  CS2RoundInfoState info = 2;
  map<string, CS2PreviousTeamRoundState> team_states = 4; // keys are type of team_urn
}

message CS2RoundInfoState {
  CS2RoundStateType round_type = 1;
  google.protobuf.Timestamp start_time = 2;
  optional google.protobuf.Timestamp end_time = 3;
  optional string winning_team_urn = 4;
  optional CS2WinReason win_reason = 5;
  optional bool home_won = 6;
}

message CS2RoundTimeState {
  google.protobuf.Duration time_remaining = 1;
}

message CS2BombState {
  oneof payload {
    CS2BombCarriedState carried = 1;
    CS2BombDroppedState dropped = 2;
    CS2BombPlantingState planting = 3;
    CS2BombPlantedState planted = 4;
    CS2BombDefusingState defusing = 5;
    CS2BombDefusedState defused = 6;
    CS2BombExplodedState exploded = 7;
  }
}

message CS2BombCarriedState {
  string player_urn = 1;
  CS2Position position = 2;
}

message CS2BombDroppedState {
  string dropped_by_player_urn = 1;
  CS2Position position = 2;
}

message CS2BombPlantingState {
  string player_urn = 1;
  CS2Position position = 2;
  google.protobuf.Duration countdown = 3;
}

message CS2BombPlantedState {
  string planted_by_player_urn = 1;
  CS2Position position = 2;
  google.protobuf.Timestamp planted_at = 3;
  google.protobuf.Duration countdown = 4;
}

message CS2BombDefusingState {
  string player_urn = 1;
  CS2Position position = 2;
  google.protobuf.Duration countdown = 3;
  google.protobuf.Timestamp defuse_started_at = 4;
}

message CS2BombDefusedState {
  string defused_by_player_urn = 1;
  CS2Position position = 2;
  google.protobuf.Timestamp defused_at = 3;
}

message CS2BombExplodedState {
  CS2Position position = 1;
  google.protobuf.Timestamp exploded_at = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message CS2TeamMapStatePartialUpdate {
  message Payload {
    oneof payload {

      // Replaces whole value under given key in player_map_states map property in CS2TeamMapState.
      CS2PlayerMapState player_state = 2;

      // Apply partial update on value under given key in player_map_states map property in CS2TeamMapState.
      CS2PlayerMapStatePartialUpdate player_map_states_partial_update = 1;
    }
  }

  string team_urn = 1;
  Payload payload = 2;
}

message CS2TeamMapState {
  string team_urn = 1;
  CS2Side side = 2;
  map<string, CS2PlayerMapState> player_map_states = 3; // keys are type of player_urn
}

message CS2TeamCurrentRoundStatePartialUpdate {
  message Payload {
    oneof payload {

      // Replaces whole value under given key in player_round_states map property in CS2TeamCurrentRoundState
      CS2PlayerCurrentRoundState player_state = 2;

      // Apply partial update on value under given key in player_round_states map property in CS2TeamCurrentRoundState.
      CS2PlayerCurrentRoundStatePartialUpdate player_round_states_partial_update = 1;
    }
  }

  string team_urn = 1;
  Payload payload = 2;
}

message CS2TeamCurrentRoundState {
  string team_urn = 1;
  map<string, CS2PlayerCurrentRoundState> player_round_states = 2; // keys are type of player_urn
}

message CS2PreviousTeamRoundState {
  string team_urn = 1;
  map<string, CS2PlayerPreviousRoundState> players = 2; // keys are type of player_urn
}

// ---------------------------------------------------------------------------------------------------------------------

message CS2PlayerMapStatePartialUpdate {
  message Payload {
    oneof payload {
      // Apply partial update on value under given key in 'statistics' map property in CS2PlayerMapState.
      CS2PlayerMapStatisticsState statistics = 1;
    }
  }

  string player_urn = 1;
  Payload payload = 2;
}

message CS2PlayerMapState {
  string player_urn = 1;
  string player_name = 2;
  uint32 slot_id = 4;
  CS2PlayerMapStatisticsState statistics = 3;
}

message CS2PlayerMapStatisticsState {
  string player_urn = 1;
  uint32 opening_kills = 4;
  uint32 opening_deaths = 5;
  uint32 total_damage = 6;
  float average_damage_per_round = 7;
  CS2PlayerStatistics statistics = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message CS2PlayerCurrentRoundStatePartialUpdate {
  message Payload {
    oneof payload {
      // Replaces "statistics" property in CS2PlayerCurrentRoundState.
      CS2PlayerCurrentRoundStatisticsState statistics = 1;

      // Replaces "items" property in CS2PlayerCurrentRoundState.
      CS2PlayerItemsState items = 2;

      // Replaces "position" property in CS2PlayerCurrentRoundState.
      CS2PlayerPositionState position = 3;
    }
  }

  string player_urn = 1;
  Payload payload = 2;
}

message CS2PlayerCurrentRoundState {
  string player_urn = 1;
  string player_name = 2;
  uint32 slot_id = 6;
  CS2PlayerCurrentRoundStatisticsState statistics = 3;
  CS2PlayerItemsState items = 4;
  CS2PlayerPositionState position = 5;
}

message CS2PlayerCurrentRoundStatisticsState {
  string player_urn = 1;
  bool alive = 2;
  uint32 health = 3;
  uint32 armor = 4;
  uint32 balance = 5;
  optional uint32 damage = 7;
  CS2PlayerStatistics statistics = 6;
}

message CS2PlayerItemsState {
  string player_urn = 1;
  uint32 equipment_value = 2;
  repeated CS2Item items = 3;
}

message CS2PlayerPreviousRoundState {
  string player_urn = 1;
  string player_name = 2;
  CS2PlayerStatistics statistics = 3;
}

message CS2PlayerPositionState {
  string player_urn = 1;
  CS2Position position = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message CS2PlayerStatistics {
  string player_urn = 1;
  uint32 kills = 2;
  uint32 friendly_kills = 3;
  uint32 enemy_kills = 4;
  uint32 self_kills = 5;
  uint32 deaths = 6;
  uint32 assists = 7;
  uint32 headshots = 8;
  uint32 damage = 15 [deprecated = true]; // use CS2PlayerMapStatisticsState.total_damage or CS2PlayerCurrentRoundStatisticsState.damage
  optional uint32 friendly_damage_dealt_armor = 9;
  optional uint32 friendly_damage_dealt_health = 10;
  optional uint32 enemy_damage_dealt_armor = 11;
  optional uint32 enemy_damage_dealt_health = 12;
  optional uint32 enemy_damage_dealt_armor_raw = 13;
  optional uint32 enemy_damage_dealt_health_raw = 14;
}

message CS2Item {
  string name = 1;
  CS2WeaponType type = 2;
  uint32 count = 3;
  bool isActive = 4;
}

message CS2Position {
  float x = 1;
  float y = 2;
  float z = 4;
  float angle = 3;
}

// ---------------------------------------------------------------------------------------------------------------------
// EVENTS --------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

message CS2Event {
  option deprecated = true;
  oneof event {
    CS2BombDefuseStarted bomb_defuse_started = 1;
    CS2BombDefused bomb_defused = 2;
    CS2BombExploded bomb_exploded = 3;
    CS2BombPlantStarted bomb_plant_started = 21;
    CS2BombPlanted bomb_planted = 4;
    CS2DamageDealt damage_dealt = 5;
    CS2FreezeTimeEnded freeze_time_ended = 6;
    CS2FreezeTimeStarted freeze_time_started = 7;
    CS2ItemDrop item_drop = 8;
    CS2ItemPickUp item_pick_up = 9;
    CS2ItemPurchase item_purchase = 10;
    CS2ItemThrow item_throw = 11;
    CS2Kill kill = 12;
    CS2Death death = 13;
    CS2MapEnd map_end = 14;
    CS2MapStart map_start = 15;
    CS2RoundEnd round_end = 16;
    CS2RoundPause round_pause = 17;
    CS2RoundResume round_resume = 18;
    CS2RoundRollback round_rollback = 19;
    CS2RoundStart round_start = 20;
  }
}

message CS2PlayerBalance {
  string player_urn = 1;
  string team_urn = 2;
  uint32 balance = 3;
}

message CS2PlayerItems {
  string player_urn = 1;
  string team_urn = 2;
  uint32 equipment_value = 3;
  repeated CS2Item items = 4;
}

// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------

message CS2BombDefuseStarted {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  string player_urn = 4;
  string team_urn = 5;
}

message CS2BombDefused {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  string player_urn = 4;
  string team_urn = 5;
}

message CS2BombExploded {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
}

message CS2BombPlantStarted {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  string player_urn = 4;
  string team_urn = 5;
}

message CS2BombPlanted {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  string player_urn = 4;
  string team_urn = 5;
}

message CS2DamageDealt {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  CS2Position killer_position = 4;
  string killer_urn = 5;
  string killer_team_urn = 6;
  string victim_urn = 7;
  string victim_team_urn = 8;
  string weapon = 9;
  string hitgroup = 10;
  uint32 health_deducted = 11;
  uint32 health_remaining = 12;
  uint32 armor_deducted = 13;
  uint32 armor_remaining = 14;
  CS2Position victim_position = 15;
}

message CS2FreezeTimeEnded {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  map<string, CS2PlayerBalance> player_balances = 4; // keys are type of player_urn
  map<string, CS2PlayerItems> player_inventories = 5; // keys are type of player_urn
}

message CS2FreezeTimeStarted {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  map<string, CS2PlayerBalance> player_balances = 4; // keys are type of player_urn
  map<string, CS2Side> teams_round_info = 5; // keys are type of team_urn
}
message CS2ItemDrop {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  CS2Position position = 4;
  string player_urn = 5;
  string team_urn = 6;
  string item = 7;
}

message CS2ItemPickUp {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  string player_urn = 4;
  string team_urn = 5;
  string item = 6;
}

message CS2ItemPurchase {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  string player_urn = 4;
  string team_urn = 5;
  string item = 6;
  uint32 player_balance = 7;
  uint32 equipment_value = 8;
}

message CS2ItemThrow {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  CS2Position position = 4;
  string player_urn = 5;
  string team_urn = 6;
  string item = 7;
}

message CS2Kill {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  CS2Position killer_position = 4;
  string killer_urn = 5;
  string killer_team_urn = 6;
  string victim_urn = 7;
  string victim_team_urn = 8;
  string weapon = 9;
  bool headshot = 10;
  bool penetrated = 11;
  repeated string assistants = 12; // array of player_urns
}

message CS2Death {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  CS2Position position = 4;
  string player_urn = 5;
  string team_urn = 6;
  uint32 total_deaths = 7;
  bool suicide = 9;
  bool death_by_bomb = 10;
}

message CS2MapEnd {
  google.protobuf.Duration map_time = 1;
  uint32 current_round_number = 3;
  string map_name = 4;
  string winning_team_urn = 5;
}

message CS2MapStart {
  google.protobuf.Duration map_time = 1;
  string map_name = 2;
}

message CS2RoundEnd {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
  string winning_team_urn = 4;
  CS2WinReason win_reason = 5;
  map<string, CS2PlayerBalance> player_balances = 6; // keys are type of player_urn
  map<string, CS2PlayerItems> player_inventories = 7; // keys are type of player_urn
}

message CS2RoundPause {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
}

message CS2RoundResume {
  google.protobuf.Duration map_time = 1;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
}

message CS2RoundRollback {
  uint32 next_round_number = 1;
}

message CS2RoundStart {
  google.protobuf.Duration map_time = 1 ;
  google.protobuf.Duration time_remaining = 2;
  uint32 current_round_number = 3;
}

// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------
// ------------------------------------------------------------------------------

enum CS2Side {
  CS2_SIDE_UNSPECIFIED = 0;
  CS2_SIDE_COUNTER_TERRORISTS = 1;
  CS2_SIDE_TERRORISTS = 2;
}

enum CS2WinReason {
  CS2_WIN_REASON_UNSPECIFIED = 0;
  CS2_WIN_REASON_COUNTER_TERRORISTS_ELIMINATED = 1;
  CS2_WIN_REASON_TERRORISTS_ELIMINATED = 2;
  CS2_WIN_REASON_EXPLOSION = 3;
  CS2_WIN_REASON_DEFUSE = 4;
  CS2_WIN_REASON_TIMEOUT = 5;
  CS2_WIN_REASON_TARGET_SAVED = 6;
}

enum CS2RoundStateType {
  CS2_ROUND_STATE_TYPE_UNSPECIFIED = 0;
  CS2_ROUND_STATE_TYPE_BUY_TIME = 1;
  CS2_ROUND_STATE_TYPE_IN_PROGRESS = 2;
  CS2_ROUND_STATE_TYPE_PAUSED = 3;
  CS2_ROUND_STATE_TYPE_FINISHED = 4;
}

enum CS2WeaponType {
  CS2_WEAPON_TYPE_UNSPECIFIED = 0;
  CS2_WEAPON_TYPE_PISTOL = 1;
  CS2_WEAPON_TYPE_BOMB = 2;
  CS2_WEAPON_TYPE_GRENADE = 3;
  CS2_WEAPON_TYPE_MACHINE_GUN = 4;
  CS2_WEAPON_TYPE_RIFLE = 5;
  CS2_WEAPON_TYPE_SHOTGUN = 6;
  CS2_WEAPON_TYPE_SNIPER_RIFLE = 7;
  CS2_WEAPON_TYPE_SUBMACHINE_GUN = 8;
  CS2_WEAPON_TYPE_KNIFE = 9;
  CS2_WEAPON_TYPE_DEFUSE_KIT = 10;
}
