syntax = "proto3";

package bragi;

option go_package = "oddin.gg/bragi";
option java_package = "com.oddin.bragi";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "bragi/common.proto";


message Dota2MatchMessage {
  message Payload {
    oneof payload {
      // Initial snapshot
      Dota2MatchSnapshot snapshot = 1;

      // Particular updates which are applied on property match_state in MatchState.
      Dota2MatchUpdate update = 2;
    }
  }

  string match_urn = 1;
  uint64 sequence = 2;
  google.protobuf.Timestamp timestamp = 3;
  DataStatus data_status = 5;
  Payload payload = 4;
}

message Dota2MatchSnapshot {
  string match_urn = 1;
  uint64 sequence = 2;
  google.protobuf.Timestamp timestamp = 3;
  DataStatus data_status = 4;
  repeated Announcement announcements = 6;
  Dota2MatchState match_state = 7;
}

message Dota2MatchUpdate {
  message Payload {
    oneof payload {
      Dota2MatchState match_state = 1;
      Dota2MatchStatePartialUpdates partial_updates = 2;
    }
  }

  Payload payload = 1;
}

message Dota2MatchStatePartialUpdates {

  repeated Dota2MatchStatePartialUpdate updates = 1;
}

// ---------------------------------------------------------------------------------------------------------------------

message Dota2MatchStatePartialUpdate {
  oneof update {
    // Replaces "score" property in Dota2MatchState.
    Dota2MatchScoreState score = 1;

    // Replaces "current_map_state" property in Dota2MatchState. To minimalize issues with incorrect updates application
    // on current_map_state, server sends Dota2MatchStatePartialUpdate with Dota2MapState in periodic time set by customer.
    Dota2CurrentMapState current_map_state = 2;

    // Apply partial update on "current_map_state" property in Dota2MapState.
    Dota2CurrentMapStatePartialUpdate current_map_state_partial_update = 3;

    // There are no particular updates for eg. previous_map_states, whole current_map_state defined. In case when those
    // states are updated, then whole update with Dota2MatchState update is sent.
  }
}

message Dota2MatchState {
  string match_urn = 1;
  BestOfType match_type = 2;
  Team home_team = 3;
  Team away_team = 4;
  Dota2MatchScoreState score = 5;
  MatchStatusType match_status = 6;
  Dota2CurrentMapState current_map = 7;
  repeated Dota2PreviousMapState previous_maps = 8;
}

message Dota2MatchScoreState {
  uint32 home_score = 1;
  uint32 away_score = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message Dota2CurrentMapStatePartialUpdate {
  oneof update {
    // Replaces "game_time" property in Dota2CurrentMapTimeState.
    Dota2CurrentMapTimeState game_time = 1;

    // Replaces whole value under given key in players map property in Dota2TeamCurrentMapState.
    Dota2TeamCurrentMapState team_current_map_state = 2;

    // Apply partial update on value under given key in teams map property in Dota2CurrentMapState.
    Dota2TeamCurrentMapStatePartialUpdate team_current_map_partial_update = 3;

    // Replaces "towers" property in Dota2Towers.
    Dota2Towers towers = 4;

    // Replaces "barracks" property in Dota2Barracks.
    Dota2Barracks barracks = 5;

    Roshan roshan = 8;
  }
}

message Dota2CurrentMapState {
  uint32 map_order = 1;
  bool map_paused = 2;
  Dota2CurrentMapTimeState game_time = 3;
  map<string, Dota2TeamCurrentMapState> teams = 4;
  Dota2Towers towers = 5;
  Dota2Barracks barracks = 6;
  Roshan roshan = 7;
  // Flag that represents Dota2 in game day season: true => day, false => night
  bool day_time = 8;
}

message Dota2CurrentMapTimeState {
  google.protobuf.Duration game_time = 1;
}

message Dota2PreviousMapState {
  uint32 map_order = 1;
  map<string, Dota2TeamPreviousMapState> teams = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message Dota2TeamCurrentMapStatePartialUpdate {
  message Payload {
    oneof payload {

      Dota2TeamCurrentMapStatisticsState statistics = 1;

      // Replaces whole value under given key in players map property in Dota2TeamCurrentMapState.
      Dota2PlayerCurrentMapState player_current_map_state = 2;

      // Apply partial update on value under given key in player_map_states map property in Dota2TeamMapState.
      Dota2PlayerCurrentMapStatePartialUpdate player_current_map_partial_update = 3;
    }
  }

  string team_urn = 1;
  Payload payload = 2;
}

message Dota2TeamCurrentMapState {
  string team_urn = 1;
  Dota2Faction faction = 2;
  Dota2TeamCurrentMapStatisticsState statistics = 3;
  optional bool won = 4;
  map<string, Dota2PlayerCurrentMapState> players = 5;
}

message Dota2TeamCurrentMapStatisticsState {
  string team_urn = 1;
  uint32 barracks = 2;
  uint32 kills = 3;
  uint32 net_worth = 4;
  uint32 roshans = 5;
  uint32 towers = 6;
}

// ---------------------------------------------------------------------------------------------------------------------

message Dota2PlayerCurrentMapStatePartialUpdate {
  message Payload {
    oneof payload {
      // Replaces "player_info" property in Dota2PlayerInfoState.
      Dota2PlayerInfoState player_info = 1;

      // Replaces "timers" property in Dota2PlayerCurrentMapTimersState.
      Dota2PlayerCurrentMapTimersState timers = 2;

      // Replaces "statistics" property in Dota2PlayerStatisticsState.
      Dota2PlayerStatisticsState statistics = 3;

      // Replaces "map_statistics" property in Dota2PlayerCurrentMapStatisticsState.
      Dota2PlayerCurrentMapStatisticsState map_statistics = 4;

      // Replaces "position" property in Dota2Position.
      Dota2Position position = 5;

      // Replaces "items" property in Dota2Items.
      Dota2Items items = 6;

      // Replaces "abilities" property in Dota2Abilities.
      Dota2Abilities abilities = 7;
    }
  }

  string player_urn = 1;
  Payload payload = 2;
}

message Dota2PlayerCurrentMapState{
  string player_urn = 1;
  Dota2PlayerInfoState player_info = 2;
  Dota2PlayerCurrentMapTimersState timers = 3;
  Dota2PlayerStatisticsState statistics = 4;
  Dota2PlayerCurrentMapStatisticsState map_statistics = 5;
  Dota2Position position = 6;
  Dota2Items items = 7;
  Dota2Abilities abilities = 8;
}

message Dota2PlayerCurrentMapStatisticsState {
  string player_urn = 1;
  bool alive = 2;
  uint32 health = 3;
  uint32 max_health = 4;
  uint32 current_gold = 5;
  // Players gold plus sum of buy values of items in inventory/courier.
  uint32 net_worth = 6;
  // How much gold you need to spend to use buyback.
  uint32 buyback_cost = 7;
  bool has_buyback = 8;
  bool has_aegis = 9;
  uint32 mana = 10;
  uint32 max_mana = 11;
  // Number of reliable Golds.
  uint32 gold_reliable = 12;
  // Number of unreliable Golds.
  uint32 gold_unreliable = 13;
  // Number of denied creeps (you can kill your own minion to prevent an enemy player getting gold from it).
  uint32 denies = 14;
  // Number of killed creeps.
  uint32 last_hits = 15;
  uint32 level = 16;
}

message Dota2PlayerCurrentMapTimersState {
  string player_urn = 1;
  optional google.protobuf.Duration respawn_timer = 2;
  google.protobuf.Duration buyback_cooldown = 3;
}

message Dota2TeamPreviousMapState {
  string team_urn = 1;
  Dota2Faction faction = 2;
  uint32 barracks = 3;
  uint32 kills = 4;
  uint32 net_worth = 5;
  uint32 roshans = 6;
  uint32 towers = 7;
  optional bool won = 8;
  map<string, Dota2PlayerPreviousMapState> players = 9;
}

message Dota2PlayerPreviousMapState{
  string player_urn = 1;
  Dota2PlayerInfoState player_info = 2;
  Dota2PlayerStatisticsState statistics = 3;
}

message Dota2PlayerInfoState{
  string player_urn = 1;
  uint32 slot_id = 2;
  string ext_name = 3;
  optional uint32 hero_id = 4;
}

message Dota2PlayerStatisticsState {
  string player_urn = 1;
  uint32 kills = 2;
  uint32 deaths = 3;
  uint32 assists = 4;
}

message Dota2Towers {
  repeated Dota2Tower towers = 1;
}

message Dota2Barracks {
  repeated Dota2Barrack barracks = 1;
}

message Dota2Abilities {
  repeated Dota2Ability abilities = 1;
}

message Dota2Items {
  repeated Dota2Item items = 1;
}

message Dota2Item {
  string name = 1;
  optional int32 cooldown = 2;
  Dota2ItemPosition position = 3;
  uint32 level = 4;
}

message Dota2Ability {
  string name = 1;
  optional int32 cooldown = 2;
  bool ultimate = 3;
  bool passive = 4;
  bool can_cast = 5;
}

message Roshan {
  // Whether is roshan alive or not
  bool alive = 1;
  // Roshan's respawn timer.
  uint32 respawnTime = 2;
}

message Dota2Tower {
  Dota2Lane lane = 1;
  Dota2Faction faction = 2;
  Dota2TowerTier tier = 3;
  bool alive = 4;
}

message Dota2Barrack {
  Dota2Lane lane = 1;
  Dota2Faction faction = 2;
  Dota2BarrackType type = 3;
  bool alive = 4;
}

message Dota2Position {
  float x = 1;
  float y = 2;
}

enum Dota2Faction {
  DOTA2_FACTION_UNSPECIFIED = 0;
  DOTA2_FACTION_RADIANT = 1;
  DOTA2_FACTION_DIRE = 2;
}

enum Dota2Lane {
  DOTA2_LANE_UNSPECIFIED = 0;
  DOTA2_LANE_TOP = 1;
  DOTA2_LANE_MID = 2;
  DOTA2_LANE_BOT = 3;
}

enum Dota2TowerTier {
  DOTA2_TOWER_TIER_UNSPECIFIED = 0;
  DOTA2_TOWER_TIER_1 = 1;
  DOTA2_TOWER_TIER_2 = 2;
  DOTA2_TOWER_TIER_3 = 3;
  DOTA2_TOWER_TIER_4 = 4;
}

enum Dota2BarrackType {
  DOTA2_BARRACK_TYPE_UNSPECIFIED = 0;
  DOTA2_BARRACK_TYPE_RANGED = 1;
  DOTA2_BARRACK_TYPE_MELEE = 2;
}

enum Dota2ItemPosition {
  DOTA2_ITEM_POSITION_UNSPECIFIED = 0;
  DOTA2_ITEM_POSITION_NEUTRAL = 1;
  DOTA2_ITEM_POSITION_STASH0 = 2;
  DOTA2_ITEM_POSITION_STASH1 = 3;
  DOTA2_ITEM_POSITION_STASH2 = 4;
  DOTA2_ITEM_POSITION_STASH3 = 5;
  DOTA2_ITEM_POSITION_STASH4 = 6;
  DOTA2_ITEM_POSITION_STASH5 = 7;
  DOTA2_ITEM_POSITION_TELEPORT = 8;
  DOTA2_ITEM_POSITION_SLOT0 = 9;
  DOTA2_ITEM_POSITION_SLOT1 = 10;
  DOTA2_ITEM_POSITION_SLOT2 = 11;
  DOTA2_ITEM_POSITION_SLOT3 = 12;
  DOTA2_ITEM_POSITION_SLOT4 = 13;
  DOTA2_ITEM_POSITION_SLOT5 = 14;
  DOTA2_ITEM_POSITION_SLOT6 = 15;
  DOTA2_ITEM_POSITION_SLOT7 = 16;
  DOTA2_ITEM_POSITION_SLOT8 = 17;
}
