syntax = "proto3";

package bragi.historical_statistics;

option go_package = "oddin.gg/bragi";
option java_package = "com.oddin.bragi.historical_statistics";

import "google/protobuf/timestamp.proto";
import "bragi/common.proto";
import "bragi/historical_statistics/csgo_statistics.proto";


message SportsRequest {}

message TeamHistoricalStatisticsRequest {
  uint32 sport_id = 1;
  //  # Timeframe represents interval of computed statistics since current date. Eg. when current date is
  //  # 2021/08/31 and "timeframe" is THREE_MONTHS, then statistics interval would be 2021/06/01 - 2021/08/31.
  Timeframe timeframe = 2;
  uint32 team_id = 3;
}

message LastFiveEncountersRequest {
  uint32 sport_id = 1;
  Timeframe timeframe = 2;
  uint32 home_team_id = 3;
  uint32 away_team_id = 4;
}

message TournamentsRequest {
  uint32 sport_id = 1;
  optional google.protobuf.Timestamp date_from = 2;
  optional google.protobuf.Timestamp date_to = 3;
}

message TournamentInfoRequest {
  uint32 tournament_id = 1;
}

message PostMapStatisticsRequest {
  uint32 map_id = 1;
}

message TournamentStatisticsRequest {
  uint32 tournament_id = 1;
}

message TeamTournamentStatisticsRequest {
  uint32 tournament_id = 1;
  uint32 team_id = 2;
}

message  PlayerStatisticsAccordingRoleRequest {
  uint32 sport_id = 1;
  //    # Timeframe represents interval of computed statistics since current date. Eg. when current date is
  //    # 2021/08/31 and "timeframe" is THREE_MONTHS, then statistics interval would be 2021/06/01 - 2021/08/31.
  Timeframe timeframe = 2;
  string role = 3;
  uint32 team_id = 4;
}

// The response message containing the greetings
message SportsResponse {
  repeated Sport sports = 1;
}

message TournamentResponse {
  repeated Tournament tournaments = 1;
}

message HistoricalStatisticsResponse {
  oneof historical_statistics {
    CsgoTeamStatistics csgo = 1;
  }
}
message LastFiveEncountersResponse {
  repeated Match matches = 1;
}

message PostMapStatisticsResponse {
  oneof post_map_statistics {
    CsgoPostMapStatistics csgo = 1;
  }
}

message TournamentInfoResponse {
  oneof tournament_info {
    CsgoTournamentInfo csgo = 1;
  }
}

message TournamentStatisticsResponse {
  oneof tournament_statistics {
    CsgoTournamentStatistics csgo = 1;
  }
}

message TeamTournamentStatisticsResponse {
  oneof teams_tournament_statistics {
    CsgoTeamStatistics csgo = 1;
  }
}

message PlayerStatisticsAccordingRoleResponse {
  oneof player_statistics_according_role {
    CsgoPlayerStatistics csgo = 1;
  }
}
