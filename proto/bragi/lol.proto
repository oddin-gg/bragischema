syntax = "proto3";

package bragi;

option go_package = "oddin.gg/bragi";
option java_package = "com.oddin.bragi";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "bragi/common.proto";


message LolMatchMessage {
  message Payload {
    oneof payload {
      // Initial snapshot
      LolMatchSnapshot snapshot = 1;

      // Particular updates which are applied on property match_state in MatchState.
      LolMatchUpdate update = 2;
    }
  }

  string match_urn = 1;
  uint64 sequence = 2;
  google.protobuf.Timestamp timestamp = 3;
  DataStatus data_status = 4;
  Payload payload = 5;
}

message LolMatchSnapshot {
  string match_urn = 1;
  uint64 sequence = 2;
  google.protobuf.Timestamp timestamp = 3;
  DataStatus data_status = 4;
  repeated Announcement announcements = 5;
  LolMatchState match_state = 6;
}

message LolMatchUpdate {
  message Payload {
    oneof payload {
      LolMatchState match_state = 1;
      LolMatchStatePartialUpdates partial_updates = 2;
    }
  }

  Payload payload = 1;
}

message LolMatchStatePartialUpdates {

  repeated LolMatchStatePartialUpdate updates = 1;
}

// ---------------------------------------------------------------------------------------------------------------------

message LolMatchStatePartialUpdate {

  oneof update {
    // Replaces "score" property in LolMatchState.
    LolMatchScoreState score = 1;

    // Replaces "current_map_state" property in LolMatchState. To minimalize issues with incorrect updates application
    // on current_map_state, server sends LolMatchStatePartialUpdate with LolMapState in periodic time set by customer.
    LolCurrentMapState current_map_state = 2;

    // Apply partial update on "current_map_state" property in LolMapState.
    LolCurrentMapStatePartialUpdate current_map_state_partial_update = 3;

    // There are no particular updates for eg. previous_map_states, whole current_map_state defined. In case when those
    // states are updated, then whole update with LolMatchState update is sent.
  }
}

message LolMatchState {
  string match_urn = 1;
  BestOfType match_type = 2;
  Team home_team = 3;
  Team away_team = 4;
  LolMatchScoreState score = 5;
  MatchStatusType match_status = 6;
  LolCurrentMapState current_map = 7;
  repeated LolPreviousMapState previous_maps = 8;
}

message LolMatchScoreState {
  uint32 home_score = 1;
  uint32 away_score = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message LolCurrentMapStatePartialUpdate {
  oneof update {
    // Replaces "game_time" property in LolCurrentMapTimeState.
    LolCurrentMapTimeState game_time = 1;

    // Replaces whole value under given key in players map property in LolTeamCurrentMapState.
    LolTeamCurrentMapState team_current_map_state = 2;

    // Apply partial update on value under given key in teams map property in LolCurrentMapState.
    LolTeamCurrentMapStatePartialUpdate team_current_map_partial_update = 3;

    // Replaces "turrets" property in LolTurrets.
    LolTurrets turrets = 4;

    // Replaces "inhibitors" property in LolInhibitors.
    LolInhibitors inhibitors = 5;
  }
}

message LolCurrentMapState {
  uint32 map_order = 1;
  bool map_paused = 2;
  LolCurrentMapTimeState game_time = 3;
  map<string, LolTeamCurrentMapState> teams = 4;
  LolTurrets turrets = 5;
  LolInhibitors inhibitors = 6;
}

message LolCurrentMapTimeState {
  google.protobuf.Duration game_time = 1;
}

message LolPreviousMapState {
  uint32 map_order = 1;
  map<string, LolTeamPreviousMapState> teams = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message LolTeamCurrentMapStatePartialUpdate {
  message Payload {
    oneof payload {

      LolTeamCurrentMapStatisticsState statistics = 1;

      // Replaces whole value under given key in players map property in LolTeamCurrentMapState.
      LolPlayerCurrentMapState player_current_map_state = 2;

      // Apply partial update on value under given key in player_map_states map property in LolTeamMapState.
      LolPlayerCurrentMapStatePartialUpdate player_current_map_partial_update = 3;
    }
  }

  string team_urn = 1;
  Payload payload = 2;
}

message LolTeamCurrentMapState {
  string team_urn = 1;
  LolFaction faction = 2;
  LolTeamCurrentMapStatisticsState statistics = 3;
  optional bool won = 4;
  map<string, LolPlayerCurrentMapState> players = 5;
}

message LolTeamCurrentMapStatisticsState {
  string team_urn = 1;
  uint32 kills = 2;
  uint32 barons = 3;
  uint32 dragons = 4;
  uint32 turrets = 5;
  uint32 inhibitors = 6;
  uint32 gold = 7;
}

// ---------------------------------------------------------------------------------------------------------------------

message LolPlayerCurrentMapStatePartialUpdate {
  message Payload {
    oneof payload {
      // Replaces "player_info" property in LolPlayerInfoState.
      LolPlayerInfoState player_info = 1;

      // Replaces "timers" property in LolPlayerCurrentMapTimersState.
      LolPlayerCurrentMapTimersState timers = 2;

      // Replaces "statistics" property in LolPlayerStatisticsState.
      LolPlayerStatisticsState statistics = 3;

      // Replaces "map_statistics" property in LolPlayerCurrentMapStatisticsState.
      LolPlayerCurrentMapStatisticsState map_statistics = 4;

      // Replaces "position" property in LolPosition.
      LolPosition position = 5;
    }
  }

  string player_urn = 1;
  Payload payload = 2;
}

message LolPlayerCurrentMapState{
  string player_urn = 1;
  LolPlayerInfoState player_info = 2;
  LolPlayerCurrentMapTimersState timers = 3;
  LolPlayerStatisticsState statistics = 4;
  LolPlayerCurrentMapStatisticsState map_statistics = 5;
  LolPosition position = 6;
}

message LolPlayerCurrentMapStatisticsState {
  string player_urn = 1;
  bool alive = 2;
  uint32 health = 3;
  uint32 max_health = 4;
  uint32 total_gold = 5;
  uint32 mana = 6;
  uint32 max_mana = 7;
}

message LolPlayerCurrentMapTimersState {
  string player_urn = 1;
  optional google.protobuf.Duration respawn_timer = 2;
}

message LolTeamPreviousMapState {
  string team_urn = 1;
  LolFaction faction = 2;
  uint32 kills = 3;
  uint32 barons = 4;
  uint32 dragons = 5;
  uint32 turrets = 6;
  uint32 inhibitors = 7;
  uint32 gold = 8;
  optional bool won = 9;
  map<string, LolPlayerPreviousMapState> players = 10;
}

message LolPlayerPreviousMapState{
  string player_urn = 1;
  LolPlayerInfoState player_info = 2;
  LolPlayerStatisticsState statistics = 3;
}

message LolPlayerInfoState{
  string player_urn = 1;
  uint32 slot_id = 2;
  string ext_name = 3;
  optional uint32 champion_id = 4;
}

message LolPlayerStatisticsState {
  string player_urn = 1;
  uint32 kills = 2;
  uint32 deaths = 3;
  uint32 assists = 4;
  uint32 creep_score = 5;
}

message LolTurrets {
  repeated LolTurret turrets = 1;
}

message LolInhibitors {
  repeated LolInhibitor inhibitors = 1;
}

message LolTurret {
  LolLane lane = 1;
  LolFaction faction = 2;
  LolTurretTier tier = 3;
  bool alive = 4;
}

message LolInhibitor {
  LolLane lane = 1;
  LolFaction faction = 2;
  bool alive = 3;
}

message LolPosition {
  float x = 1;
  float y = 2;
}

enum LolFaction {
  LOL_FACTION_UNSPECIFIED = 0;
  LOL_FACTION_BLUE = 1;
  LOL_FACTION_RED = 2;
}

enum LolLane {
  LOL_LANE_UNSPECIFIED = 0;
  LOL_LANE_TOP = 1;
  LOL_LANE_MID = 2;
  LOL_LANE_BOT = 3;
}

enum LolTurretTier {
  LOL_TURRET_TIER_UNSPECIFIED = 0;
  LOL_TURRET_TIER_1 = 1;
  LOL_TURRET_TIER_2 = 2;
  LOL_TURRET_TIER_3 = 3;
  LOL_TURRET_TIER_4 = 4;
}
