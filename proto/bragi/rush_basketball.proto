syntax = "proto3";

package bragi;

option go_package = "oddin.gg/bragi";
option java_package = "com.oddin.bragi";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "bragi/common.proto";

message RushBasketballMatchMessage {
  message Payload {
    oneof payload {
      // Initial snapshot.
      RushBasketballMatchSnapshot snapshot = 1;

      // Particular updates which are applied on property match_state in MatchState.
      RushBasketballMatchUpdate update = 2;
    }
  }

  // Match urn.
  string match_urn = 1;
  // Message sequence.
  uint64 sequence = 2;
  // Message timestamp.
  google.protobuf.Timestamp timestamp = 3;
  // Data status.
  DataStatus data_status = 4;
  // Message payload.
  Payload payload = 5;
}

message RushBasketballMatchSnapshot {
  // Match urn.
  string match_urn = 1;
  // Message sequence.
  uint64 sequence = 2;
  // Message timestamp.
  google.protobuf.Timestamp timestamp = 3;
  // Data status.
  DataStatus data_status = 4;
  // Control announcements.
  repeated Announcement announcements = 5;
  // Match state.
  RushBasketballMatchState match_state = 6;
}

message RushBasketballMatchUpdate {
  message Payload {
    oneof payload {
      // Complete match state.
      RushBasketballMatchState match_state = 1;
      // Partial update.
      RushBasketballMatchStatePartialUpdates partial_updates = 2;
    }
  }

  // Update payload.
  Payload payload = 1;
}

message RushBasketballMatchStatePartialUpdates {
  // Partial updates.
  repeated RushBasketballMatchStatePartialUpdate updates = 1;
}

// ---------------------------------------------------------------------------------------------------------------------

message RushBasketballMatchStatePartialUpdate {
  oneof update {
    // Replaces "current_map_state" property in RushBasketballCurrentMapState. To minimalize issues with incorrect updates application
    // on current_map_state, server sends RushBasketballMatchStatePartialUpdate with RushBasketballCurrentMapState in periodic time set by customer.
    RushBasketballCurrentMapState current_map_state = 1;

    // Apply partial update on "current_map_state" property in RushBasketballMapState.
    RushBasketballCurrentMapStatePartialUpdate current_map_state_partial_update = 2;

    // Replaces "timeline" property in RushBasketballMatchState.
    RushBasketballTimelineState timeline = 3;
  }
}

message RushBasketballMatchState {
  // Match urn.
  string match_urn = 1;
  // BO type.
  BestOfType match_type = 2;
  // Home team.
  Team home_team = 3;
  // Away team.
  Team away_team = 4;
  // Match status.
  MatchStatusType match_status = 6;
  // Timeline state.
  RushBasketballTimelineState timeline = 7;
  // Current map state.
  RushBasketballCurrentMapState current_map = 8;
}

message RushBasketballTimelineState {
  // Timeline events.
  repeated RushBasketballTimelineEvent events = 1;
}

message RushBasketballTimelineEvent {
  // Team urn.
  string team_urn = 1;
  // Event type.
  RushBasketballEventType event_type = 2;
  // Remaining game time in seconds (4 x 12 minutes).
  google.protobuf.Duration remaining_time = 3;
  // Period.
  RushBasketballPeriod period = 4;
}

// ---------------------------------------------------------------------------------------------------------------------

message RushBasketballCurrentMapStatePartialUpdate {
  oneof update {
    // Replaces "game_time" property in RushBasketballCurrentMapState.
    RushBasketballCurrentMapTimeState game_time = 1;

    // Replaces "score" property in RushSoccerCurrentMapState.
    RushBasketballCurrentMapScoreState score = 2;

    // Replaces whole value under given key in teams map property in RushBasketballTeamCurrentMapState.
    RushBasketballTeamCurrentMapState team_current_map_state = 3;

    // Apply partial update on value under given key in teams map property in RushBasketballCurrentMapState.
    RushBasketballTeamCurrentMapStatePartialUpdate team_current_map_partial_update = 4;
  }
}

message RushBasketballCurrentMapState {
  // Period.
  RushBasketballPeriod period = 1;
  // Game time.
  RushBasketballCurrentMapTimeState game_time = 2;
  // Map score.
  RushBasketballCurrentMapScoreState score = 3;
  // Paused flag.
  bool map_paused = 4;
  // Teams.
  map<string, RushBasketballTeamCurrentMapState> teams = 5;
}

message RushBasketballCurrentMapTimeState {
  // Remaining game time in seconds (4 x 12 minutes).
  google.protobuf.Duration remaining_time = 1;
}

message RushBasketballCurrentMapScoreState {
  // Number of points of home team.
  uint32 home_score = 1;
  // Number of points of away team.
  uint32 away_score = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message RushBasketballTeamCurrentMapStatePartialUpdate {
  message Payload {
    oneof payload {

      // Replaces "statistics" property in RushBasketballTeamCurrentMapState.
      RushBasketballTeamCurrentMapStatisticsState map_statistics = 1;

      // Replaces "player" property in RushBasketballTeamCurrentMapState.
      RushBasketballPlayerCurrentMapState player = 2;
    }
  }

  // Team urn.
  string team_urn = 1;

  // Update payload.
  Payload payload = 2;
}

message RushBasketballTeamCurrentMapState {
  // Team urn.
  string team_urn = 1;
  // Current map statistics state.
  RushBasketballTeamCurrentMapStatisticsState map_statistics = 2;
  // Current map player state.
  RushBasketballPlayerCurrentMapState player = 3;
}

message RushBasketballPlayerCurrentMapState{
  // Player urn.
  string player_urn = 1;
  // Player ext name.
  string ext_name = 2;
}

message RushBasketballTeamCurrentMapStatisticsState {
  //  Number of points.
  uint32 points_total = 1;
  // Number of goals in the first half (two quarter).
  uint32 points_ht = 2;
  // Number of all period points.
  repeated RushBasketballPeriodPoints period_points = 3;
  // Number of three pointers
  uint32 three_pointers = 4;
  // Number of two pointers
  uint32 two_pointers = 5;
  // Number of successful free throws.
  uint32 free_throws_successful = 6;
  // Number of missed free throws.
  uint32 free_throws_missed = 7;
  // Number of fouls.
  uint32 fouls = 8;
}

message RushBasketballPeriodPoints {
  RushBasketballPeriod period = 1;
  uint32  points = 2;
}

enum RushBasketballEventType {
  RUSH_BASKETBALL_EVENT_TYPE_UNSPECIFIED = 0;
  RUSH_BASKETBALL_EVENT_TYPE_THREE_POINTER = 1;
  RUSH_BASKETBALL_EVENT_TYPE_TWO_POINTER = 2;
  RUSH_BASKETBALL_EVENT_TYPE_FREE_THROW_SUCCESS = 3;
  RUSH_BASKETBALL_EVENT_TYPE_FREE_THROW_MISS = 4;
  RUSH_BASKETBALL_EVENT_TYPE_FOUL = 5;
  RUSH_BASKETBALL_EVENT_TYPE_PERIOD_CHANGE = 6;
}

enum RushBasketballPeriod {
  RUSH_BASKETBALL_PERIOD_UNSPECIFIED = 0;
  RUSH_BASKETBALL_PERIOD_QUARTER_1 = 1;
  RUSH_BASKETBALL_PERIOD_QUARTER_2 = 2;
  RUSH_BASKETBALL_PERIOD_QUARTER_3 = 3;
  RUSH_BASKETBALL_PERIOD_QUARTER_4 = 4;
  RUSH_BASKETBALL_PERIOD_OVERTIME = 5;
}
