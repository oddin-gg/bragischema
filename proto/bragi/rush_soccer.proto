syntax = "proto3";

package bragi;

option go_package = "oddin.gg/bragi";
option java_package = "com.oddin.bragi";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "bragi/common.proto";

message RushSoccerMatchMessage {
  message Payload {
    oneof payload {
      // Initial snapshot.
      RushSoccerMatchSnapshot snapshot = 1;

      // Particular updates which are applied on property match_state in MatchState.
      RushSoccerMatchUpdate update = 2;
    }
  }

  // Match urn.
  string match_urn = 1;
  // Message sequence.
  uint64 sequence = 2;
  // Message timestamp.
  google.protobuf.Timestamp timestamp = 3;
  // Data status.
  DataStatus data_status = 4;
  // Message payload.
  Payload payload = 5;
}

message RushSoccerMatchSnapshot {
  // Match urn.
  string match_urn = 1;
  // Message sequence.
  uint64 sequence = 2;
  // Message timestamp.
  google.protobuf.Timestamp timestamp = 3;
  // Data status.
  DataStatus data_status = 4;
  // Control announcements.
  repeated Announcement announcements = 5;
  // Match state.
  RushSoccerMatchState match_state = 6;
}

message RushSoccerMatchUpdate {
  message Payload {
    oneof payload {
      // Complete match state.
      RushSoccerMatchState match_state = 1;
      // Partial update.
      RushSoccerMatchStatePartialUpdates partial_updates = 2;
    }
  }

  // Update payload.
  Payload payload = 1;
}

message RushSoccerMatchStatePartialUpdates {
  // Partial updates.
  repeated RushSoccerMatchStatePartialUpdate updates = 1;
}

// ---------------------------------------------------------------------------------------------------------------------

message RushSoccerMatchStatePartialUpdate {
  oneof update {
    // Replaces "score" property in RushSoccerMatchState.
    RushSoccerMatchScoreState score = 1;

    // Replaces "current_map_state" property in RushSoccerCurrentMapState. To minimalize issues with incorrect updates application
    // on current_map_state, server sends RushSoccerMatchStatePartialUpdate with RushSoccerCurrentMapState in periodic time set by customer.
    RushSoccerCurrentMapState current_map_state = 2;

    // Apply partial update on "current_map_state" property in RushSoccerMapState.
    RushSoccerCurrentMapStatePartialUpdate current_map_state_partial_update = 3;

    // Replaces "timeline" property in RushSoccerMatchState.
    RushSoccerTimelineState timeline = 4;
  }
}

message RushSoccerMatchState {
  // Match urn.
  string match_urn = 1;
  // BO type.
  BestOfType match_type = 2;
  // Home team.
  Team home_team = 3;
  // Away team.
  Team away_team = 4;
  // Match score - number of maps won.
  RushSoccerMatchScoreState score = 5;
  // Match status.
  MatchStatusType match_status = 6;
  // Timeline state.
  RushSoccerTimelineState timeline = 7;
  // Current map state.
  RushSoccerCurrentMapState current_map = 8;
}

message RushSoccerMatchScoreState {
  // Number of maps won by home team.
  uint32 home_score = 1;
  // Number of maps won by away team.
  uint32 away_score = 2;
}

message RushSoccerCurrentMapScoreState {
  // Number of home goals.
  uint32 home_goals = 1;
  // Number of away goals.
  uint32 away_goals = 2;
}

message RushSoccerTimelineState {
  // Timeline events.
  repeated RushSoccerTimelineEvent events = 1;
}

message RushSoccerTimelineEvent {
  // Team urn.
  string team_urn = 1;
  // Event type.
  RushSoccerEventType event_type = 2;
  // Real time in seconds (2x 4 minutes).
  google.protobuf.Duration real_time = 3;
  // Game time in seconds (2x 45 minutes).
  google.protobuf.Duration game_time = 4;
  // Period.
  RushSoccerPeriod period = 5;
}

// ---------------------------------------------------------------------------------------------------------------------

message RushSoccerCurrentMapStatePartialUpdate {
  oneof update {
    // Replaces "game_time" property in RushSoccerCurrentMapState.
    RushSoccerCurrentMapTimeState game_time = 1;

    // Replaces "score" property in RushSoccerCurrentMapState.
    RushSoccerCurrentMapScoreState score = 2;

    // Replaces whole value under given key in teams map property in RushSoccerTeamCurrentMapState.
    RushSoccerTeamCurrentMapState team_current_map_state = 3;

    // Apply partial update on value under given key in teams map property in RushSoccerCurrentMapState.
    RushSoccerTeamCurrentMapStatePartialUpdate team_current_map_partial_update = 4;
  }
}

message RushSoccerCurrentMapState {
  // Period.
  RushSoccerPeriod period = 1;
  // Game time.
  RushSoccerCurrentMapTimeState game_time = 2;
  // Map score.
  RushSoccerCurrentMapScoreState score = 3;
  // Paused flag.
  bool map_paused = 4;
  // Teams.
  map<string, RushSoccerTeamCurrentMapState> teams = 5;
}

message RushSoccerCurrentMapTimeState {
  // Real time in seconds (2x 4 minutes).
  google.protobuf.Duration real_time = 1;

  // Game time in seconds (2x 45 minutes).
  google.protobuf.Duration game_time = 2;
}

// ---------------------------------------------------------------------------------------------------------------------

message RushSoccerTeamCurrentMapStatePartialUpdate {
  message Payload {
    oneof payload {

      // Replaces "statistics" property in RushSoccerTeamCurrentMapState.
      RushSoccerTeamCurrentMapStatisticsState map_statistics = 1;

      // Replaces "player" property in RushSoccerTeamCurrentMapState.
      RushSoccerPlayerCurrentMapState player = 2;
    }
  }

  // Team urn.
  string team_urn = 1;

  // Update payload.
  Payload payload = 2;
}

message RushSoccerTeamCurrentMapState {
  // Team urn.
  string team_urn = 1;
  // Current map statistics state.
  RushSoccerTeamCurrentMapStatisticsState map_statistics = 2;
  // Current map player state.
  RushSoccerPlayerCurrentMapState player = 3;
}

message RushSoccerPlayerCurrentMapState{
  // Player urn.
  string player_urn = 1;
  // Player ext name.
  string ext_name = 2;
}

message RushSoccerTeamCurrentMapStatisticsState {
  //  Number of goals.
  uint32 goals = 1;
  // Number of goals in the first period.
  uint32 goals_ht = 2;
  // Number of penalty kicks.
  uint32 penalty_kicks = 3;
  // Number of red cards.
  uint32 red_cards = 4;
  // Number of yellow cards.
  uint32 yellow_cards = 5;
  // Number of free kicks.
  uint32 free_kicks = 6;
  // Number of corner kicks.
  uint32 corner_kicks = 7;
}

enum RushSoccerEventType {
  RUSH_SOCCER_EVENT_TYPE_UNSPECIFIED = 0;
  RUSH_SOCCER_EVENT_TYPE_GOAL = 1;
  RUSH_SOCCER_EVENT_TYPE_PENALTY = 2;
  RUSH_SOCCER_EVENT_TYPE_RED_CARD = 3;
  RUSH_SOCCER_EVENT_TYPE_YELLOW_CARD = 4;
  RUSH_SOCCER_EVENT_TYPE_FREE_KICK = 5;
  RUSH_SOCCER_EVENT_TYPE_CORNER_KICK = 6;
  RUSH_SOCCER_EVENT_TYPE_PERIOD_CHANGE = 7;
}

enum RushSoccerPeriod {
  RUSH_SOCCER_PERIOD_UNSPECIFIED = 0;
  RUSH_SOCCER_PERIOD_FIRST = 1;
  RUSH_SOCCER_PERIOD_SECOND = 2;
}
