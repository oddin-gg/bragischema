# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from bragi_schema.bragi import bragi_service_pb2 as bragi_dot_bragi__service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bragi/bragi_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BragiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MatchTimeline = channel.unary_unary(
                '/bragi.Bragi/MatchTimeline',
                request_serializer=bragi_dot_bragi__service__pb2.MatchTimelineRequest.SerializeToString,
                response_deserializer=bragi_dot_bragi__service__pb2.MatchTimelineResponse.FromString,
                _registered_method=True)
        self.MatchTimelineFeed = channel.unary_stream(
                '/bragi.Bragi/MatchTimelineFeed',
                request_serializer=bragi_dot_bragi__service__pb2.MatchTimelineFeedRequest.SerializeToString,
                response_deserializer=bragi_dot_bragi__service__pb2.MatchTimelineFeedMessage.FromString,
                _registered_method=True)
        self.LiveDataFeed = channel.unary_stream(
                '/bragi.Bragi/LiveDataFeed',
                request_serializer=bragi_dot_bragi__service__pb2.LiveDataFeedRequest.SerializeToString,
                response_deserializer=bragi_dot_bragi__service__pb2.LiveDataFeedMessage.FromString,
                _registered_method=True)


class BragiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MatchTimeline(self, request, context):
        """Matches gRPC unary call returns all planned or currently played matches
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MatchTimelineFeed(self, request, context):
        """The MatchTimelineFeed gRPC stream call provides all upcoming or currently in-progress matches. 
        It also sends real-time updates when the status of a match changes. 
        To ensure you have the latest match timeline information, you must remain connected to this stream.
        If the connection is lost, you need to reconnect to continue receiving up-to-date match data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiveDataFeed(self, request, context):
        """LiveDataFeed gRPC stream returning LiveDataFeedMessage one direction stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BragiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MatchTimeline': grpc.unary_unary_rpc_method_handler(
                    servicer.MatchTimeline,
                    request_deserializer=bragi_dot_bragi__service__pb2.MatchTimelineRequest.FromString,
                    response_serializer=bragi_dot_bragi__service__pb2.MatchTimelineResponse.SerializeToString,
            ),
            'MatchTimelineFeed': grpc.unary_stream_rpc_method_handler(
                    servicer.MatchTimelineFeed,
                    request_deserializer=bragi_dot_bragi__service__pb2.MatchTimelineFeedRequest.FromString,
                    response_serializer=bragi_dot_bragi__service__pb2.MatchTimelineFeedMessage.SerializeToString,
            ),
            'LiveDataFeed': grpc.unary_stream_rpc_method_handler(
                    servicer.LiveDataFeed,
                    request_deserializer=bragi_dot_bragi__service__pb2.LiveDataFeedRequest.FromString,
                    response_serializer=bragi_dot_bragi__service__pb2.LiveDataFeedMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bragi.Bragi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('bragi.Bragi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Bragi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MatchTimeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bragi.Bragi/MatchTimeline',
            bragi_dot_bragi__service__pb2.MatchTimelineRequest.SerializeToString,
            bragi_dot_bragi__service__pb2.MatchTimelineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MatchTimelineFeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/bragi.Bragi/MatchTimelineFeed',
            bragi_dot_bragi__service__pb2.MatchTimelineFeedRequest.SerializeToString,
            bragi_dot_bragi__service__pb2.MatchTimelineFeedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LiveDataFeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/bragi.Bragi/LiveDataFeed',
            bragi_dot_bragi__service__pb2.LiveDataFeedRequest.SerializeToString,
            bragi_dot_bragi__service__pb2.LiveDataFeedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
